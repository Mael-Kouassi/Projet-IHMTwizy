<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Tue May 20 16:47:20 2025
<BR><P>
<H3>Maximum Stack Usage =        696 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
WM_OBJECT_WINDOW_cb &rArr; APPW_ProcessMotion &rArr; APPW_CreateRoot &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[52]">SVC_Handler</a>
 <LI><a href="#[54]">PendSV_Handler</a>
 <LI><a href="#[55]">SysTick_Handler</a>
 <LI><a href="#[2c6]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[849]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[849]">osRtxErrorNotify</a><BR>
 <LI><a href="#[4d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">NMI_Handler</a><BR>
 <LI><a href="#[4e]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">HardFault_Handler</a><BR>
 <LI><a href="#[4f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">MemManage_Handler</a><BR>
 <LI><a href="#[50]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">BusFault_Handler</a><BR>
 <LI><a href="#[51]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">UsageFault_Handler</a><BR>
 <LI><a href="#[53]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">DebugMon_Handler</a><BR>
 <LI><a href="#[68]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">ADC_IRQHandler</a><BR>
 <LI><a href="#[73a]">WM__InvalidateDrawAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73a]">WM__InvalidateDrawAndDescs</a><BR>
 <LI><a href="#[73f]">WM_InvalidateWindowAndDescsEx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73f]">WM_InvalidateWindowAndDescsEx</a><BR>
 <LI><a href="#[771]">WM__InvalidateRect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[771]">WM__InvalidateRect</a><BR>
 <LI><a href="#[708]">WM_SendToParent</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d9]">WM__SendMessage</a><BR>
 <LI><a href="#[2e1]">WM_SendMessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d9]">WM__SendMessage</a><BR>
 <LI><a href="#[7fa]">_GetDialogItem</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7fa]">_GetDialogItem</a><BR>
 <LI><a href="#[78e]">_EnlargeBlocks</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[438]">_Alloc</a><BR>
 <LI><a href="#[76f]">_Findx1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76f]">_Findx1</a><BR>
 <LI><a href="#[76e]">_Findx0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76e]">_Findx0</a><BR>
 <LI><a href="#[76d]">_Findy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76d]">_Findy1</a><BR>
 <LI><a href="#[772]">_MoveDescendants</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[772]">_MoveDescendants</a><BR>
 <LI><a href="#[75a]">WM_ResizeWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[705]">WM__UpdateChildPositions</a><BR>
 <LI><a href="#[727]">WM__ForEachDesc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[727]">WM__ForEachDesc</a><BR>
 <LI><a href="#[408]">GUIPROP__FindChar</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[408]">GUIPROP__FindChar</a><BR>
 <LI><a href="#[40b]">GUIPROP_EXT__FindChar</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40b]">GUIPROP_EXT__FindChar</a><BR>
 <LI><a href="#[776]">_PaintTransChildren</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[776]">_PaintTransChildren</a><BR>
 <LI><a href="#[3ba]">WM_DeleteWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ba]">WM_DeleteWindow</a><BR>
 <LI><a href="#[2da]">_BroadcastMessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2da]">_BroadcastMessage</a><BR>
 <LI><a href="#[34a]">_DisposeCoord</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[349]">APPW__DisposeObject</a><BR>
 <LI><a href="#[2db]">_DisposeWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2db]">_DisposeWindow</a><BR>
 <LI><a href="#[815]">_Screen2hWin</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[815]">_Screen2hWin</a><BR>
 <LI><a href="#[2df]">_UndisposeWindow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2df]">_UndisposeWindow</a><BR>
 <LI><a href="#[2ce]">_ResolveTerm</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ce]">_ResolveTerm</a><BR>
 <LI><a href="#[18a]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18a]">osRtxIdleThread</a><BR>
 <LI><a href="#[351]">APPW__SetUnTouchable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[351]">APPW__SetUnTouchable</a><BR>
 <LI><a href="#[65f]">WM_InvalidateWindowAndDescs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65f]">WM_InvalidateWindowAndDescs</a><BR>
 <LI><a href="#[2d0]">_ResolveCalc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d0]">_ResolveCalc</a><BR>
 <LI><a href="#[c3]">_AddKeyDec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">_AddKeyDec</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[68]">ADC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[26b]">APPW_ACTION_SetEnable</a> from appwizard_action.o(.text.APPW_ACTION_SetEnable) referenced from obutton.o(.rodata._aJobs)
 <LI><a href="#[bc]">APPW_DrawStreamedBitmapEXT</a> from appwizard_fileaccess.o(.text.APPW_DrawStreamedBitmapEXT) referenced from appwizard.o(.text.APPW_SetStreamedBitmap)
 <LI><a href="#[bd]">APPW_DrawStreamedBitmapINT</a> from appwizard.o(.text.APPW_DrawStreamedBitmapINT) referenced from appwizard.o(.text.APPW_SetStreamedBitmap)
 <LI><a href="#[c0]">BUTTON_Callback</a> from button.o(.text.BUTTON_Callback) referenced from button.o(.text.BUTTON_CreateUser)
 <LI><a href="#[12]">BUTTON_DrawSkinFlex</a> from button_skinflex.o(.text.BUTTON_DrawSkinFlex) referenced 2 times from button.o(.data..L_MergedGlobals)
 <LI><a href="#[50]">BusFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">CAN1_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6b]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">CAN1_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[96]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[97]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[98]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[95]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b3]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a4]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[61]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">DMA1_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[63]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[65]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[66]">DMA1_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[67]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[85]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[af]">DMA2D_IRQHandler</a> from lcdconf.o(.text.DMA2D_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[90]">DMA2_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[91]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[92]">DMA2_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">DebugMon_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[c1]">EDIT_Callback</a> from edit.o(.text.EDIT_Callback) referenced from edit.o(.text.EDIT_CreateUser)
 <LI><a href="#[93]">ETH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[94]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">EXTI0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7e]">EXTI15_10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">EXTI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5e]">EXTI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">EXTI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">EXTI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6d]">EXTI9_5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[86]">FMC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a6]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[c4]">GAUGE_Callback</a> from gauge.o(.text.GAUGE_Callback) referenced from gauge.o(.text.GAUGE_CreateUser)
 <LI><a href="#[d2]">GL_DrawEllipseXL</a> from gui_circ.o(.text.GL_DrawEllipseXL) referenced from gui_circ.o(.text.GUI_DrawEllipseXL)
 <LI><a href="#[d9]">GL_FillEllipseXL</a> from gui_circ.o(.text.GL_FillEllipseXL) referenced from gui_circ.o(.text.GUI_FillEllipseXL)
 <LI><a href="#[1fc]">GUIMONO_DispChar</a> from gui_charm.o(.text.GUIMONO_DispChar) referenced from f6x8.o(.rodata.GUI_Font6x8)
 <LI><a href="#[1fd]">GUIMONO_GetCharDistX</a> from gui_charm.o(.text.GUIMONO_GetCharDistX) referenced from f6x8.o(.rodata.GUI_Font6x8)
 <LI><a href="#[1fe]">GUIMONO_GetFontInfo</a> from gui_charm.o(.text.GUIMONO_GetFontInfo) referenced from f6x8.o(.rodata.GUI_Font6x8)
 <LI><a href="#[1ff]">GUIMONO_IsInFont</a> from gui_charm.o(.text.GUIMONO_IsInFont) referenced from f6x8.o(.rodata.GUI_Font6x8)
 <LI><a href="#[1f8]">GUIPROP_DispChar</a> from gui_charp.o(.text.GUIPROP_DispChar) referenced from f13_1.o(.rodata.GUI_Font13_1)
 <LI><a href="#[40]">GUIPROP_EXT__ClearLine</a> from gui_encext.o(.text.GUIPROP_EXT__ClearLine) referenced 2 times from gui_encext.o(.data._fpClearLine)
 <LI><a href="#[40]">GUIPROP_EXT__ClearLine</a> from gui_encext.o(.text.GUIPROP_EXT__ClearLine) referenced from gui_xbf_propext.o(.text._DispLine)
 <LI><a href="#[1f7]">GUIPROP_EXT__DispLine</a> from gui_encext.o(.text.GUIPROP_EXT__DispLine) referenced from gui_encext.o(.rodata.GUI_ENC_APIList_EXT)
 <LI><a href="#[1f9]">GUIPROP_GetCharDistX</a> from gui_charp.o(.text.GUIPROP_GetCharDistX) referenced from f13_1.o(.rodata.GUI_Font13_1)
 <LI><a href="#[1fa]">GUIPROP_GetFontInfo</a> from gui_charp.o(.text.GUIPROP_GetFontInfo) referenced from f13_1.o(.rodata.GUI_Font13_1)
 <LI><a href="#[1fb]">GUIPROP_IsInFont</a> from gui_charp.o(.text.GUIPROP_IsInFont) referenced from f13_1.o(.rodata.GUI_Font13_1)
 <LI><a href="#[c6]">GUI_AA_HiRes2Pixel</a> from guiaa_lib.o(.text.GUI_AA_HiRes2Pixel) referenced from guiaa_circle.o(.text.GUI_AA_DrawCircle)
 <LI><a href="#[c6]">GUI_AA_HiRes2Pixel</a> from guiaa_lib.o(.text.GUI_AA_HiRes2Pixel) referenced from guiaa_drawroundedrect.o(.text.GUI_AA_DrawRoundedFrame)
 <LI><a href="#[c6]">GUI_AA_HiRes2Pixel</a> from guiaa_lib.o(.text.GUI_AA_HiRes2Pixel) referenced from guiaa_fillroundedrect.o(.text.GUI_AA_FillRoundedRect)
 <LI><a href="#[de]">GUI_ALLOC_AllocZero</a> from gui_alloc.o(.text.GUI_ALLOC_AllocZero) referenced from gui_jpeg.o(.text.GUI_JPEG__InitDraw)
 <LI><a href="#[df]">GUI_ALLOC_Free</a> from gui_alloc.o(.text.GUI_ALLOC_Free) referenced from gui_jpeg.o(.text.GUI_JPEG__InitDraw)
 <LI><a href="#[174]">GUI_ALLOC_FreeFixedBlock</a> from gui_alloc.o(.text.GUI_ALLOC_FreeFixedBlock) referenced from gui__alpha.o(.text._OnExit)
 <LI><a href="#[cb]">GUI_ALLOC_LockH</a> from gui_alloc.o(.text.GUI_ALLOC_LockH) referenced from gui_anim.o(.text.GUI_ANIM_AddItem)
 <LI><a href="#[cb]">GUI_ALLOC_LockH</a> from gui_alloc.o(.text.GUI_ALLOC_LockH) referenced from guidev_writealpha.o(.text.GUI_MEMDEV_WriteAlphaAt)
 <LI><a href="#[cb]">GUI_ALLOC_LockH</a> from gui_alloc.o(.text.GUI_ALLOC_LockH) referenced from wm_lib.o(.text.WM_BringToBottom)
 <LI><a href="#[e5]">GUI_ALLOC_UnlockH</a> from gui_alloc.o(.text.GUI_ALLOC_UnlockH) referenced from guidev_writealpha.o(.text.GUI_MEMDEV_WriteAlphaAt)
 <LI><a href="#[e5]">GUI_ALLOC_UnlockH</a> from gui_alloc.o(.text.GUI_ALLOC_UnlockH) referenced from wm_lib.o(.text.WM_BringToBottom)
 <LI><a href="#[177]">GUI_ALLOC_h2p</a> from gui_alloc.o(.text.GUI_ALLOC_h2p) referenced from wm.o(.text._PaintTransChildren)
 <LI><a href="#[ce]">GUI_BMP__GetData</a> from gui_bmp.o(.text.GUI_BMP__GetData) referenced from gui_bmp.o(.text.GUI_BMP_Draw)
 <LI><a href="#[122]">GUI_ClearRect</a> from gui_core.o(.text.GUI_ClearRect) referenced from widget.o(.text.WIDGET__FillStringInRectEx)
 <LI><a href="#[16]">GUI_DrawStreamedBitmapAuto</a> from gui_stream.o(.text.GUI_DrawStreamedBitmapAuto) referenced 2 times from gui_draw_streamed.o(.data..L_MergedGlobals)
 <LI><a href="#[17]">GUI_DrawStreamedBitmapExAuto</a> from gui_stream.o(.text.GUI_DrawStreamedBitmapExAuto) referenced 2 times from gui_draw_streamed.o(.data..L_MergedGlobals)
 <LI><a href="#[dc]">GUI_GIF__GetData</a> from gui_gif.o(.text.GUI_GIF__GetData) referenced from gui_gif.o(.text.GUI_GIF_GetYSize)
 <LI><a href="#[dd]">GUI_JPEG__GetData</a> from gui_jpeg.o(.text.GUI_JPEG__GetData) referenced from gui_jpeg.o(.text.GUI_JPEG_GetInfo)
 <LI><a href="#[176]">GUI_MEMDEV_Paint1Static</a> from guidev_staticdevices.o(.text.GUI_MEMDEV_Paint1Static) referenced from wm.o(.text._Paint1)
 <LI><a href="#[17b]">GUI_MEMDEV_Rotate</a> from guidev_rotate.o(.text.GUI_MEMDEV_Rotate) referenced from image.o(.text._SetScaleAngAlphaSub)
 <LI><a href="#[17a]">GUI_MEMDEV_RotateHQ</a> from guidev_rotate.o(.text.GUI_MEMDEV_RotateHQ) referenced from image.o(.text._SetScaleAngAlphaSub)
 <LI><a href="#[16f]">GUI_MEMDEV__WriteToActiveAlpha</a> from guidev_writetoactivealpha.o(.text.GUI_MEMDEV__WriteToActiveAlpha) referenced from guidev_32.o(.text._GetDevFunc)
 <LI><a href="#[41]">GUI_PID_GetState</a> from gui_pid.o(.text.GUI_PID_GetState) referenced 2 times from wm_touch.o(.data._pcbGetState)
 <LI><a href="#[41]">GUI_PID_GetState</a> from gui_pid.o(.text.GUI_PID_GetState) referenced from wm_touch.o(.text.WM_EnablePID)
 <LI><a href="#[ea]">GUI_SetAlpha</a> from gui_setalpha.o(.text.GUI_SetAlpha) referenced from gui_setalpha.o(.text.GUI_SetAlpha)
 <LI><a href="#[eb]">GUI_TIMER_Exec</a> from gui_timer.o(.text.GUI_TIMER_Exec) referenced from gui_timer.o(.text.GUI_TIMER_Create)
 <LI><a href="#[ed]">GUI_TOUCH_Tick</a> from gui_x_rte.o(.text.GUI_TOUCH_Tick) referenced 2 times from gui_x_rte.o(.text.GUI_X_Init)
 <LI><a href="#[198]">GUI_USAGE_BM_AddHLine</a> from guidev_usagebm.o(.text.GUI_USAGE_BM_AddHLine) referenced from guidev_usagebm.o(.rodata.API)
 <LI><a href="#[197]">GUI_USAGE_BM_AddPixel</a> from guidev_usagebm.o(.text.GUI_USAGE_BM_AddPixel) referenced from guidev_usagebm.o(.rodata.API)
 <LI><a href="#[199]">GUI_USAGE_BM_Clear</a> from guidev_usagebm.o(.text.GUI_USAGE_BM_Clear) referenced from guidev_usagebm.o(.rodata.API)
 <LI><a href="#[19b]">GUI_USAGE_BM_GetNextDirty</a> from guidev_usagebm.o(.text.GUI_USAGE_BM_GetNextDirty) referenced from guidev_usagebm.o(.rodata.API)
 <LI><a href="#[141]">GUI_XBF__ClearLine</a> from gui_xbf.o(.text.GUI_XBF__ClearLine) referenced from guiaa_char4ext_xbf.o(.text._DispLine)
 <LI><a href="#[211]">GUI_XBF__GetCharDistX</a> from gui_xbf.o(.text.GUI_XBF__GetCharDistX) referenced from guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
 <LI><a href="#[211]">GUI_XBF__GetCharDistX</a> from gui_xbf.o(.text.GUI_XBF__GetCharDistX) referenced from guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
 <LI><a href="#[211]">GUI_XBF__GetCharDistX</a> from gui_xbf.o(.text.GUI_XBF__GetCharDistX) referenced from gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
 <LI><a href="#[211]">GUI_XBF__GetCharDistX</a> from gui_xbf.o(.text.GUI_XBF__GetCharDistX) referenced from gui_xbf_propfrm.o(.rodata.GUI_XBF_APIList_Prop_Frm)
 <LI><a href="#[214]">GUI_XBF__GetCharInfo</a> from gui_xbf.o(.text.GUI_XBF__GetCharInfo) referenced from guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
 <LI><a href="#[214]">GUI_XBF__GetCharInfo</a> from gui_xbf.o(.text.GUI_XBF__GetCharInfo) referenced from guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
 <LI><a href="#[214]">GUI_XBF__GetCharInfo</a> from gui_xbf.o(.text.GUI_XBF__GetCharInfo) referenced from gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
 <LI><a href="#[212]">GUI_XBF__GetFontInfo</a> from gui_xbf.o(.text.GUI_XBF__GetFontInfo) referenced from guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
 <LI><a href="#[212]">GUI_XBF__GetFontInfo</a> from gui_xbf.o(.text.GUI_XBF__GetFontInfo) referenced from guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
 <LI><a href="#[212]">GUI_XBF__GetFontInfo</a> from gui_xbf.o(.text.GUI_XBF__GetFontInfo) referenced from gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
 <LI><a href="#[212]">GUI_XBF__GetFontInfo</a> from gui_xbf.o(.text.GUI_XBF__GetFontInfo) referenced from gui_xbf_propfrm.o(.rodata.GUI_XBF_APIList_Prop_Frm)
 <LI><a href="#[213]">GUI_XBF__IsInFont</a> from gui_xbf.o(.text.GUI_XBF__IsInFont) referenced from guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
 <LI><a href="#[213]">GUI_XBF__IsInFont</a> from gui_xbf.o(.text.GUI_XBF__IsInFont) referenced from guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
 <LI><a href="#[213]">GUI_XBF__IsInFont</a> from gui_xbf.o(.text.GUI_XBF__IsInFont) referenced from gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
 <LI><a href="#[213]">GUI_XBF__IsInFont</a> from gui_xbf.o(.text.GUI_XBF__IsInFont) referenced from gui_xbf_propfrm.o(.rodata.GUI_XBF_APIList_Prop_Frm)
 <LI><a href="#[158]">GUI__DivideRound32</a> from gui__private.o(.text.GUI__DivideRound32) referenced from guidev_rotate.o(.text._GetColorHQ)
 <LI><a href="#[1f]">GUI__DrawCharEXT</a> from gui_encext.o(.text.GUI__DrawCharEXT) referenced 2 times from gui_core.o(.data.GUI__pfDrawCharEXT)
 <LI><a href="#[22]">GUI__MixColors</a> from gui__alpha.o(.text.GUI__MixColors) referenced 2 times from gui__alpha.o(.data.GUI__pfMixColors)
 <LI><a href="#[22]">GUI__MixColors</a> from gui__alpha.o(.text.GUI__MixColors) referenced from gui__alpha.o(.text.GUI_SetFuncMixColors)
 <LI><a href="#[23]">GUI__MixColorsBulk</a> from gui__alpha.o(.text.GUI__MixColorsBulk) referenced 2 times from gui__alpha.o(.data.GUI__pfMixColorsBulk)
 <LI><a href="#[23]">GUI__MixColorsBulk</a> from gui__alpha.o(.text.GUI__MixColorsBulk) referenced from gui__alpha.o(.text.GUI_SetFuncMixColorsBulk)
 <LI><a href="#[14]">GUI__NOBIDI_GetCharWrap</a> from gui__wrap.o(.text.GUI__NOBIDI_GetCharWrap) referenced 2 times from gui__wrap.o(.data..L_MergedGlobals)
 <LI><a href="#[1c]">GUI__NOBIDI_GetCursorCharacter</a> from gui__getcursorpos.o(.text.GUI__NOBIDI_GetCursorCharacter) referenced 2 times from gui__getcursorpos.o(.data.GUI__GetCursorPos_pfGetCharacter)
 <LI><a href="#[1d]">GUI__NOBIDI_GetCursorPosChar</a> from gui__getcursorpos.o(.text.GUI__NOBIDI_GetCursorPosChar) referenced 2 times from gui__getcursorpos.o(.data.GUI__GetCursorPos_pfGetPosChar)
 <LI><a href="#[1e]">GUI__NOBIDI_GetCursorPosX</a> from gui__getcursorpos.o(.text.GUI__NOBIDI_GetCursorPosX) referenced 2 times from gui__getcursorpos.o(.data.GUI__GetCursorPos_pfGetPosX)
 <LI><a href="#[13]">GUI__NOBIDI_GetWordWrap</a> from gui__wrap.o(.text.GUI__NOBIDI_GetWordWrap) referenced 2 times from gui__wrap.o(.data..L_MergedGlobals)
 <LI><a href="#[1b]">GUI__NOBIDI_Log2VisBuffered</a> from gui_charline.o(.text.GUI__NOBIDI_Log2VisBuffered) referenced 2 times from gui_charline.o(.data.GUI_CharLine_pfLog2Vis)
 <LI><a href="#[bb]">GUI__Read16</a> from gui__private.o(.text.GUI__Read16) referenced from appwizard_fileaccess.o(.text.APPW_MakeFontEx)
 <LI><a href="#[bb]">GUI__Read16</a> from gui__private.o(.text.GUI__Read16) referenced from gui_gif.o(.text.GUI_GIF__DrawFromFilePointer)
 <LI><a href="#[bb]">GUI__Read16</a> from gui__private.o(.text.GUI__Read16) referenced from gui_xbf.o(.text.GUI_XBF__GetCharInfo)
 <LI><a href="#[bb]">GUI__Read16</a> from gui__private.o(.text.GUI__Read16) referenced from gui_stream.o(.text.GUI__ReadHeaderFromStream)
 <LI><a href="#[bb]">GUI__Read16</a> from gui__private.o(.text.GUI__Read16) referenced 3 times from guiaa_char4ext_xbf.o(.text._DispChar)
 <LI><a href="#[d1]">GUI__Read32</a> from gui__private.o(.text.GUI__Read32) referenced from gui_bmp.o(.text.GUI_BMP__Init)
 <LI><a href="#[d1]">GUI__Read32</a> from gui__private.o(.text.GUI__Read32) referenced from gui_bmp.o(.text._ManageBitfields)
 <LI><a href="#[4e]">HardFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[76]">I2C1_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[75]">I2C1_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[78]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[77]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9f]">I2C3_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9e]">I2C3_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b5]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b4]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[268]">ID_SCREEN_00__ID_BUTTON_00__WM_NOTIFICATION_CLICKED</a> from id_screen_00_slots.o(.text.ID_SCREEN_00__ID_BUTTON_00__WM_NOTIFICATION_CLICKED) referenced from id_screen_00.o(.rodata._aAction)
 <LI><a href="#[269]">ID_SCREEN_00__ID_TIMER_00__APPW_NOTIFICATION_TIMER__ID_TIMER_00__APPW_JOB_START</a> from id_screen_00_slots.o(.text.ID_SCREEN_00__ID_TIMER_00__APPW_NOTIFICATION_TIMER__ID_TIMER_00__APPW_JOB_START) referenced from id_screen_00.o(.rodata._aAction)
 <LI><a href="#[f1]">IMAGE_Callback</a> from image.o(.text.IMAGE_Callback) referenced from image.o(.text.IMAGE_CreateUser)
 <LI><a href="#[27]">LCD_AA_MixColors16</a> from lcd_aa.o(.text.LCD_AA_MixColors16) referenced 2 times from lcd_aa.o(.data.LCD_AA_pfMixColors16)
 <LI><a href="#[d4]">LCD_DrawHLine</a> from lcd.o(.text.LCD_DrawHLine) referenced from gui_core.o(.rodata._HL_APIList)
 <LI><a href="#[d4]">LCD_DrawHLine</a> from lcd.o(.text.LCD_DrawHLine) referenced from gui_drawgradient.o(.text.GUI_DrawGradientV)
 <LI><a href="#[d4]">LCD_DrawHLine</a> from lcd.o(.text.LCD_DrawHLine) referenced from gui_drawroundedrect.o(.text.GUI_DrawRoundedRect)
 <LI><a href="#[d4]">LCD_DrawHLine</a> from lcd.o(.text.LCD_DrawHLine) referenced from gui__drawtwinarc.o(.text.GUI__DrawTwinArc4)
 <LI><a href="#[d5]">LCD_DrawPixel</a> from lcd.o(.text.LCD_DrawPixel) referenced from gui_core.o(.rodata._HL_APIList)
 <LI><a href="#[d5]">LCD_DrawPixel</a> from lcd.o(.text.LCD_DrawPixel) referenced from gui_drawroundedrect.o(.text.GUI_DrawRoundedRect)
 <LI><a href="#[d3]">LCD_DrawVLine</a> from lcd.o(.text.LCD_DrawVLine) referenced from gui_drawgradientrounded.o(.text.GUI_DrawGradientRoundedMH)
 <LI><a href="#[c7]">LCD_FillRect</a> from lcd.o(.text.LCD_FillRect) referenced from guiaa_fillroundedrect.o(.text.GUI_AA_FillRoundedRect)
 <LI><a href="#[c7]">LCD_FillRect</a> from lcd.o(.text.LCD_FillRect) referenced from gui_drawroundedframe.o(.text.GUI_DrawRoundedFrame)
 <LI><a href="#[25]">LCD_GetpPalConvTableBM</a> from lcd_color.o(.text.LCD_GetpPalConvTableBM) referenced 2 times from gui_core.o(.data.GUI_pfGetpPalConvTable)
 <LI><a href="#[148]">LCD_Index2Color_444_12</a> from guicc_444_12_index2color.o(.text.LCD_Index2Color_444_12) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_12)
 <LI><a href="#[148]">LCD_Index2Color_444_12</a> from guicc_444_12_index2color.o(.text.LCD_Index2Color_444_12) referenced from gui_drawbitmap_444.o(.text._DrawBitmap444_12)
 <LI><a href="#[149]">LCD_Index2Color_444_12_1</a> from guicc_444_12_1_index2color.o(.text.LCD_Index2Color_444_12_1) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_12_1)
 <LI><a href="#[149]">LCD_Index2Color_444_12_1</a> from guicc_444_12_1_index2color.o(.text.LCD_Index2Color_444_12_1) referenced from gui_drawbitmap_444.o(.text._DrawBitmap444_12_1)
 <LI><a href="#[14a]">LCD_Index2Color_444_16</a> from guicc_444_16_index2color.o(.text.LCD_Index2Color_444_16) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_16)
 <LI><a href="#[14a]">LCD_Index2Color_444_16</a> from guicc_444_16_index2color.o(.text.LCD_Index2Color_444_16) referenced from gui_drawbitmap_444.o(.text._DrawBitmap444_16)
 <LI><a href="#[144]">LCD_Index2Color_555</a> from guicc_555_index2color.o(.text.LCD_Index2Color_555) referenced from gui_drawbitmap_555.o(.rodata.GUI_BitmapMethods555)
 <LI><a href="#[144]">LCD_Index2Color_555</a> from guicc_555_index2color.o(.text.LCD_Index2Color_555) referenced from gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsA555)
 <LI><a href="#[144]">LCD_Index2Color_555</a> from guicc_555_index2color.o(.text.LCD_Index2Color_555) referenced from gui_drawbitmap_555.o(.text._DrawBitmap)
 <LI><a href="#[144]">LCD_Index2Color_555</a> from guicc_555_index2color.o(.text.LCD_Index2Color_555) referenced from gui_drawbitmap_a16.o(.text._DrawBitmapA555)
 <LI><a href="#[145]">LCD_Index2Color_565</a> from guicc_565.o(.text.LCD_Index2Color_565) referenced from gui_drawbitmap_565.o(.rodata.GUI_BitmapMethods565)
 <LI><a href="#[145]">LCD_Index2Color_565</a> from guicc_565.o(.text.LCD_Index2Color_565) referenced from gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsA565)
 <LI><a href="#[145]">LCD_Index2Color_565</a> from guicc_565.o(.text.LCD_Index2Color_565) referenced from guicc_565.o(.rodata.LCD_API_ColorConv_565)
 <LI><a href="#[145]">LCD_Index2Color_565</a> from guicc_565.o(.text.LCD_Index2Color_565) referenced from gui_drawbitmap_565.o(.text._DrawBitmap)
 <LI><a href="#[145]">LCD_Index2Color_565</a> from guicc_565.o(.text.LCD_Index2Color_565) referenced from gui_drawbitmap_a16.o(.text._DrawBitmapA565)
 <LI><a href="#[1d8]">LCD_Index2Color_888</a> from guicc_888_index2color.o(.text.LCD_Index2Color_888) referenced from gui_drawbitmap_24.o(.rodata.GUI_BitmapMethods24)
 <LI><a href="#[143]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(.text.LCD_Index2Color_8888) referenced from gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethods8888)
 <LI><a href="#[143]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(.text.LCD_Index2Color_8888) referenced from guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
 <LI><a href="#[143]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(.text.LCD_Index2Color_8888) referenced from lcd_rle32.o(.text._Draw)
 <LI><a href="#[143]">LCD_Index2Color_8888</a> from guicc_8888_index2color.o(.text.LCD_Index2Color_8888) referenced from gui_drawbitmap_8888.o(.text._DrawBitmap_8888)
 <LI><a href="#[14c]">LCD_Index2Color_M444_12</a> from guicc_m444_12_index2color.o(.text.LCD_Index2Color_M444_12) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_12)
 <LI><a href="#[14c]">LCD_Index2Color_M444_12</a> from guicc_m444_12_index2color.o(.text.LCD_Index2Color_M444_12) referenced from gui_drawbitmap_444.o(.text._DrawBitmapM444_12)
 <LI><a href="#[14d]">LCD_Index2Color_M444_12_1</a> from guicc_m444_12_1_index2color.o(.text.LCD_Index2Color_M444_12_1) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_12_1)
 <LI><a href="#[14d]">LCD_Index2Color_M444_12_1</a> from guicc_m444_12_1_index2color.o(.text.LCD_Index2Color_M444_12_1) referenced from gui_drawbitmap_444.o(.text._DrawBitmapM444_12_1)
 <LI><a href="#[14e]">LCD_Index2Color_M444_16</a> from guicc_m444_16_index2color.o(.text.LCD_Index2Color_M444_16) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_16)
 <LI><a href="#[14e]">LCD_Index2Color_M444_16</a> from guicc_m444_16_index2color.o(.text.LCD_Index2Color_M444_16) referenced from gui_drawbitmap_444.o(.text._DrawBitmapM444_16)
 <LI><a href="#[d0]">LCD_Index2Color_M555</a> from guicc_m555_index2color.o(.text.LCD_Index2Color_M555) referenced from gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsAM555)
 <LI><a href="#[d0]">LCD_Index2Color_M555</a> from guicc_m555_index2color.o(.text.LCD_Index2Color_M555) referenced from gui_drawbitmap_555.o(.rodata.GUI_BitmapMethodsM555)
 <LI><a href="#[d0]">LCD_Index2Color_M555</a> from guicc_m555_index2color.o(.text.LCD_Index2Color_M555) referenced from gui_bmp.o(.text.GUI_BMP_DrawEx)
 <LI><a href="#[d0]">LCD_Index2Color_M555</a> from guicc_m555_index2color.o(.text.LCD_Index2Color_M555) referenced from gui_drawbitmap_a16.o(.text._DrawBitmapAM555)
 <LI><a href="#[d0]">LCD_Index2Color_M555</a> from guicc_m555_index2color.o(.text.LCD_Index2Color_M555) referenced from gui_drawbitmap_555.o(.text._DrawBitmapSwapRB)
 <LI><a href="#[14b]">LCD_Index2Color_M565</a> from guicc_m565.o(.text.LCD_Index2Color_M565) referenced from gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsAM565)
 <LI><a href="#[14b]">LCD_Index2Color_M565</a> from guicc_m565.o(.text.LCD_Index2Color_M565) referenced from gui_drawbitmap_565.o(.rodata.GUI_BitmapMethodsM565)
 <LI><a href="#[14b]">LCD_Index2Color_M565</a> from guicc_m565.o(.text.LCD_Index2Color_M565) referenced from guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
 <LI><a href="#[14b]">LCD_Index2Color_M565</a> from guicc_m565.o(.text.LCD_Index2Color_M565) referenced from gui_drawbitmap_a16.o(.text._DrawBitmapAM565)
 <LI><a href="#[14b]">LCD_Index2Color_M565</a> from guicc_m565.o(.text.LCD_Index2Color_M565) referenced from gui_drawbitmap_565.o(.text._DrawBitmapSwapRB)
 <LI><a href="#[ef]">LCD_Index2Color_M8888I</a> from guicc_m8888i_index2color.o(.text.LCD_Index2Color_M8888I) referenced from gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethodsM8888I)
 <LI><a href="#[ef]">LCD_Index2Color_M8888I</a> from guicc_m8888i_index2color.o(.text.LCD_Index2Color_M8888I) referenced from guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
 <LI><a href="#[ef]">LCD_Index2Color_M8888I</a> from guicc_m8888i_index2color.o(.text.LCD_Index2Color_M8888I) referenced from gui__alpha.o(.text.GUI__DoAlphaBlending)
 <LI><a href="#[ef]">LCD_Index2Color_M8888I</a> from guicc_m8888i_index2color.o(.text.LCD_Index2Color_M8888I) referenced from lcd_rlealpha.o(.text._Draw)
 <LI><a href="#[ef]">LCD_Index2Color_M8888I</a> from guicc_m8888i_index2color.o(.text.LCD_Index2Color_M8888I) referenced from gui_drawbitmap_8888.o(.text._DrawBitmap_M8888I)
 <LI><a href="#[ef]">LCD_Index2Color_M8888I</a> from guicc_m8888i_index2color.o(.text.LCD_Index2Color_M8888I) referenced from guidev_writetoactivealpha.o(.text._WriteToActiveAlpha)
 <LI><a href="#[115]">LCD_SetPixelAA4_NoTrans</a> from lcd_aa.o(.text.LCD_SetPixelAA4_NoTrans) referenced from lcd_aa.o(.text.LCD__GetPfSetPixel)
 <LI><a href="#[ca]">LCD_SetPixelAA4_Trans</a> from lcd_aa.o(.text.LCD_SetPixelAA4_Trans) referenced from guiaa_char2.o(.text.GUI_AA__DrawCharAA2)
 <LI><a href="#[ca]">LCD_SetPixelAA4_Trans</a> from lcd_aa.o(.text.LCD_SetPixelAA4_Trans) referenced from lcd_aa.o(.text.LCD__GetPfSetPixel)
 <LI><a href="#[ca]">LCD_SetPixelAA4_Trans</a> from lcd_aa.o(.text.LCD_SetPixelAA4_Trans) referenced from guiaa_lib.o(.text._FlushLine)
 <LI><a href="#[113]">LCD_SetPixelAA8_NoTrans</a> from lcd_aa.o(.text.LCD_SetPixelAA8_NoTrans) referenced from lcd_aa.o(.text.LCD__GetPfSetPixel)
 <LI><a href="#[114]">LCD_SetPixelAA8_Trans</a> from lcd_aa.o(.text.LCD_SetPixelAA8_Trans) referenced from lcd_aa.o(.text.LCD__GetPfSetPixel)
 <LI><a href="#[b2]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[ae]">LTDC_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[ad]">LTDC_IRQHandler</a> from lcdconf.o(.text.LTDC_IRQHandler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[104]">MainTask</a> from appw_maintask.o(.text.MainTask) referenced 2 times from gui_singlethread.o(.text.Init_GUIThread)
 <LI><a href="#[4f]">MemManage_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">NMI_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[99]">OTG_FS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[80]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a1]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a0]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a3]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a2]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[57]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b1]">QUADSPI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a5]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7f]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[ac]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b0]">SAI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[87]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b6]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[79]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7a]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[89]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a9]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[aa]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[ab]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced 2 times from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[55]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b7]">SystemInit</a> from system_stm32f7xx.o(.text.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[58]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[121]">TEXT_Callback</a> from text.o(.text.TEXT_Callback) referenced from text.o(.text.TEXT_CreateUser)
 <LI><a href="#[6e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[71]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[70]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[72]">TIM2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[73]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[74]">TIM4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[88]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8c]">TIM6_DAC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8d]">TIM7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[81]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[84]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[83]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[82]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8a]">UART4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8b]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a7]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a8]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7b]">USART1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7c]">USART2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7d]">USART3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9d]">USART6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">UsageFault_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[123]">WINDOW_Callback</a> from window.o(.text.WINDOW_Callback) referenced from window.o(.text.WINDOW_CreateUser)
 <LI><a href="#[e8]">WM_HandlePID</a> from wm_touch.o(.text.WM_HandlePID) referenced from gui_pid.o(.text.GUI_PID_StoreState)
 <LI><a href="#[39]">WM_OBJECT_BOX_Create</a> from obox.o(.text.WM_OBJECT_BOX_Create) referenced 6 times from id_screen_00.o(.data._aCreate)
 <LI><a href="#[12b]">WM_OBJECT_BOX_cb</a> from obox.o(.text.WM_OBJECT_BOX_cb) referenced from obox.o(.text.WM_OBJECT_BOX_Create)
 <LI><a href="#[3b]">WM_OBJECT_BUTTON_Create</a> from obutton.o(.text.WM_OBJECT_BUTTON_Create) referenced 4 times from id_screen_00.o(.data._aCreate)
 <LI><a href="#[12d]">WM_OBJECT_BUTTON_cb</a> from obutton.o(.text.WM_OBJECT_BUTTON_cb) referenced from obutton.o(.text.WM_OBJECT_BUTTON_Create)
 <LI><a href="#[3d]">WM_OBJECT_GAUGE_Create</a> from ogauge.o(.text.WM_OBJECT_GAUGE_Create) referenced 2 times from id_screen_00.o(.data._aCreate)
 <LI><a href="#[130]">WM_OBJECT_GAUGE_cb</a> from ogauge.o(.text.WM_OBJECT_GAUGE_cb) referenced from ogauge.o(.text.WM_OBJECT_GAUGE_Create)
 <LI><a href="#[3a]">WM_OBJECT_IMAGE_Create</a> from oimage.o(.text.WM_OBJECT_IMAGE_Create) referenced 4 times from id_screen_00.o(.data._aCreate)
 <LI><a href="#[132]">WM_OBJECT_IMAGE_cb</a> from oimage.o(.text.WM_OBJECT_IMAGE_cb) referenced from oimage.o(.text.WM_OBJECT_IMAGE_Create)
 <LI><a href="#[3f]">WM_OBJECT_PROGBAR_Create</a> from oprogbar.o(.text.WM_OBJECT_PROGBAR_Create) referenced 2 times from id_screen_00.o(.data._aCreate)
 <LI><a href="#[134]">WM_OBJECT_PROGBAR_cb</a> from oprogbar.o(.text.WM_OBJECT_PROGBAR_cb) referenced from oprogbar.o(.text.WM_OBJECT_PROGBAR_Create)
 <LI><a href="#[3e]">WM_OBJECT_TEXT_Create</a> from otext.o(.text.WM_OBJECT_TEXT_Create) referenced 6 times from id_screen_00.o(.data._aCreate)
 <LI><a href="#[136]">WM_OBJECT_TEXT_cb</a> from otext.o(.text.WM_OBJECT_TEXT_cb) referenced from otext.o(.text.WM_OBJECT_TEXT_Create)
 <LI><a href="#[3c]">WM_OBJECT_TIMER_Create</a> from otimer.o(.text.WM_OBJECT_TIMER_Create) referenced 2 times from id_screen_00.o(.data._aCreate)
 <LI><a href="#[138]">WM_OBJECT_TIMER_cb</a> from otimer.o(.text.WM_OBJECT_TIMER_cb) referenced from otimer.o(.text.WM_OBJECT_TIMER_Create)
 <LI><a href="#[38]">WM_OBJECT_WINDOW_Create</a> from owindow.o(.text.WM_OBJECT_WINDOW_Create) referenced 2 times from id_screen_00.o(.data._aCreate)
 <LI><a href="#[13a]">WM_OBJECT_WINDOW_cb</a> from owindow.o(.text.WM_OBJECT_WINDOW_cb) referenced from owindow.o(.text.WM_OBJECT_WINDOW_Create)
 <LI><a href="#[127]">WM__AddCriticalHandle</a> from wm__private.o(.text.WM__AddCriticalHandle) referenced from wm.o(.text.WM_Init)
 <LI><a href="#[175]">WM__Paint1</a> from wm.o(.text.WM__Paint1) referenced from wm.o(.text._Paint1)
 <LI><a href="#[56]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29f]">_ACTION_AddValue</a> from appwizard_action.o(.text._ACTION_AddValue) referenced from appwizard_action.o(.rodata._aJobsVar)
 <LI><a href="#[299]">_ACTION_AnimCreate</a> from appwizard_action.o(.text._ACTION_AnimCreate) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[29b]">_ACTION_AnimStart</a> from appwizard_action.o(.text._ACTION_AnimStart) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[29a]">_ACTION_AnimStop</a> from appwizard_action.o(.text._ACTION_AnimStop) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[2a0]">_ACTION_CalcVar</a> from appwizard_action.o(.text._ACTION_CalcVar) referenced from appwizard_action.o(.rodata._aJobsVar)
 <LI><a href="#[293]">_ACTION_CloseScreen</a> from appwizard_action.o(.text._ACTION_CloseScreen) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[292]">_ACTION_EnablePID</a> from appwizard_action.o(.text._ACTION_EnablePID) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[29c]">_ACTION_Invalidate</a> from appwizard_action.o(.text._ACTION_Invalidate) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[298]">_ACTION_ModalMessage</a> from appwizard_action.o(.text._ACTION_ModalMessage) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[29d]">_ACTION_RotateDisplay</a> from appwizard_action.o(.text._ACTION_RotateDisplay) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[28c]">_ACTION_SetCoord</a> from appwizard_action.o(.text._ACTION_SetCoord) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[291]">_ACTION_SetLang</a> from appwizard_action.o(.text._ACTION_SetLang) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[28d]">_ACTION_SetSize</a> from appwizard_action.o(.text._ACTION_SetSize) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[29e]">_ACTION_SetValue</a> from appwizard_action.o(.text._ACTION_SetValue) referenced from appwizard_action.o(.rodata._aJobsVar)
 <LI><a href="#[28b]">_ACTION_SetVis</a> from appwizard_action.o(.text._ACTION_SetVis) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[294]">_ACTION_SetX0</a> from appwizard_action.o(.text._ACTION_SetX0) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[296]">_ACTION_SetX1</a> from appwizard_action.o(.text._ACTION_SetX1) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[295]">_ACTION_SetY0</a> from appwizard_action.o(.text._ACTION_SetY0) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[297]">_ACTION_SetY1</a> from appwizard_action.o(.text._ACTION_SetY1) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[28e]">_ACTION_ShiftScreen</a> from appwizard_action.o(.text._ACTION_ShiftScreen) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[28f]">_ACTION_ShiftWindow</a> from appwizard_action.o(.text._ACTION_ShiftWindow) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[290]">_ACTION_ShowScreen</a> from appwizard_action.o(.text._ACTION_ShowScreen) referenced from appwizard_action.o(.rodata._aJobs)
 <LI><a href="#[c3]">_AddKeyDec</a> from editdec.o(.text._AddKeyDec) referenced from editdec.o(.text.EDIT_SetDecMode)
 <LI><a href="#[276]">_AddValue</a> from ogauge.o(.text._AddValue) referenced 3 times from ogauge.o(.rodata._aJobs)
 <LI><a href="#[13d]">_AnimFunc</a> from appwizard_action.o(.text._AnimFunc) referenced from appwizard_action.o(.text._ACTION_AnimCreate)
 <LI><a href="#[13f]">_AnimFuncShift</a> from appwizard_action.o(.text._AnimFuncShift) referenced from appwizard_action.o(.text._ACTION_ShiftWindow)
 <LI><a href="#[13e]">_AnimFuncShiftScreenEnd</a> from appwizard_action.o(.text._AnimFuncShiftScreenEnd) referenced from appwizard_action.o(.text._ACTION_ShiftScreen)
 <LI><a href="#[140]">_AnimFuncShiftWindowEnd</a> from appwizard_action.o(.text._AnimFuncShiftWindowEnd) referenced from appwizard_action.o(.text._ACTION_ShiftWindow)
 <LI><a href="#[20e]">_CalcSizeOfChar</a> from gui_uc_encodenone.o(.text._CalcSizeOfChar) referenced from gui_uc_encodenone.o(.rodata.GUI_UC_None)
 <LI><a href="#[23e]">_CalcSizeOfChar</a> from gui_uc.o(.text._CalcSizeOfChar) referenced 2 times from gui_uc.o(.rodata._API_Table)
 <LI><a href="#[1df]">_CallDrawBitmapHW</a> from gui_drawbitmap_8888.o(.text._CallDrawBitmapHW) referenced from gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethods8888)
 <LI><a href="#[1df]">_CallDrawBitmapHW</a> from gui_drawbitmap_8888.o(.text._CallDrawBitmapHW) referenced from gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethodsM8888I)
 <LI><a href="#[271]">_Clear</a> from obutton.o(.text._Clear) referenced from obutton.o(.rodata._aJobs)
 <LI><a href="#[142]">_ClearLine</a> from gui_xbf_propext.o(.text._ClearLine) referenced from gui_xbf_propext.o(.text._DispLine)
 <LI><a href="#[da]">_ClearUnusedPixels</a> from gui_gif.o(.text._ClearUnusedPixels) referenced from gui_gif.o(.text.GUI_GIF_DrawSubEx)
 <LI><a href="#[b]">_CloseFile</a> from appwizard_fileaccess.o(.text._CloseFile) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[232]">_Color2Index</a> from gui_enablealpha.o(.text._Color2Index) referenced from gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
 <LI><a href="#[237]">_Color2Index</a> from gui_setalpha.o(.text._Color2Index) referenced from gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
 <LI><a href="#[21d]">_Color2IndexBulk</a> from guicc_565.o(.text._Color2IndexBulk) referenced from guicc_565.o(.rodata.LCD_API_ColorConv_565)
 <LI><a href="#[221]">_Color2IndexBulk</a> from guicc_8888.o(.text._Color2IndexBulk) referenced from guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
 <LI><a href="#[225]">_Color2IndexBulk</a> from guicc_m565.o(.text._Color2IndexBulk) referenced from guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
 <LI><a href="#[235]">_Color2IndexBulk</a> from gui_enablealpha.o(.text._Color2IndexBulk) referenced from gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
 <LI><a href="#[23a]">_Color2IndexBulk</a> from gui_setalpha.o(.text._Color2IndexBulk) referenced from gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
 <LI><a href="#[107]">_Color2IndexBulk_M1555I_DMA2D</a> from lcdconf.o(.text._Color2IndexBulk_M1555I_DMA2D) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[109]">_Color2IndexBulk_M4444I_DMA2D</a> from lcdconf.o(.text._Color2IndexBulk_M4444I_DMA2D) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[229]">_Color2IndexBulk_M8888I</a> from guicc_m8888i.o(.text._Color2IndexBulk_M8888I) referenced from guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
 <LI><a href="#[10d]">_Color2IndexBulk_M8888I_DMA2D</a> from lcdconf.o(.text._Color2IndexBulk_M8888I_DMA2D) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[10b]">_Color2IndexBulk_M888_DMA2D</a> from lcdconf.o(.text._Color2IndexBulk_M888_DMA2D) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[218]">_Color2Index_0</a> from guicc_0.o(.text._Color2Index_0) referenced from guicc_0.o(.rodata.LCD_API_ColorConv_0)
 <LI><a href="#[21b]">_Color2Index_565</a> from guicc_565.o(.text._Color2Index_565) referenced from guicc_565.o(.rodata.LCD_API_ColorConv_565)
 <LI><a href="#[21f]">_Color2Index_8888</a> from guicc_8888.o(.text._Color2Index_8888) referenced from guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
 <LI><a href="#[223]">_Color2Index_M565</a> from guicc_m565.o(.text._Color2Index_M565) referenced from guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
 <LI><a href="#[227]">_Color2Index_M8888I</a> from guicc_m8888i.o(.text._Color2Index_M8888I) referenced from guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
 <LI><a href="#[160]">_CopyBuffer</a> from guidrv_lin_oxy_32.o(.text._CopyBuffer) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[1a]">_Create</a> from button_skin.o(.text._Create) referenced 2 times from button_skin.o(.data.BUTTON__Skin)
 <LI><a href="#[10f]">_DMA_AlphaBlending</a> from lcdconf.o(.text._DMA_AlphaBlending) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[111]">_DMA_MixColors</a> from lcdconf.o(.text._DMA_MixColors) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[e1]">_DecodeBlockAC_First</a> from gui_jpeg.o(.text._DecodeBlockAC_First) referenced from gui_jpeg.o(.text.GUI_JPEG__InitDraw)
 <LI><a href="#[e3]">_DecodeBlockAC_Refine</a> from gui_jpeg.o(.text._DecodeBlockAC_Refine) referenced from gui_jpeg.o(.text.GUI_JPEG__InitDraw)
 <LI><a href="#[e0]">_DecodeBlockDC_First</a> from gui_jpeg.o(.text._DecodeBlockDC_First) referenced from gui_jpeg.o(.text.GUI_JPEG__InitDraw)
 <LI><a href="#[e2]">_DecodeBlockDC_Refine</a> from gui_jpeg.o(.text._DecodeBlockDC_Refine) referenced from gui_jpeg.o(.text.GUI_JPEG__InitDraw)
 <LI><a href="#[210]">_DispChar</a> from guiaa_char2ext_xbf.o(.text._DispChar) referenced from guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
 <LI><a href="#[215]">_DispChar</a> from guiaa_char4ext_xbf.o(.text._DispChar) referenced from guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
 <LI><a href="#[216]">_DispChar</a> from gui_xbf_propext.o(.text._DispChar) referenced from gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
 <LI><a href="#[217]">_DispChar</a> from gui_xbf_propfrm.o(.text._DispChar) referenced from gui_xbf_propfrm.o(.rodata.GUI_XBF_APIList_Prop_Frm)
 <LI><a href="#[22f]">_DispLine</a> from guiaa_char2ext_xbf.o(.text._DispLine) referenced 3 times from guiaa_char2ext_xbf.o(.rodata._APIList)
 <LI><a href="#[147]">_Draw</a> from lcd_rle32.o(.text._Draw) referenced from lcd_rle32.o(.text._DrawBitmap)
 <LI><a href="#[156]">_Draw</a> from lcd_rlealpha.o(.text._Draw) referenced from lcd_rlealpha.o(.text._DrawBitmap_RLEAlpha)
 <LI><a href="#[1cb]">_DrawBitmap</a> from guidrv_lin_oxy_32.o(.text._DrawBitmap) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[1d7]">_DrawBitmap</a> from gui_drawbitmap_24.o(.text._DrawBitmap) referenced from gui_drawbitmap_24.o(.rodata.GUI_BitmapMethods24)
 <LI><a href="#[1dc]">_DrawBitmap</a> from gui_drawbitmap_555.o(.text._DrawBitmap) referenced from gui_drawbitmap_555.o(.rodata.GUI_BitmapMethods555)
 <LI><a href="#[1dd]">_DrawBitmap</a> from gui_drawbitmap_565.o(.text._DrawBitmap) referenced from gui_drawbitmap_565.o(.rodata.GUI_BitmapMethods565)
 <LI><a href="#[200]">_DrawBitmap</a> from guidev_32.o(.text._DrawBitmap) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[244]">_DrawBitmap</a> from gui_enablealpha.o(.text._DrawBitmap) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[250]">_DrawBitmap</a> from gui_setalpha.o(.text._DrawBitmap) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[28]">_DrawBitmap180</a> from lcd_rotate180.o(.text._DrawBitmap180) referenced 2 times from lcd_rotate180.o(.data.LCD_APIList180)
 <LI><a href="#[1d9]">_DrawBitmap444_12</a> from gui_drawbitmap_444.o(.text._DrawBitmap444_12) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_12)
 <LI><a href="#[1da]">_DrawBitmap444_12_1</a> from gui_drawbitmap_444.o(.text._DrawBitmap444_12_1) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_12_1)
 <LI><a href="#[1db]">_DrawBitmap444_16</a> from gui_drawbitmap_444.o(.text._DrawBitmap444_16) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_16)
 <LI><a href="#[1e0]">_DrawBitmapA555</a> from gui_drawbitmap_a16.o(.text._DrawBitmapA555) referenced from gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsA555)
 <LI><a href="#[1e1]">_DrawBitmapA565</a> from gui_drawbitmap_a16.o(.text._DrawBitmapA565) referenced from gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsA565)
 <LI><a href="#[1e2]">_DrawBitmapAM555</a> from gui_drawbitmap_a16.o(.text._DrawBitmapAM555) referenced from gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsAM555)
 <LI><a href="#[1e3]">_DrawBitmapAM565</a> from gui_drawbitmap_a16.o(.text._DrawBitmapAM565) referenced from gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsAM565)
 <LI><a href="#[2a]">_DrawBitmapCCW</a> from lcd_rotateccw.o(.text._DrawBitmapCCW) referenced 2 times from lcd_rotateccw.o(.data.LCD_APIListCCW)
 <LI><a href="#[2d]">_DrawBitmapCW</a> from lcd_rotatecw.o(.text._DrawBitmapCW) referenced 2 times from lcd_rotatecw.o(.data.LCD_APIListCW)
 <LI><a href="#[1e4]">_DrawBitmapM444_12</a> from gui_drawbitmap_444.o(.text._DrawBitmapM444_12) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_12)
 <LI><a href="#[1e5]">_DrawBitmapM444_12_1</a> from gui_drawbitmap_444.o(.text._DrawBitmapM444_12_1) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_12_1)
 <LI><a href="#[1e6]">_DrawBitmapM444_16</a> from gui_drawbitmap_444.o(.text._DrawBitmapM444_16) referenced from gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_16)
 <LI><a href="#[1e7]">_DrawBitmapSwapRB</a> from gui_drawbitmap_555.o(.text._DrawBitmapSwapRB) referenced from gui_drawbitmap_555.o(.rodata.GUI_BitmapMethodsM555)
 <LI><a href="#[1e8]">_DrawBitmapSwapRB</a> from gui_drawbitmap_565.o(.text._DrawBitmapSwapRB) referenced from gui_drawbitmap_565.o(.rodata.GUI_BitmapMethodsM565)
 <LI><a href="#[1de]">_DrawBitmap_8888</a> from gui_drawbitmap_8888.o(.text._DrawBitmap_8888) referenced from gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethods8888)
 <LI><a href="#[1f2]">_DrawBitmap_Ex</a> from lcd_rle8.o(.text._DrawBitmap_Ex) referenced from lcd_rle8.o(.rodata.GUI_BitmapMethodsRLE8Ex)
 <LI><a href="#[1e9]">_DrawBitmap_M8888I</a> from gui_drawbitmap_8888.o(.text._DrawBitmap_M8888I) referenced from gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethodsM8888I)
 <LI><a href="#[1ea]">_DrawBitmap_RLE1</a> from lcd_rle1.o(.text._DrawBitmap_RLE1) referenced from lcd_rle1.o(.rodata.GUI_BitmapMethodsRLE1)
 <LI><a href="#[1eb]">_DrawBitmap_RLE16Ex</a> from lcd_rle16.o(.text._DrawBitmap_RLE16Ex) referenced from lcd_rle16.o(.rodata.GUI_BitmapMethodsRLE16Ex)
 <LI><a href="#[1ec]">_DrawBitmap_RLE16_Stream</a> from lcd_rle16.o(.text._DrawBitmap_RLE16_Stream) referenced from lcd_rle16.o(.rodata.GUI_BitmapMethodsRLE16_Stream)
 <LI><a href="#[1ed]">_DrawBitmap_RLE1Ex</a> from lcd_rle1.o(.text._DrawBitmap_RLE1Ex) referenced from lcd_rle1.o(.rodata.GUI_BitmapMethodsRLE1Ex)
 <LI><a href="#[1ee]">_DrawBitmap_RLE32</a> from lcd_rle32.o(.text._DrawBitmap_RLE32) referenced from lcd_rle32.o(.rodata.GUI_BitmapMethodsRLE32)
 <LI><a href="#[1ef]">_DrawBitmap_RLE32Ex</a> from lcd_rle32.o(.text._DrawBitmap_RLE32Ex) referenced from lcd_rle32.o(.rodata.GUI_BitmapMethodsRLE32Ex)
 <LI><a href="#[1f0]">_DrawBitmap_RLE4</a> from lcd_rle4.o(.text._DrawBitmap_RLE4) referenced from lcd_rle4.o(.rodata.GUI_BitmapMethodsRLE4)
 <LI><a href="#[1f1]">_DrawBitmap_RLE4Ex</a> from lcd_rle4.o(.text._DrawBitmap_RLE4Ex) referenced from lcd_rle4.o(.rodata.GUI_BitmapMethodsRLE4Ex)
 <LI><a href="#[1f4]">_DrawBitmap_RLEAlpha</a> from lcd_rlealpha.o(.text._DrawBitmap_RLEAlpha) referenced from lcd_rlealpha.o(.rodata.GUI_BitmapMethodsRLEAlpha)
 <LI><a href="#[1f5]">_DrawBitmap_RLEM16Ex</a> from lcd_rle16.o(.text._DrawBitmap_RLEM16Ex) referenced from lcd_rle16.o(.rodata.GUI_BitmapMethodsRLEM16Ex)
 <LI><a href="#[1f6]">_DrawBitmap_RLEM16_Stream</a> from lcd_rle16.o(.text._DrawBitmap_RLEM16_Stream) referenced from lcd_rle16.o(.rodata.GUI_BitmapMethodsRLEM16_Stream)
 <LI><a href="#[1f3]">_DrawBitmap_Stream</a> from lcd_rle8.o(.text._DrawBitmap_Stream) referenced from lcd_rle8.o(.rodata.GUI_BitmapMethodsRLE8_Stream)
 <LI><a href="#[18]">_DrawCharAA4_Trans</a> from guiaa_char4.o(.text._DrawCharAA4_Trans) referenced 2 times from guiaa_char4.o(.data..L_MergedGlobals)
 <LI><a href="#[146]">_DrawClip</a> from lcd_rle32.o(.text._DrawClip) referenced from lcd_rle32.o(.text._DrawBitmap)
 <LI><a href="#[155]">_DrawClip</a> from lcd_rlealpha.o(.text._DrawClip) referenced from lcd_rlealpha.o(.text._DrawBitmap_RLEAlpha)
 <LI><a href="#[22d]">_DrawDown</a> from widget_effect_simple.o(.text._DrawDown) referenced from widget_effect_simple.o(.rodata.WIDGET_Effect_Simple)
 <LI><a href="#[22e]">_DrawDownRect</a> from widget_effect_simple.o(.text._DrawDownRect) referenced from widget_effect_simple.o(.rodata.WIDGET_Effect_Simple)
 <LI><a href="#[db]">_DrawFromDataBlock</a> from gui_gif.o(.text._DrawFromDataBlock) referenced from gui_gif.o(.text.GUI_GIF_DrawSubEx)
 <LI><a href="#[1cc]">_DrawHLine</a> from guidrv_lin_oxy_32.o(.text._DrawHLine) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[201]">_DrawHLine</a> from guidev_32.o(.text._DrawHLine) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[245]">_DrawHLine</a> from gui_enablealpha.o(.text._DrawHLine) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[251]">_DrawHLine</a> from gui_setalpha.o(.text._DrawHLine) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[c9]">_DrawHLine</a> from guiaa_lib.o(.text._DrawHLine) referenced from guiaa_lib.o(.text.GUI_AA_Init)
 <LI><a href="#[f5]">_DrawImageAt</a> from image_bmp.o(.text._DrawImageAt) referenced from image_bmp.o(.text.IMAGE_SetBMP)
 <LI><a href="#[f9]">_DrawImageAt</a> from image_dta.o(.text._DrawImageAt) referenced from image_dta.o(.text.IMAGE_SetDTA)
 <LI><a href="#[fd]">_DrawImageAt</a> from image_gif.o(.text._DrawImageAt) referenced from image_gif.o(.text.IMAGE_SetGIF)
 <LI><a href="#[101]">_DrawImageAt</a> from image_jpeg.o(.text._DrawImageAt) referenced from image_jpeg.o(.text.IMAGE_SetJPEG)
 <LI><a href="#[f7]">_DrawImageAtEx</a> from image_bmp.o(.text._DrawImageAtEx) referenced from image_bmp.o(.text.IMAGE_SetBMPEx)
 <LI><a href="#[fb]">_DrawImageAtEx</a> from image_dta.o(.text._DrawImageAtEx) referenced from image_dta.o(.text.IMAGE_SetDTAEx)
 <LI><a href="#[ff]">_DrawImageAtEx</a> from image_gif.o(.text._DrawImageAtEx) referenced from image_gif.o(.text.IMAGE_SetGIFEx)
 <LI><a href="#[103]">_DrawImageAtEx</a> from image_jpeg.o(.text._DrawImageAtEx) referenced from image_jpeg.o(.text.IMAGE_SetJPEGEx)
 <LI><a href="#[20]">_DrawLine_RGB</a> from gui_bmp.o(.text._DrawLine_RGB) referenced 2 times from gui_bmp.o(.data.GUI__pfDrawLine_RGB)
 <LI><a href="#[20]">_DrawLine_RGB</a> from gui_bmp.o(.text._DrawLine_RGB) referenced from gui_bmp.o(.text.GUI_BMP_DrawEx)
 <LI><a href="#[20]">_DrawLine_RGB</a> from gui_bmp.o(.text._DrawLine_RGB) referenced from gui_bmp.o(.text._DrawBitmap_RGB)
 <LI><a href="#[25f]">_DrawNonExistingCharacter</a> from gui_char.o(.text._DrawNonExistingCharacter) referenced from gui_char.o(.rodata._NonExistingCharacter)
 <LI><a href="#[261]">_DrawNonExistingCharacter_Dummy</a> from gui_char.o(.text._DrawNonExistingCharacter_Dummy) referenced from gui_char.o(.rodata._NonExistingCharacter_Dummy)
 <LI><a href="#[d7]">_DrawStreamedBitmapExNoPalette</a> from gui_stream.o(.text._DrawStreamedBitmapExNoPalette) referenced from gui_stream.o(.text.GUI_DrawStreamedBitmapExAuto)
 <LI><a href="#[d6]">_DrawStreamedBitmapExPalette</a> from gui_stream.o(.text._DrawStreamedBitmapExPalette) referenced from gui_stream.o(.text.GUI_DrawStreamedBitmapExAuto)
 <LI><a href="#[22b]">_DrawUp</a> from widget_effect_simple.o(.text._DrawUp) referenced from widget_effect_simple.o(.rodata.WIDGET_Effect_Simple)
 <LI><a href="#[22c]">_DrawUpRect</a> from widget_effect_simple.o(.text._DrawUpRect) referenced from widget_effect_simple.o(.rodata.WIDGET_Effect_Simple)
 <LI><a href="#[1cd]">_DrawVLine</a> from guidrv_lin_oxy_32.o(.text._DrawVLine) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[202]">_DrawVLine</a> from guidev_32.o(.text._DrawVLine) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[246]">_DrawVLine</a> from gui_enablealpha.o(.text._DrawVLine) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[252]">_DrawVLine</a> from gui_setalpha.o(.text._DrawVLine) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[20f]">_Encode</a> from gui_uc_encodenone.o(.text._Encode) referenced from gui_uc_encodenone.o(.rodata.GUI_UC_None)
 <LI><a href="#[23f]">_Encode</a> from gui_uc.o(.text._Encode) referenced 2 times from gui_uc.o(.rodata._API_Table)
 <LI><a href="#[cd]">_ExecAnimations</a> from gui_anim.o(.text._ExecAnimations) referenced from gui_anim.o(.text.GUI_ANIM_StartEx)
 <LI><a href="#[1ce]">_FillRect</a> from guidrv_lin_oxy_32.o(.text._FillRect) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[203]">_FillRect</a> from guidev_32.o(.text._FillRect) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[247]">_FillRect</a> from gui_enablealpha.o(.text._FillRect) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[253]">_FillRect</a> from gui_setalpha.o(.text._FillRect) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[1c0]">_Func_AA_DISABLE_HIRES</a> from appwizard_drawing.o(.text._Func_AA_DISABLE_HIRES) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1c1]">_Func_AA_DRAW_ARC</a> from appwizard_drawing.o(.text._Func_AA_DRAW_ARC) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1c2]">_Func_AA_DRAW_CIRCLE</a> from appwizard_drawing.o(.text._Func_AA_DRAW_CIRCLE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1c3]">_Func_AA_DRAW_LINE</a> from appwizard_drawing.o(.text._Func_AA_DRAW_LINE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1c4]">_Func_AA_DRAW_PIE</a> from appwizard_drawing.o(.text._Func_AA_DRAW_PIE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1c5]">_Func_AA_DRAW_ROUNDED_FRAME</a> from appwizard_drawing.o(.text._Func_AA_DRAW_ROUNDED_FRAME) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1c6]">_Func_AA_ENABLE_HIRES</a> from appwizard_drawing.o(.text._Func_AA_ENABLE_HIRES) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1c7]">_Func_AA_FILL_CIRCLE</a> from appwizard_drawing.o(.text._Func_AA_FILL_CIRCLE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1c8]">_Func_AA_FILL_ELLIPSE</a> from appwizard_drawing.o(.text._Func_AA_FILL_ELLIPSE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1c9]">_Func_AA_FILL_ROUNDED_RECT</a> from appwizard_drawing.o(.text._Func_AA_FILL_ROUNDED_RECT) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1ca]">_Func_AA_SET_FACTOR</a> from appwizard_drawing.o(.text._Func_AA_SET_FACTOR) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[19c]">_Func_CLEAR</a> from appwizard_drawing.o(.text._Func_CLEAR) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[19d]">_Func_COPY_RECT</a> from appwizard_drawing.o(.text._Func_COPY_RECT) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[19e]">_Func_DRAW_ARC</a> from appwizard_drawing.o(.text._Func_DRAW_ARC) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[19f]">_Func_DRAW_CIRCLE</a> from appwizard_drawing.o(.text._Func_DRAW_CIRCLE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a0]">_Func_DRAW_ELLIPSE</a> from appwizard_drawing.o(.text._Func_DRAW_ELLIPSE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a1]">_Func_DRAW_GRADIENT_H</a> from appwizard_drawing.o(.text._Func_DRAW_GRADIENT_H) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a3]">_Func_DRAW_GRADIENT_ROUNDED_H</a> from appwizard_drawing.o(.text._Func_DRAW_GRADIENT_ROUNDED_H) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a4]">_Func_DRAW_GRADIENT_ROUNDED_V</a> from appwizard_drawing.o(.text._Func_DRAW_GRADIENT_ROUNDED_V) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a2]">_Func_DRAW_GRADIENT_V</a> from appwizard_drawing.o(.text._Func_DRAW_GRADIENT_V) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a5]">_Func_DRAW_HLINE</a> from appwizard_drawing.o(.text._Func_DRAW_HLINE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a6]">_Func_DRAW_LINE</a> from appwizard_drawing.o(.text._Func_DRAW_LINE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a7]">_Func_DRAW_LINE_REL</a> from appwizard_drawing.o(.text._Func_DRAW_LINE_REL) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a8]">_Func_DRAW_LINE_TO</a> from appwizard_drawing.o(.text._Func_DRAW_LINE_TO) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1a9]">_Func_DRAW_PIE</a> from appwizard_drawing.o(.text._Func_DRAW_PIE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1aa]">_Func_DRAW_PIXEL</a> from appwizard_drawing.o(.text._Func_DRAW_PIXEL) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1ab]">_Func_DRAW_POINT</a> from appwizard_drawing.o(.text._Func_DRAW_POINT) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1ac]">_Func_DRAW_RECT</a> from appwizard_drawing.o(.text._Func_DRAW_RECT) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1ad]">_Func_DRAW_ROUNDED_FRAME</a> from appwizard_drawing.o(.text._Func_DRAW_ROUNDED_FRAME) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1ae]">_Func_DRAW_ROUNDED_RECT</a> from appwizard_drawing.o(.text._Func_DRAW_ROUNDED_RECT) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1af]">_Func_DRAW_VLINE</a> from appwizard_drawing.o(.text._Func_DRAW_VLINE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b0]">_Func_ENABLE_ALPHA</a> from appwizard_drawing.o(.text._Func_ENABLE_ALPHA) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b1]">_Func_FILL_CIRCLE</a> from appwizard_drawing.o(.text._Func_FILL_CIRCLE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b2]">_Func_FILL_ELLIPSE</a> from appwizard_drawing.o(.text._Func_FILL_ELLIPSE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b3]">_Func_FILL_RECT</a> from appwizard_drawing.o(.text._Func_FILL_RECT) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b4]">_Func_FILL_ROUNDED_RECT</a> from appwizard_drawing.o(.text._Func_FILL_ROUNDED_RECT) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b5]">_Func_INVERT_RECT</a> from appwizard_drawing.o(.text._Func_INVERT_RECT) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b6]">_Func_MOVE_REL</a> from appwizard_drawing.o(.text._Func_MOVE_REL) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b7]">_Func_MOVE_TO</a> from appwizard_drawing.o(.text._Func_MOVE_TO) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1bc]">_Func_SET_BKCOLOR</a> from appwizard_drawing.o(.text._Func_SET_BKCOLOR) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b8]">_Func_SET_BLENDBKCOLOR</a> from appwizard_drawing.o(.text._Func_SET_BLENDBKCOLOR) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1b9]">_Func_SET_BLENDBKCOLOREX</a> from appwizard_drawing.o(.text._Func_SET_BLENDBKCOLOREX) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1ba]">_Func_SET_BLENDCOLOR</a> from appwizard_drawing.o(.text._Func_SET_BLENDCOLOR) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1bb]">_Func_SET_BLENDCOLOREX</a> from appwizard_drawing.o(.text._Func_SET_BLENDCOLOREX) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1bd]">_Func_SET_COLOR</a> from appwizard_drawing.o(.text._Func_SET_COLOR) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1bf]">_Func_SET_LINESTYLE</a> from appwizard_drawing.o(.text._Func_SET_LINESTYLE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[1be]">_Func_SET_PENSIZE</a> from appwizard_drawing.o(.text._Func_SET_PENSIZE) referenced from appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
 <LI><a href="#[19a]">_GUI_USAGE_BM_Delete</a> from guidev_usagebm.o(.text._GUI_USAGE_BM_Delete) referenced from guidev_usagebm.o(.rodata.API)
 <LI><a href="#[173]">_GetBitfieldsPara</a> from gui_bmp.o(.text._GetBitfieldsPara) referenced from gui_bmp.o(.text._ManageBitfields)
 <LI><a href="#[117]">_GetByte_GetData</a> from lcd_rle16.o(.text._GetByte_GetData) referenced from lcd_rle16.o(.text.LCD__RLE16_SetFunc)
 <LI><a href="#[119]">_GetByte_GetData</a> from lcd_rle1.o(.text._GetByte_GetData) referenced from lcd_rle1.o(.text.LCD__RLE1_SetFunc)
 <LI><a href="#[11c]">_GetByte_GetData</a> from lcd_rle32.o(.text._GetByte_GetData) referenced from lcd_rle32.o(.text.LCD__RLE32_SetFunc)
 <LI><a href="#[11e]">_GetByte_GetData</a> from lcd_rle4.o(.text._GetByte_GetData) referenced from lcd_rle4.o(.text.LCD__RLE4_SetFunc)
 <LI><a href="#[120]">_GetByte_GetData</a> from lcd_rle8.o(.text._GetByte_GetData) referenced from lcd_rle8.o(.text.LCD__RLE8_SetFunc)
 <LI><a href="#[14f]">_GetByte_pPixel</a> from lcd_rle8.o(.text._GetByte_pPixel) referenced from lcd_rle8.o(.text._DrawBitmap_Cached)
 <LI><a href="#[150]">_GetByte_pPixel</a> from lcd_rle1.o(.text._GetByte_pPixel) referenced from lcd_rle1.o(.text._DrawBitmap_RLE1)
 <LI><a href="#[151]">_GetByte_pPixel</a> from lcd_rle16.o(.text._GetByte_pPixel) referenced from lcd_rle16.o(.text._DrawBitmap_RLE16_Cached)
 <LI><a href="#[153]">_GetByte_pPixel</a> from lcd_rle32.o(.text._GetByte_pPixel) referenced from lcd_rle32.o(.text._DrawBitmap_RLE32)
 <LI><a href="#[154]">_GetByte_pPixel</a> from lcd_rle4.o(.text._GetByte_pPixel) referenced from lcd_rle4.o(.text._DrawBitmap_RLE4)
 <LI><a href="#[151]">_GetByte_pPixel</a> from lcd_rle16.o(.text._GetByte_pPixel) referenced from lcd_rle16.o(.text._DrawBitmap_RLEM16_Cached)
 <LI><a href="#[20c]">_GetCharCode</a> from gui_uc_encodenone.o(.text._GetCharCode) referenced from gui_uc_encodenone.o(.rodata.GUI_UC_None)
 <LI><a href="#[23c]">_GetCharCode</a> from gui_uc.o(.text._GetCharCode) referenced 2 times from gui_uc.o(.rodata._API_Table)
 <LI><a href="#[20d]">_GetCharSize</a> from gui_uc_encodenone.o(.text._GetCharSize) referenced from gui_uc_encodenone.o(.rodata.GUI_UC_None)
 <LI><a href="#[23d]">_GetCharSize</a> from gui_uc.o(.text._GetCharSize) referenced 2 times from gui_uc.o(.rodata._API_Table)
 <LI><a href="#[3]">_GetDataBGJ</a> from appwizard_fileaccess.o(.text._GetDataBGJ) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[6]">_GetDataFile</a> from appwizard_fileaccess.o(.text._GetDataFile) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[2]">_GetDataFileMem</a> from appwizard_fileaccess.o(.text._GetDataFileMem) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[5]">_GetDataFont</a> from appwizard_fileaccess.o(.text._GetDataFont) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[1]">_GetDataFontMem</a> from appwizard_fileaccess.o(.text._GetDataFontMem) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[4]">_GetDataImage</a> from appwizard_fileaccess.o(.text._GetDataImage) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[0]">_GetDataImageMem</a> from appwizard_fileaccess.o(.text._GetDataImageMem) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[1d5]">_GetDevData</a> from guidrv_lin_oxy_32.o(.text._GetDevData) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[20a]">_GetDevData</a> from guidev_32.o(.text._GetDevData) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[24e]">_GetDevData</a> from gui_enablealpha.o(.text._GetDevData) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[25a]">_GetDevData</a> from gui_setalpha.o(.text._GetDevData) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[1d3]">_GetDevFunc</a> from guidrv_lin_oxy_32.o(.text._GetDevFunc) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[208]">_GetDevFunc</a> from guidev_32.o(.text._GetDevFunc) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[24c]">_GetDevFunc</a> from gui_enablealpha.o(.text._GetDevFunc) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[258]">_GetDevFunc</a> from gui_setalpha.o(.text._GetDevFunc) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[1d4]">_GetDevProp</a> from guidrv_lin_oxy_32.o(.text._GetDevProp) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[209]">_GetDevProp</a> from guidev_32.o(.text._GetDevProp) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[24d]">_GetDevProp</a> from gui_enablealpha.o(.text._GetDevProp) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[259]">_GetDevProp</a> from gui_setalpha.o(.text._GetDevProp) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[c]">_GetFileSize</a> from appwizard_fileaccess.o(.text._GetFileSize) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[f4]">_GetImageSize</a> from image_bmp.o(.text._GetImageSize) referenced from image_bmp.o(.text.IMAGE_SetBMP)
 <LI><a href="#[f8]">_GetImageSize</a> from image_dta.o(.text._GetImageSize) referenced from image_dta.o(.text.IMAGE_SetDTA)
 <LI><a href="#[fc]">_GetImageSize</a> from image_gif.o(.text._GetImageSize) referenced from image_gif.o(.text.IMAGE_SetGIF)
 <LI><a href="#[100]">_GetImageSize</a> from image_jpeg.o(.text._GetImageSize) referenced from image_jpeg.o(.text.IMAGE_SetJPEG)
 <LI><a href="#[f6]">_GetImageSizeEx</a> from image_bmp.o(.text._GetImageSizeEx) referenced from image_bmp.o(.text.IMAGE_SetBMPEx)
 <LI><a href="#[fa]">_GetImageSizeEx</a> from image_dta.o(.text._GetImageSizeEx) referenced from image_dta.o(.text.IMAGE_SetDTAEx)
 <LI><a href="#[fe]">_GetImageSizeEx</a> from image_gif.o(.text._GetImageSizeEx) referenced from image_gif.o(.text.IMAGE_SetGIFEx)
 <LI><a href="#[102]">_GetImageSizeEx</a> from image_jpeg.o(.text._GetImageSizeEx) referenced from image_jpeg.o(.text.IMAGE_SetJPEGEx)
 <LI><a href="#[234]">_GetIndexMask</a> from gui_enablealpha.o(.text._GetIndexMask) referenced from gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
 <LI><a href="#[239]">_GetIndexMask</a> from gui_setalpha.o(.text._GetIndexMask) referenced from gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
 <LI><a href="#[21a]">_GetIndexMask_0</a> from guicc_0.o(.text._GetIndexMask_0) referenced from guicc_0.o(.rodata.LCD_API_ColorConv_0)
 <LI><a href="#[21c]">_GetIndexMask_565</a> from guicc_565.o(.text._GetIndexMask_565) referenced from guicc_565.o(.rodata.LCD_API_ColorConv_565)
 <LI><a href="#[220]">_GetIndexMask_8888</a> from guicc_8888.o(.text._GetIndexMask_8888) referenced from guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
 <LI><a href="#[224]">_GetIndexMask_M565</a> from guicc_m565.o(.text._GetIndexMask_M565) referenced from guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
 <LI><a href="#[228]">_GetIndexMask_M8888I</a> from guicc_m8888i.o(.text._GetIndexMask_M8888I) referenced from guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
 <LI><a href="#[15b]">_GetMotionTagR</a> from wm_motion.o(.text._GetMotionTagR) referenced from wm_motion.o(.text._GetConfirmation)
 <LI><a href="#[157]">_GetMotionTagXY</a> from wm_motion.o(.text._GetMotionTagXY) referenced from wm_motion.o(.text._ExecMotion)
 <LI><a href="#[157]">_GetMotionTagXY</a> from wm_motion.o(.text._GetMotionTagXY) referenced from wm_motion.o(.text._GetConfirmation)
 <LI><a href="#[25e]">_GetNonExistingCharWidth</a> from gui_char.o(.text._GetNonExistingCharWidth) referenced from gui_char.o(.rodata._NonExistingCharacter)
 <LI><a href="#[260]">_GetNonExistingCharWidth_Dummy</a> from gui_char.o(.text._GetNonExistingCharWidth_Dummy) referenced from gui_char.o(.rodata._NonExistingCharacter_Dummy)
 <LI><a href="#[1cf]">_GetPixelIndex</a> from guidrv_lin_oxy_32.o(.text._GetPixelIndex) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[204]">_GetPixelIndex</a> from guidev_32.o(.text._GetPixelIndex) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[248]">_GetPixelIndex</a> from gui_enablealpha.o(.text._GetPixelIndex) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[254]">_GetPixelIndex</a> from gui_setalpha.o(.text._GetPixelIndex) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[11b]">_GetPixel_GetData</a> from lcd_rle32.o(.text._GetPixel_GetData) referenced from lcd_rle32.o(.text.LCD__RLE32_SetFunc)
 <LI><a href="#[152]">_GetPixel_pPixel</a> from lcd_rle32.o(.text._GetPixel_pPixel) referenced from lcd_rle32.o(.text._DrawBitmap_RLE32)
 <LI><a href="#[16a]">_GetPos</a> from guidrv_lin_oxy_32.o(.text._GetPos) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[1d6]">_GetRect</a> from guidrv_lin_oxy_32.o(.text._GetRect) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[20b]">_GetRect</a> from guidev_32.o(.text._GetRect) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[24f]">_GetRect</a> from gui_enablealpha.o(.text._GetRect) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[25b]">_GetRect</a> from gui_setalpha.o(.text._GetRect) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[171]">_GetStuff</a> from gui_jpeg.o(.text._GetStuff) referenced from gui_jpeg.o(.text._GetU8_NoMarker)
 <LI><a href="#[e4]">_GetU8</a> from gui_jpeg.o(.text._GetU8) referenced from gui_jpeg.o(.text.GUI_JPEG__ReadUntilSOF)
 <LI><a href="#[e4]">_GetU8</a> from gui_jpeg.o(.text._GetU8) referenced from gui_jpeg.o(.text._GetStuff)
 <LI><a href="#[233]">_Index2Color</a> from gui_enablealpha.o(.text._Index2Color) referenced from gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
 <LI><a href="#[238]">_Index2Color</a> from gui_setalpha.o(.text._Index2Color) referenced from gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
 <LI><a href="#[cf]">_Index2ColorBitfields</a> from gui_bmp.o(.text._Index2ColorBitfields) referenced from gui_bmp.o(.text.GUI_BMP_DrawEx)
 <LI><a href="#[21e]">_Index2ColorBulk</a> from guicc_565.o(.text._Index2ColorBulk) referenced from guicc_565.o(.rodata.LCD_API_ColorConv_565)
 <LI><a href="#[222]">_Index2ColorBulk</a> from guicc_8888.o(.text._Index2ColorBulk) referenced from guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
 <LI><a href="#[226]">_Index2ColorBulk</a> from guicc_m565.o(.text._Index2ColorBulk) referenced from guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
 <LI><a href="#[236]">_Index2ColorBulk</a> from gui_enablealpha.o(.text._Index2ColorBulk) referenced from gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
 <LI><a href="#[23b]">_Index2ColorBulk</a> from gui_setalpha.o(.text._Index2ColorBulk) referenced from gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
 <LI><a href="#[108]">_Index2ColorBulk_M1555I_DMA2D</a> from lcdconf.o(.text._Index2ColorBulk_M1555I_DMA2D) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[10a]">_Index2ColorBulk_M4444I_DMA2D</a> from lcdconf.o(.text._Index2ColorBulk_M4444I_DMA2D) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[22a]">_Index2ColorBulk_M8888I</a> from guicc_m8888i.o(.text._Index2ColorBulk_M8888I) referenced from guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
 <LI><a href="#[10e]">_Index2ColorBulk_M8888I_DMA2D</a> from lcdconf.o(.text._Index2ColorBulk_M8888I_DMA2D) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[10c]">_Index2ColorBulk_M888_DMA2D</a> from lcdconf.o(.text._Index2ColorBulk_M888_DMA2D) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[219]">_Index2Color_0</a> from guicc_0.o(.text._Index2Color_0) referenced from guicc_0.o(.rodata.LCD_API_ColorConv_0)
 <LI><a href="#[167]">_Init</a> from guidrv_lin_oxy_32.o(.text._Init) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[be]">_InitText</a> from appwconf.o(.text._InitText) referenced 2 times from appwconf.o(.text.APPW_X_Setup)
 <LI><a href="#[106]">_LCD_CopyBuffer</a> from lcdconf.o(.text._LCD_CopyBuffer) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[110]">_LCD_GetpPalConvTable</a> from lcdconf.o(.text._LCD_GetpPalConvTable) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[112]">_LCD_MixColorsBulk</a> from lcdconf.o(.text._LCD_MixColorsBulk) referenced 2 times from lcdconf.o(.text.LCD_X_Config)
 <LI><a href="#[25c]">_MULTIBUF_Begin</a> from wm_multibuf.o(.text._MULTIBUF_Begin) referenced from wm_multibuf.o(.rodata._MULTIBUF_APIList)
 <LI><a href="#[25d]">_MULTIBUF_End</a> from wm_multibuf.o(.text._MULTIBUF_End) referenced from wm_multibuf.o(.rodata._MULTIBUF_APIList)
 <LI><a href="#[159]">_Motion_AutoWithinParent</a> from wm_motion.o(.text._Motion_AutoWithinParent) referenced from wm_motion.o(.text._GetConfirmation)
 <LI><a href="#[15a]">_Motion_ByWindow</a> from wm_motion.o(.text._Motion_ByWindow) referenced from wm_motion.o(.text._GetConfirmation)
 <LI><a href="#[33]">_NextPixel_End</a> from gui_bmp.o(.text._NextPixel_End) referenced 4 times from gui_bmp.o(.data._NextPixel_API)
 <LI><a href="#[32]">_NextPixel_NextLine</a> from gui_bmp.o(.text._NextPixel_NextLine) referenced 4 times from gui_bmp.o(.data._NextPixel_API)
 <LI><a href="#[31]">_NextPixel_SetPixel</a> from gui_bmp.o(.text._NextPixel_SetPixel) referenced 4 times from gui_bmp.o(.data._NextPixel_API)
 <LI><a href="#[30]">_NextPixel_Start</a> from gui_bmp.o(.text._NextPixel_Start) referenced 4 times from gui_bmp.o(.data._NextPixel_API)
 <LI><a href="#[164]">_Off</a> from guidrv_lin_oxy_32.o(.text._Off) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[165]">_On</a> from guidrv_lin_oxy_32.o(.text._On) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[ba]">_OnExit</a> from appwizard_var.o(.text._OnExit) referenced from appwizard_var.o(.text.APPW_GetVarWin)
 <LI><a href="#[c5]">_OnExit</a> from gui_task.o(.text._OnExit) referenced from gui_task.o(.text.GUITASK_Init)
 <LI><a href="#[c8]">_OnExit</a> from guiaa_lib.o(.text._OnExit) referenced from guiaa_lib.o(.text.GUI_AA_Init)
 <LI><a href="#[cc]">_OnExit</a> from gui_anim.o(.text._OnExit) referenced from gui_anim.o(.text.GUI_ANIM_CreateWithId)
 <LI><a href="#[d8]">_OnExit</a> from gui_enablealpha.o(.text._OnExit) referenced from gui_enablealpha.o(.text.GUI_EnableAlpha)
 <LI><a href="#[e6]">_OnExit</a> from gui_multibuf.o(.text._OnExit) referenced from gui_multibuf.o(.text.GUI_MULTIBUF_ConfigEx)
 <LI><a href="#[e7]">_OnExit</a> from gui_pid.o(.text._OnExit) referenced from gui_pid.o(.text.GUI_PID_StoreState)
 <LI><a href="#[e9]">_OnExit</a> from gui_setalpha.o(.text._OnExit) referenced from gui_setalpha.o(.text.GUI_SetAlpha)
 <LI><a href="#[ec]">_OnExit</a> from gui_timer.o(.text._OnExit) referenced from gui_timer.o(.text.GUI_TIMER_Create)
 <LI><a href="#[ee]">_OnExit</a> from gui_core.o(.text._OnExit) referenced from gui_core.o(.text.GUI__Config)
 <LI><a href="#[f0]">_OnExit</a> from gui__alpha.o(.text._OnExit) referenced from gui__alpha.o(.text.GUI__GetAlphaBuffer)
 <LI><a href="#[105]">_OnExit</a> from lcd_color.o(.text._OnExit) referenced from lcd_color.o(.text.LCD_InitColors)
 <LI><a href="#[116]">_OnExit</a> from lcd_rle16.o(.text._OnExit) referenced from lcd_rle16.o(.text.LCD__RLE16_SetFunc)
 <LI><a href="#[118]">_OnExit</a> from lcd_rle1.o(.text._OnExit) referenced from lcd_rle1.o(.text.LCD__RLE1_SetFunc)
 <LI><a href="#[11a]">_OnExit</a> from lcd_rle32.o(.text._OnExit) referenced from lcd_rle32.o(.text.LCD__RLE32_SetFunc)
 <LI><a href="#[11d]">_OnExit</a> from lcd_rle4.o(.text._OnExit) referenced from lcd_rle4.o(.text.LCD__RLE4_SetFunc)
 <LI><a href="#[11f]">_OnExit</a> from lcd_rle8.o(.text._OnExit) referenced from lcd_rle8.o(.text.LCD__RLE8_SetFunc)
 <LI><a href="#[128]">_OnExit</a> from wm.o(.text._OnExit) referenced from wm.o(.text.WM_Init)
 <LI><a href="#[129]">_OnExit</a> from wm_motion.o(.text._OnExit) referenced from wm_motion.o(.text.WM_MOTION_Enable)
 <LI><a href="#[166]">_OnExit</a> from guidrv_lin_oxy_32.o(.text._OnExit) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[172]">_OnExit</a> from gui_lang.o(.text._OnExit) referenced from gui_lang.o(.text._InitOnce)
 <LI><a href="#[178]">_OnExit</a> from wm_touch.o(.text._OnExit) referenced from wm_touch.o(.text._RegisterExit)
 <LI><a href="#[11]">_OnPidStateChange</a> from button.o(.text._OnPidStateChange) referenced 2 times from button.o(.data..L_MergedGlobals)
 <LI><a href="#[11]">_OnPidStateChange</a> from button.o(.text._OnPidStateChange) referenced from button.o(.text.BUTTON_SetReactOnLevel)
 <LI><a href="#[10]">_OnTouchReactOnLevel</a> from button.o(.text._OnTouchReactOnLevel) referenced 2 times from button.o(.data..L_MergedGlobals)
 <LI><a href="#[10]">_OnTouchReactOnLevel</a> from button.o(.text._OnTouchReactOnLevel) referenced from button.o(.text.BUTTON_SetReactOnLevel)
 <LI><a href="#[7]">_OpenFontFile</a> from appwizard_fileaccess.o(.text._OpenFontFile) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[8]">_OpenImageFile</a> from appwizard_fileaccess.o(.text._OpenImageFile) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[9]">_OpenMovieFile</a> from appwizard_fileaccess.o(.text._OpenMovieFile) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[a]">_OpenTextFile</a> from appwizard_fileaccess.o(.text._OpenTextFile) referenced 2 times from appwizard_fileaccess.o(.data..L_MergedGlobals)
 <LI><a href="#[bf]">_PID_Hook</a> from appwizard.o(.text._PID_Hook) referenced from appwizard.o(.text.APPW__RegisterPID_Hook)
 <LI><a href="#[19]">_Paint</a> from button_skin.o(.text._Paint) referenced 2 times from button_skin.o(.data.BUTTON__Skin)
 <LI><a href="#[f2]">_Paint</a> from image.o(.text._Paint) referenced from image.o(.text.IMAGE_CreateUser)
 <LI><a href="#[f2]">_Paint</a> from image.o(.text._Paint) referenced from image.o(.text.IMAGE_SetTiled)
 <LI><a href="#[f2]">_Paint</a> from image.o(.text._Paint) referenced from image.o(.text._SetScaleAngAlphaSub)
 <LI><a href="#[179]">_PaintScaled</a> from image.o(.text._PaintScaled) referenced from image.o(.text._SetScaleAngAlphaSub)
 <LI><a href="#[f3]">_PaintTiled</a> from image.o(.text._PaintTiled) referenced from image.o(.text.IMAGE_CreateUser)
 <LI><a href="#[f3]">_PaintTiled</a> from image.o(.text._PaintTiled) referenced from image.o(.text.IMAGE_SetTiled)
 <LI><a href="#[15d]">_ReadRect</a> from guidrv_lin_oxy_32.o(.text._ReadRect) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[170]">_ReadRectFromMemdev</a> from gui_setalpha.o(.text._ReadRectFromMemdev) referenced from gui_setalpha.o(.text._GetLine)
 <LI><a href="#[29]">_Rect2TextRect</a> from lcd_rotate180.o(.text._Rect2TextRect) referenced 2 times from lcd_rotate180.o(.data.LCD_APIList180)
 <LI><a href="#[2b]">_Rect2TextRect</a> from lcd_rotateccw.o(.text._Rect2TextRect) referenced 2 times from lcd_rotateccw.o(.data.LCD_APIListCCW)
 <LI><a href="#[2e]">_Rect2TextRect</a> from lcd_rotatecw.o(.text._Rect2TextRect) referenced 2 times from lcd_rotatecw.o(.data.LCD_APIListCW)
 <LI><a href="#[270]">_Set</a> from obutton.o(.text._Set) referenced from obutton.o(.rodata._aJobs)
 <LI><a href="#[27f]">_SetAlpha</a> from oimage.o(.text._SetAlpha) referenced from oimage.o(.rodata._aJobs)
 <LI><a href="#[169]">_SetAlpha</a> from guidrv_lin_oxy_32.o(.text._SetAlpha) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[163]">_SetAlphaMode</a> from guidrv_lin_oxy_32.o(.text._SetAlphaMode) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[27e]">_SetAngle</a> from oimage.o(.text._SetAngle) referenced from oimage.o(.rodata._aJobs)
 <LI><a href="#[274]">_SetBitmap</a> from obutton.o(.text._SetBitmap) referenced 2 times from obutton.o(.rodata._aJobs)
 <LI><a href="#[263]">_SetBkColor</a> from gui_enablealpha.o(.text._SetBkColor) referenced 2 times from gui_enablealpha.o(.rodata._SetColorAPI)
 <LI><a href="#[26d]">_SetBkColors</a> from obutton.o(.text._SetBkColors) referenced from obutton.o(.rodata._aJobs)
 <LI><a href="#[161]">_SetChroma</a> from guidrv_lin_oxy_32.o(.text._SetChroma) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[162]">_SetChromaMode</a> from guidrv_lin_oxy_32.o(.text._SetChromaMode) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[262]">_SetColor</a> from gui_enablealpha.o(.text._SetColor) referenced 2 times from gui_enablealpha.o(.rodata._SetColorAPI)
 <LI><a href="#[26a]">_SetColor</a> from obox.o(.text._SetColor) referenced 4 times from obox.o(.rodata._aJobs)
 <LI><a href="#[15e]">_SetDevFunc</a> from guidrv_lin_oxy_32.o(.text._SetDevFunc) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[264]">_SetDrawMode</a> from gui_enablealpha.o(.text._SetDrawMode) referenced 2 times from gui_enablealpha.o(.rodata._SetColorAPI)
 <LI><a href="#[279]">_SetEnd</a> from ogauge.o(.text._SetEnd) referenced from ogauge.o(.rodata._aJobs)
 <LI><a href="#[273]">_SetFocus</a> from obutton.o(.text._SetFocus) referenced from obutton.o(.rodata._aJobs)
 <LI><a href="#[275]">_SetItem</a> from obutton.o(.text._SetItem) referenced 2 times from obutton.o(.rodata._aJobs)
 <LI><a href="#[1d2]">_SetOrg</a> from guidrv_lin_oxy_32.o(.text._SetOrg) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[207]">_SetOrg</a> from guidev_32.o(.text._SetOrg) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[24b]">_SetOrg</a> from gui_enablealpha.o(.text._SetOrg) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[257]">_SetOrg</a> from gui_setalpha.o(.text._SetOrg) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[28a]">_SetPeriod</a> from otimer.o(.text._SetPeriod) referenced from otimer.o(.rodata._aJobs)
 <LI><a href="#[15]">_SetPixelAlpha</a> from gui_drawbitmap_8888.o(.text._SetPixelAlpha) referenced 2 times from gui_drawbitmap_8888.o(.data..L_MergedGlobals)
 <LI><a href="#[1d0]">_SetPixelIndex</a> from guidrv_lin_oxy_32.o(.text._SetPixelIndex) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[205]">_SetPixelIndex</a> from guidev_32.o(.text._SetPixelIndex) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[249]">_SetPixelIndex</a> from gui_enablealpha.o(.text._SetPixelIndex) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[255]">_SetPixelIndex</a> from gui_setalpha.o(.text._SetPixelIndex) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[16b]">_SetPos</a> from guidrv_lin_oxy_32.o(.text._SetPos) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[27a]">_SetRange</a> from ogauge.o(.text._SetRange) referenced from ogauge.o(.rodata._aJobs)
 <LI><a href="#[282]">_SetRangeJob</a> from oprogbar.o(.text._SetRangeJob) referenced from oprogbar.o(.rodata._aJobs)
 <LI><a href="#[27d]">_SetScale</a> from oimage.o(.text._SetScale) referenced from oimage.o(.rodata._aJobs)
 <LI><a href="#[16c]">_SetSize</a> from guidrv_lin_oxy_32.o(.text._SetSize) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[278]">_SetStart</a> from ogauge.o(.text._SetStart) referenced from ogauge.o(.rodata._aJobs)
 <LI><a href="#[26f]">_SetText</a> from obutton.o(.text._SetText) referenced 2 times from obutton.o(.rodata._aJobs)
 <LI><a href="#[15c]">_SetVRAMAddr</a> from guidrv_lin_oxy_32.o(.text._SetVRAMAddr) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[16e]">_SetVRAM_BufferPTR</a> from guidrv_lin_oxy_32.o(.text._SetVRAM_BufferPTR) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[16d]">_SetVSize</a> from guidrv_lin_oxy_32.o(.text._SetVSize) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[26e]">_SetValue</a> from obutton.o(.text._SetValue) referenced 3 times from obutton.o(.rodata._aJobs)
 <LI><a href="#[281]">_SetValueJob</a> from oprogbar.o(.text._SetValueJob) referenced from oprogbar.o(.rodata._aJobs)
 <LI><a href="#[168]">_SetVis</a> from guidrv_lin_oxy_32.o(.text._SetVis) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[12c]">_Setup</a> from obox.o(.text._Setup) referenced from obox.o(.text.WM_OBJECT_BOX_cb)
 <LI><a href="#[12f]">_Setup</a> from obutton.o(.text._Setup) referenced from obutton.o(.text.WM_OBJECT_BUTTON_cb)
 <LI><a href="#[131]">_Setup</a> from ogauge.o(.text._Setup) referenced from ogauge.o(.text.WM_OBJECT_GAUGE_cb)
 <LI><a href="#[133]">_Setup</a> from oimage.o(.text._Setup) referenced from oimage.o(.text.WM_OBJECT_IMAGE_cb)
 <LI><a href="#[135]">_Setup</a> from oprogbar.o(.text._Setup) referenced from oprogbar.o(.text.WM_OBJECT_PROGBAR_cb)
 <LI><a href="#[137]">_Setup</a> from otext.o(.text._Setup) referenced from otext.o(.text.WM_OBJECT_TEXT_cb)
 <LI><a href="#[139]">_Setup</a> from otimer.o(.text._Setup) referenced from otimer.o(.text.WM_OBJECT_TIMER_cb)
 <LI><a href="#[13b]">_Setup</a> from owindow.o(.text._Setup) referenced from owindow.o(.text.WM_OBJECT_WINDOW_cb)
 <LI><a href="#[15f]">_ShowBuffer</a> from guidrv_lin_oxy_32.o(.text._ShowBuffer) referenced from guidrv_lin_oxy_32.o(.text._GetDevFunc)
 <LI><a href="#[12e]">_Skin</a> from obutton.o(.text._Skin) referenced from obutton.o(.text.WM_OBJECT_BUTTON_Create)
 <LI><a href="#[288]">_StartTimer</a> from otimer.o(.text._StartTimer) referenced from otimer.o(.rodata._aJobs)
 <LI><a href="#[289]">_StopTimer</a> from otimer.o(.text._StopTimer) referenced from otimer.o(.rodata._aJobs)
 <LI><a href="#[272]">_Toggle</a> from obutton.o(.text._Toggle) referenced from obutton.o(.rodata._aJobs)
 <LI><a href="#[2c]">_TransformRect</a> from lcd_rotateccw.o(.text._TransformRect) referenced 2 times from lcd_rotateccw.o(.data.LCD_APIListCCW)
 <LI><a href="#[2f]">_TransformRect</a> from lcd_rotatecw.o(.text._TransformRect) referenced 2 times from lcd_rotatecw.o(.data.LCD_APIListCW)
 <LI><a href="#[c2]">_UpdateBuffer</a> from editdec.o(.text._UpdateBuffer) referenced from editdec.o(.text.EDIT_SetDecMode)
 <LI><a href="#[1d1]">_XorPixel</a> from guidrv_lin_oxy_32.o(.text._XorPixel) referenced from guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
 <LI><a href="#[206]">_XorPixel</a> from guidev_32.o(.text._XorPixel) referenced from guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
 <LI><a href="#[24a]">_XorPixel</a> from gui_enablealpha.o(.text._XorPixel) referenced from gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
 <LI><a href="#[256]">_XorPixel</a> from gui_setalpha.o(.text._XorPixel) referenced from gui_setalpha.o(.rodata._GUI_SetAlpha_API)
 <LI><a href="#[b8]">__main</a> from __main.o(!!!main) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[126]">_cbBackWin</a> from wm.o(.text._cbBackWin) referenced from wm.o(.text.WM_Init)
 <LI><a href="#[124]">_cbInvalidateOne</a> from wm_lib.o(.text._cbInvalidateOne) referenced from wm_lib.o(.text.WM_BringToTop)
 <LI><a href="#[12a]">_cbMotion</a> from wm_motion.o(.text._cbMotion) referenced from wm_motion.o(.text.WM_MOTION_Enable)
 <LI><a href="#[13c]">_cbPaintMemDev</a> from wm.o(.text._cbPaintMemDev) referenced from wm.o(.text.WM__Paint)
 <LI><a href="#[125]">_cbTimer</a> from wm_timer.o(.text._cbTimer) referenced from wm_timer.o(.text.WM_CreateTimer)
 <LI><a href="#[17c]">_cbTimer</a> from wm_motion.o(.text._cbTimer) referenced from wm_motion.o(.text._StartMotionTimer)
 <LI><a href="#[17d]">_cbTimer</a> from image_gif.o(.text._cbTimer) referenced from image_gif.o(.text._StartTimer)
 <LI><a href="#[b9]">_cbVar</a> from appwizard_var.o(.text._cbVar) referenced from appwizard_var.o(.text.APPW_GetVarWin)
 <LI><a href="#[26]">cbID_SCREEN_00</a> from id_screen_00_slots.o(.text.cbID_SCREEN_00) referenced 2 times from id_screen_00.o(.data.ID_SCREEN_00_RootInfo)
 <LI><a href="#[42]">ft5336_Init</a> from ft5336.o(.text.ft5336_Init) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[43]">ft5336_ReadID</a> from ft5336.o(.text.ft5336_ReadID) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[44]">ft5336_Reset</a> from ft5336.o(.text.ft5336_Reset) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[49]">ft5336_TS_ClearIT</a> from ft5336.o(.text.ft5336_TS_ClearIT) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[46]">ft5336_TS_DetectTouch</a> from ft5336.o(.text.ft5336_TS_DetectTouch) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[4b]">ft5336_TS_DisableIT</a> from ft5336.o(.text.ft5336_TS_DisableIT) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[48]">ft5336_TS_EnableIT</a> from ft5336.o(.text.ft5336_TS_EnableIT) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[47]">ft5336_TS_GetXY</a> from ft5336.o(.text.ft5336_TS_GetXY) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[4a]">ft5336_TS_ITStatus</a> from ft5336.o(.text.ft5336_TS_ITStatus) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[45]">ft5336_TS_Start</a> from ft5336.o(.text.ft5336_TS_Start) referenced 2 times from ft5336.o(.data.ft5336_ts_drv)
 <LI><a href="#[d]">memcpy</a> from memcpy.o(.text) referenced 2 times from gui__private.o(.data..L_MergedGlobals)
 <LI><a href="#[21]">memset</a> from memset.o(.text) referenced 2 times from gui__private.o(.data.GUI__pfMemset)
 <LI><a href="#[191]">osRtxEventFlagsPostProcess</a> from rtx_evflags.o(.text.osRtxEventFlagsPostProcess) referenced 2 times from rtx_evflags.o(.text.svcRtxEventFlagsNew)
 <LI><a href="#[18a]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced 2 times from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[192]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced 2 times from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[194]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[196]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[195]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[18b]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced 2 times from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[193]">osThreadEntry</a> from rtx_thread.o(.text.osThreadEntry) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[24]">strcmp</a> from strcmpv7m_pel.o(.text) referenced 2 times from gui__private.o(.data.GUI__pfStrcmp)
 <LI><a href="#[f]">strcpy</a> from strcpy.o(.text) referenced 2 times from gui__private.o(.data..L_MergedGlobals)
 <LI><a href="#[e]">strlen</a> from strlen.o(.text) referenced 2 times from gui__private.o(.data..L_MergedGlobals)
 <LI><a href="#[17e]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced 2 times from rtx_delay.o(.text.osDelay)
 <LI><a href="#[17f]">svcRtxEventFlagsNew</a> from rtx_evflags.o(.text.svcRtxEventFlagsNew) referenced 2 times from rtx_evflags.o(.text.osEventFlagsNew)
 <LI><a href="#[180]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced 2 times from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[181]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced 2 times from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[182]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced 2 times from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[183]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced 2 times from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[184]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[185]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[186]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced 2 times from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[187]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced 2 times from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[188]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced 2 times from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[189]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced 2 times from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[18c]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced 2 times from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[18d]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced 2 times from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[18e]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced 2 times from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[18f]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced 2 times from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[190]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced 2 times from rtx_timer.o(.text.osTimerStart)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b8]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[2a5]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2a7]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[897]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[898]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[899]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[89a]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[89b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2af]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2a8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_fp_1 &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[89c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[89d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[89e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[89f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[8a0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[8a1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[8a2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8a3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[8a4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[8a5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[8a6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[8a7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[8a8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[8a9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8aa]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[8ab]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[8ac]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8ad]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[8ae]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8af]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[8b0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2b4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[8b1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[8b2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[8b3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[8b4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[8b5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[8b6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[8b7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2a6]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8b8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2aa]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2ac]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[2ae]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2b0]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BSP_SDRAM_Init &rArr; BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8b9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2c7]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2b3]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[8ba]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2b5]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[52]"></a>SVC_Handler</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c6]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[336]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>

<P><STRONG><a name="[f]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[e]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[80f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenFile
</UL>

<P><STRONG><a name="[2be]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataFileMem
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataFontMem
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataImageMem
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBufferedEx
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ChangeCharacter
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[2bb]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[8bb]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveEscapeTXT
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveEscapeCSV
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
</UL>

<P><STRONG><a name="[2bd]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[8bc]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[2bc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_Create
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_Create
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_Create
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_Create
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_Create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_Create
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_Create
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPosition
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPositionRoot
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SavePrivateContextOnDemand
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContext
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[8bd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8be]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[8bf]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
</UL>

<P><STRONG><a name="[8c0]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2bf]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[8c1]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data.GUI__pfMemset)
</UL>
<P><STRONG><a name="[2c2]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_AddHLine
</UL>

<P><STRONG><a name="[2c3]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[8c2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[88b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[8c3]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[461]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContext
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__DrawFromFilePointer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Clear
</UL>

<P><STRONG><a name="[8c4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8c5]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[24]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__private.o(.data.GUI__pfStrcmp)
</UL>
<P><STRONG><a name="[8c6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8c7]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8c8]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2b2]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8c9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b6]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[8ca]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8cb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8cc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>_fp_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(.text.$Sub$$_fp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[26b]"></a>APPW_ACTION_SetEnable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, appwizard_action.o(.text.APPW_ACTION_SetEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = APPW_ACTION_SetEnable &rArr; WM_DisableWindow &rArr; WM_SetEnableState &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableWindow
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_EnableWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[2cc]"></a>APPW_CalcCond</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, appwizard_condition.o(.text.APPW_CalcCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = APPW_CalcCond &rArr; APPW_GetAtomValue &rArr; APPW_GetValue &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomValue
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResolveTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
</UL>

<P><STRONG><a name="[2cf]"></a>APPW_CalcTerm</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, appwizard_var.o(.text.APPW_CalcTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = APPW_CalcTerm &rArr; APPW_GetAtomValue &rArr; APPW_GetValue &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomValue
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResolveCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_CalcVar
</UL>

<P><STRONG><a name="[2d1]"></a>APPW_CreatePersistentScreens</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, appwizard.o(.text.APPW_CreatePersistentScreens))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = APPW_CreatePersistentScreens &rArr; APPW_CreateRoot &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[2d2]"></a>APPW_CreateRoot</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, appwizard.o(.text.APPW_CreateRoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = APPW_CreateRoot &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_Create
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_SetPara
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BroadcastMessage
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitDrawing
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreatePersistentScreens
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[2de]"></a>APPW_Dispose</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, appwizard.o(.text.APPW_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UndisposeWindow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPosition
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPositionRoot
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DragWindow
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftWindowEnd
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[322]"></a>APPW_DragCoord</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, appwizard.o(.text.APPW_DragCoord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = APPW_DragCoord
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MoveDispose
</UL>

<P><STRONG><a name="[2e0]"></a>APPW_DrawFocusRect</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, appwizard.o(.text.APPW_DrawFocusRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = APPW_DrawFocusRect &rArr; GUI_AA_DrawRoundedFrameEx &rArr; GUI_AA_DrawRoundedFrame &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRectEx
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrameEx
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
</UL>

<P><STRONG><a name="[7aa]"></a>APPW_DrawObject</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, appwizard.o(.text.APPW_DrawObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = APPW_DrawObject
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7ab]"></a>APPW_DrawObjectAt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard.o(.text.APPW_DrawObjectAt))
<BR><BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[bc]"></a>APPW_DrawStreamedBitmapEXT</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, appwizard_fileaccess.o(.text.APPW_DrawStreamedBitmapEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = APPW_DrawStreamedBitmapEXT &rArr; GUI_DrawStreamedBitmapExAuto &rArr; _DrawStreamedBitmapExLoop &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateBitmapFromStream
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard.o(.text.APPW_SetStreamedBitmap)
</UL>
<P><STRONG><a name="[bd]"></a>APPW_DrawStreamedBitmapINT</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, appwizard.o(.text.APPW_DrawStreamedBitmapINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = APPW_DrawStreamedBitmapINT &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateBitmapFromStream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard.o(.text.APPW_SetStreamedBitmap)
</UL>
<P><STRONG><a name="[2ee]"></a>APPW_DrawingCleanup</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, appwizard_drawing.o(.text.APPW_DrawingCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = APPW_DrawingCleanup &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_cb
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
</UL>

<P><STRONG><a name="[2ef]"></a>APPW_DrawingDraw</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, appwizard_drawing.o(.text.APPW_DrawingDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = APPW_DrawingDraw &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_cb
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
</UL>

<P><STRONG><a name="[2f0]"></a>APPW_DrawingPrepare</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, appwizard_drawing.o(.text.APPW_DrawingPrepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = APPW_DrawingPrepare &rArr; APPW_GetAtomValue &rArr; APPW_GetValue &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomValue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_cb
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
</UL>

<P><STRONG><a name="[2f2]"></a>APPW_Exec</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, appwizard.o(.text.APPW_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = APPW_Exec &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetTimerActive
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetTimerActive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GethWinVar
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVarWin
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[2f8]"></a>APPW_GetAtomInfo</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, appwizard.o(.text.APPW_GetAtomInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = APPW_GetAtomInfo &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByRootId
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomValue
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStartStopNotification
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFunc
</UL>

<P><STRONG><a name="[2cd]"></a>APPW_GetAtomValue</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, appwizard.o(.text.APPW_GetAtomValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = APPW_GetAtomValue &rArr; APPW_GetValue &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVarData
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomInfo
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetValue
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAtomValueDetail
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CalcTerm
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CalcCond
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFunc
</UL>

<P><STRONG><a name="[2fe]"></a>APPW_GetCurrentRootInfo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, appwizard.o(.text.APPW_GetCurrentRootInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = APPW_GetCurrentRootInfo &rArr; APPW_GetRoot &rArr; OUTLINED_FUNCTION_3 &rArr; APPW__GetDispose &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfo
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[6a8]"></a>APPW_GetFileAccess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text.APPW_GetFileAccess))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[31f]"></a>APPW_GetFileType</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text.APPW_GetFileType))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MakeFontEx
</UL>

<P><STRONG><a name="[325]"></a>APPW_GetJob</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, appwizard_action.o(.text.APPW_GetJob))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
</UL>

<P><STRONG><a name="[303]"></a>APPW_GetLockedText</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, appwizard.o(.text.APPW_GetLockedText))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = APPW_GetLockedText &rArr; _GetTextLocked &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBuffered
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextLen
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTextLocked
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
</UL>

<P><STRONG><a name="[341]"></a>APPW_GetMemAccess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text.APPW_GetMemAccess))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_TextInitMem
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
</UL>

<P><STRONG><a name="[80e]"></a>APPW_GetResourcePath</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appwizard.o(.text.APPW_GetResourcePath))
<BR><BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenFile
</UL>

<P><STRONG><a name="[301]"></a>APPW_GetRoot</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, appwizard.o(.text.APPW_GetRoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = APPW_GetRoot &rArr; OUTLINED_FUNCTION_3 &rArr; APPW__GetDispose &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVarWin
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_Create
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetCurrentRootInfo
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_cb
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_CloseScreen
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
</UL>

<P><STRONG><a name="[302]"></a>APPW_GetRootInfo</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, appwizard.o(.text.APPW_GetRootInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APPW_GetRootInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetCurrentRootInfo
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
</UL>

<P><STRONG><a name="[338]"></a>APPW_GetRootInfoByHandle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, appwizard.o(.text.APPW_GetRootInfoByHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APPW_GetRootInfoByHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPosition
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPositionRoot
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteScreenIfNotPersistent
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftScreenEnd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_CloseScreen
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
</UL>

<P><STRONG><a name="[2f9]"></a>APPW_GetRootInfoByRootId</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, appwizard.o(.text.APPW_GetRootInfoByRootId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APPW_GetRootInfoByRootId
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomInfo
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetHandle
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_CloseScreen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[30a]"></a>APPW_GetStreamedBitmapInfoEXT</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, appwizard_fileaccess.o(.text.APPW_GetStreamedBitmapInfoEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = APPW_GetStreamedBitmapInfoEXT &rArr; GUI_GetStreamedBitmapInfoEx &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStreamedBitmapInfoEx
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
</UL>

<P><STRONG><a name="[74d]"></a>APPW_GetSupportFocus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard.o(.text.APPW_GetSupportFocus))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
</UL>

<P><STRONG><a name="[2f6]"></a>APPW_GetTimerActive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_action.o(.text.APPW_GetTimerActive))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Exec
</UL>

<P><STRONG><a name="[2fb]"></a>APPW_GetValue</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, appwizard.o(.text.APPW_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = APPW_GetValue &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomValue
</UL>

<P><STRONG><a name="[77b]"></a>APPW_GetVar</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, appwizard_var.o(.text.APPW_GetVar))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_CalcVar
</UL>

<P><STRONG><a name="[2fc]"></a>APPW_GetVarData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, appwizard_var.o(.text.APPW_GetVarData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APPW_GetVarData
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomValue
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
</UL>

<P><STRONG><a name="[2f4]"></a>APPW_GetVarWin</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, appwizard_var.o(.text.APPW_GetVarWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = APPW_GetVarWin &rArr; WM_SetCallback &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Exec
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
</UL>

<P><STRONG><a name="[2f5]"></a>APPW_GethWinVar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_var.o(.text.APPW_GethWinVar))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Exec
</UL>

<P><STRONG><a name="[310]"></a>APPW_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, appwizard.o(.text.APPW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = APPW_Init &rArr; WM_MOTION_Enable &rArr; _ExecMotion &rArr; _MoveToNearestSnapPosition &rArr; _StartMotionTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MULTIBUF_Enable
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MOTION_Enable
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeUTF8
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_InitResourcePath
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__RegisterPID_Hook
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[311]"></a>APPW_InitResourcePath</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, appwizard.o(.text.APPW_InitResourcePath))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
</UL>

<P><STRONG><a name="[31c]"></a>APPW_IsRoot</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appwizard.o(.text.APPW_IsRoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = APPW_IsRoot &rArr; APPW__GetDispose &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
</UL>

<P><STRONG><a name="[345]"></a>APPW_MULTIBUF_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard.o(.text.APPW_MULTIBUF_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_X_Setup
</UL>

<P><STRONG><a name="[31d]"></a>APPW_MakeFont</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text.APPW_MakeFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = APPW_MakeFont &rArr; APPW_MakeFontEx &rArr; GUI_XBF_CreateFont &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MakeFontEx
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[31e]"></a>APPW_MakeFontEx</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, appwizard_fileaccess.o(.text.APPW_MakeFontEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = APPW_MakeFontEx &rArr; GUI_XBF_CreateFont &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF_CreateFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetFileType
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MakeFont
</UL>

<P><STRONG><a name="[321]"></a>APPW_MoveDispose</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, appwizard.o(.text.APPW_MoveDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = APPW_MoveDispose &rArr; APPW_DragCoord
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DragCoord
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DragWindow
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShift
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[323]"></a>APPW_ProcessActions</STRONG> (Thumb, 984 bytes, Stack size 256 bytes, appwizard_action.o(.text.APPW_ProcessActions))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = APPW_ProcessActions &rArr; APPW_CalcCond &rArr; APPW_GetAtomValue &rArr; APPW_GetValue &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVarData
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetJob
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVarWin
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_IsRoot
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CalcCond
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
</UL>

<P><STRONG><a name="[326]"></a>APPW_ProcessMotion</STRONG> (Thumb, 1184 bytes, Stack size 152 bytes, appwizard_action.o(.text.APPW_ProcessMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = APPW_ProcessMotion &rArr; APPW_CreateRoot &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_IsRoot
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SendNotification
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DragWindow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteScreenIfNotPersistent
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalculateMovingRange
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
</UL>

<P><STRONG><a name="[32c]"></a>APPW_SendNotification</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, appwizard_action.o(.text.APPW_SendNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = APPW_SendNotification &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PID_Hook
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotationIndex
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftScreenEnd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShift
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[346]"></a>APPW_SetData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, appwizard.o(.text.APPW_SetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APPW_SetData
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_X_Setup
</UL>

<P><STRONG><a name="[337]"></a>APPW_SetDefaultPosition</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, appwizard.o(.text.APPW_SetDefaultPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = APPW_SetDefaultPosition &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByHandle
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
</UL>

<P><STRONG><a name="[339]"></a>APPW_SetDefaultPositionRoot</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, appwizard.o(.text.APPW_SetDefaultPositionRoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = APPW_SetDefaultPositionRoot &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByHandle
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
</UL>

<P><STRONG><a name="[33a]"></a>APPW_SetStreamedBitmap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, appwizard.o(.text.APPW_SetStreamedBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = APPW_SetStreamedBitmap &rArr; _SetStreamedBitmap &rArr; APPW_GetStreamedBitmapInfoEXT &rArr; GUI_GetStreamedBitmapInfoEx &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[347]"></a>APPW_SetSupportScroller</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard.o(.text.APPW_SetSupportScroller))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_X_Setup
</UL>

<P><STRONG><a name="[2f7]"></a>APPW_SetTimerActive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_action.o(.text.APPW_SetTimerActive))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Exec
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_cb
</UL>

<P><STRONG><a name="[33c]"></a>APPW_SetValue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, appwizard.o(.text.APPW_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = APPW_SetValue &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFunc
</UL>

<P><STRONG><a name="[33d]"></a>APPW_SetVarData</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, appwizard_var.o(.text.APPW_SetVarData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APPW_SetVarData
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFunc
</UL>

<P><STRONG><a name="[33e]"></a>APPW_SetWidgetFocusable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, appwizard.o(.text.APPW_SetWidgetFocusable))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = APPW_SetWidgetFocusable &rArr; WIDGET_SetFocusable &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetFocusable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[344]"></a>APPW_SetpfInitText</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard.o(.text.APPW_SetpfInitText))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_X_Setup
</UL>

<P><STRONG><a name="[340]"></a>APPW_TextInitMem</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, appwizard.o(.text.APPW_TextInitMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = APPW_TextInitMem &rArr; GUI_LANG_LoadTextEx &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetMemAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitText
</UL>

<P><STRONG><a name="[343]"></a>APPW_X_Setup</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, appwconf.o(.text.APPW_X_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APPW_X_Setup &rArr; APPW_SetData
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ShowMissingCharacters
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetSupportScroller
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetData
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MULTIBUF_Enable
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetpfInitText
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[349]"></a>APPW__DisposeObject</STRONG> (Thumb, 490 bytes, Stack size 48 bytes, appwizard.o(.text.APPW__DisposeObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = APPW__DisposeObject &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeCoord
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeWindow
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeCoord
</UL>

<P><STRONG><a name="[2d6]"></a>APPW__GetDispose</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, appwizard.o(.text.APPW__GetDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = APPW__GetDispose &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPosition
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_IsRoot
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DragWindow
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMotionInit
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAtomValueDisposeDetail
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftWindowEnd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShift
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetCoord
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetSize
</UL>

<P><STRONG><a name="[34f]"></a>APPW__GetTextItem</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, appwizard.o(.text.APPW__GetTextItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = APPW__GetTextItem &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBuffered
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextLen
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
</UL>

<P><STRONG><a name="[312]"></a>APPW__RegisterPID_Hook</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, appwizard.o(.text.APPW__RegisterPID_Hook))
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_RegisterReadHook
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
</UL>

<P><STRONG><a name="[351]"></a>APPW__SetUnTouchable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, appwizard.o(.text.APPW__SetUnTouchable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = APPW__SetUnTouchable &rArr;  APPW__SetUnTouchable (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[353]"></a>BSP_SDRAM_Init</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, stm32746g_discovery_sdram.o(.text.BSP_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_SDRAM_Init &rArr; BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[354]"></a>BSP_SDRAM_MspInit</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, stm32746g_discovery_sdram.o(.text.BSP_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[35e]"></a>BSP_TS_GetState</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, stm32746g_discovery_ts.o(.text.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BSP_TS_GetState &rArr; ft5336_TS_GetTouchInfo &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetTouchInfo
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetGestureID
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetState
</UL>

<P><STRONG><a name="[702]"></a>BSP_TS_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32746g_discovery_ts.o(.text.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Initialize
</UL>

<P><STRONG><a name="[c0]"></a>BUTTON_Callback</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, button.o(.text.BUTTON_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = BUTTON_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtrArray
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Toggle
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text.BUTTON_CreateUser)
</UL>
<P><STRONG><a name="[36a]"></a>BUTTON_CreateUser</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, button.o(.text.BUTTON_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = BUTTON_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
</UL>

<P><STRONG><a name="[12]"></a>BUTTON_DrawSkinFlex</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, button_skinflex.o(.text.BUTTON_DrawSkinFlex))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = BUTTON_DrawSkinFlex &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[37b]"></a>BUTTON_IsPressed</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, button.o(.text.BUTTON_IsPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BUTTON_IsPressed &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetState
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Toggle
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetState
</UL>

<P><STRONG><a name="[37d]"></a>BUTTON_SetFont</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, button.o(.text.BUTTON_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BUTTON_SetFont &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[37f]"></a>BUTTON_SetPressed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, button.o(.text.BUTTON_SetPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BUTTON_SetPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetState
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Toggle
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueSub
</UL>

<P><STRONG><a name="[74c]"></a>BUTTON_SetReactOnLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, button.o(.text.BUTTON_SetReactOnLevel))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
</UL>

<P><STRONG><a name="[381]"></a>BUTTON_SetSkin</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, button_skin.o(.text.BUTTON_SetSkin))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BUTTON_SetSkin &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
</UL>

<P><STRONG><a name="[382]"></a>BUTTON_SetText</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, button.o(.text.BUTTON_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BUTTON_SetText &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
</UL>

<P><STRONG><a name="[384]"></a>BUTTON_SetTextAlign</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, button.o(.text.BUTTON_SetTextAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BUTTON_SetTextAlign &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[385]"></a>BUTTON_SetTextOffset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, button.o(.text.BUTTON_SetTextOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BUTTON_SetTextOffset &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[369]"></a>BUTTON_Toggle</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, button.o(.text.BUTTON_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = BUTTON_Toggle &rArr; OUTLINED_FUNCTION_4 &rArr; _OnButtonPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
</UL>

<P><STRONG><a name="[af]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcdconf.o(.text.DMA2D_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[387]"></a>EDIT_AddKey</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, edit.o(.text.EDIT_AddKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = EDIT_AddKey &rArr; EDIT__SetCursorPosEx &rArr; _CalcScrollPos &rArr; EDIT_GetCursorPixelPos &rArr; GUI__CalcTextRect &rArr; GUI_GetFontDistY &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumGlyphs2NumBytes
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__CalcSizeOfChar
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_Encode
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetNumChars
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPos
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPosEx
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsSpaceInBuffer
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteChar
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ChangeCharacter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[c1]"></a>EDIT_Callback</STRONG> (Thumb, 1124 bytes, Stack size 104 bytes, edit.o(.text.EDIT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = EDIT_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRectEx
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddRect
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDown
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRectEx
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetCursorPosX
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetCursorCharacter
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageTimer
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UnlockText
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> edit.o(.text.EDIT_CreateUser)
</UL>
<P><STRONG><a name="[3b7]"></a>EDIT_CreateUser</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, edit.o(.text.EDIT_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = EDIT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementBuffer
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT__SetDec
</UL>

<P><STRONG><a name="[3bb]"></a>EDIT_GetCursorPixelPos</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, edit.o(.text.EDIT_GetCursorPixelPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EDIT_GetCursorPixelPos &rArr; GUI__CalcTextRect &rArr; GUI_GetFontDistY &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetCursorPosX
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
</UL>

<P><STRONG><a name="[390]"></a>EDIT_GetNumChars</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, edit.o(.text.EDIT_GetNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EDIT_GetNumChars &rArr; GUI__GetNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
</UL>

<P><STRONG><a name="[3be]"></a>EDIT_GetText</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, edit.o(.text.EDIT_GetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EDIT_GetText &rArr; GUI__GetNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumGlyphs2NumBytes
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT__SetDec
</UL>

<P><STRONG><a name="[3a4]"></a>EDIT_SetCursorAtPixel</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, edit.o(.text.EDIT_SetCursorAtPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = EDIT_SetCursorAtPixel &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetCursorPosChar
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPos
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UnlockText
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[3c1]"></a>EDIT_SetDecMode</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, editdec.o(.text.EDIT_SetDecMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = EDIT_SetDecMode &rArr; EDIT_SetMaxLen &rArr; _IncrementBuffer &rArr; GUI_ALLOC_Realloc &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDecs
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateBuffer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPos
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__GetCurrentChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT__SetDec
</UL>

<P><STRONG><a name="[3c3]"></a>EDIT_SetMaxLen</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, edit.o(.text.EDIT_SetMaxLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = EDIT_SetMaxLen &rArr; _IncrementBuffer &rArr; GUI_ALLOC_Realloc &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumGlyphs2NumBytes
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT__SetDec
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
</UL>

<P><STRONG><a name="[3c5]"></a>EDIT_SetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edit.o(.text.EDIT_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = EDIT_SetValue &rArr; _SetValue &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddPosition
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
</UL>

<P><STRONG><a name="[3c4]"></a>EDIT__GetCurrentChar</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, edit.o(.text.EDIT__GetCurrentChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EDIT__GetCurrentChar &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumGlyphs2NumBytes
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[391]"></a>EDIT__SetCursorPos</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edit.o(.text.EDIT__SetCursorPos))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementCursor
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
</UL>

<P><STRONG><a name="[398]"></a>EDIT__SetCursorPosEx</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, edit.o(.text.EDIT__SetCursorPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = EDIT__SetCursorPosEx &rArr; _CalcScrollPos &rArr; EDIT_GetCursorPixelPos &rArr; GUI__CalcTextRect &rArr; GUI_GetFontDistY &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UnlockText
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
</UL>

<P><STRONG><a name="[82f]"></a>EvrRtxDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelay))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[865]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[830]"></a>EvrRtxDelayError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayError))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[882]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayStarted))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[883]"></a>EvrRtxEventFlagsCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxEventFlagsCreated))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
</UL>

<P><STRONG><a name="[832]"></a>EvrRtxEventFlagsError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxEventFlagsError))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
</UL>

<P><STRONG><a name="[831]"></a>EvrRtxEventFlagsNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxEventFlagsNew))
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[84c]"></a>EvrRtxEventFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[867]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[837]"></a>EvrRtxKernelError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelError))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[84d]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[833]"></a>EvrRtxKernelGetState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[834]"></a>EvrRtxKernelGetTickCount</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickCount
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[836]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[884]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[838]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[888]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[84f]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[854]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[856]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[858]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[851]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[853]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[86a]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[88c]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueCreated))
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[83d]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[83a]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGet))
<BR><BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[889]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetPending))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[86b]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[842]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInsertPending))
<BR><BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[85b]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInserted))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[843]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotInserted))
<BR><BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[83e]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[840]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePut))
<BR><BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[88d]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutPending))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[86c]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[83c]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[844]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[88e]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquirePending))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[868]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[860]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[891]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexCreated))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[846]"></a>EvrRtxMutexDelete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[890]"></a>EvrRtxMutexDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[845]"></a>EvrRtxMutexError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexError))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[847]"></a>EvrRtxMutexNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[88f]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexNotAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[848]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[85f]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[869]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[876]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[894]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[893]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[87c]"></a>EvrRtxThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[87b]"></a>EvrRtxThreadExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadExit))
<BR><BR>[Called By]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[872]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[866]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[87d]"></a>EvrRtxThreadGetId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[892]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[87e]"></a>EvrRtxThreadNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[86e]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadPreempted))
<BR><BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[86f]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadSwitched))
<BR><BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[86d]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[879]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[895]"></a>EvrRtxTimerCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerCreated))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[880]"></a>EvrRtxTimerError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerError))
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
</UL>

<P><STRONG><a name="[87f]"></a>EvrRtxTimerNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerNew))
<BR><BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[881]"></a>EvrRtxTimerStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>

<P><STRONG><a name="[896]"></a>EvrRtxTimerStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerStarted))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[61f]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f7xx_ll_fmc.o(.text.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[621]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_ll_fmc.o(.text.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[3c7]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f7xx_ll_fmc.o(.text.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FMC_SDRAM_SendCommand &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[620]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, stm32f7xx_ll_fmc.o(.text.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[c4]"></a>GAUGE_Callback</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, gauge.o(.text.GAUGE_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = GAUGE_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gauge.o(.text.GAUGE_CreateUser)
</UL>
<P><STRONG><a name="[3ca]"></a>GAUGE_CreateUser</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, gauge.o(.text.GAUGE_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GAUGE_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_Create
</UL>

<P><STRONG><a name="[3cc]"></a>GAUGE_EnableCCW</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_EnableCCW))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GAUGE_EnableCCW &rArr; _CalcAngle &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3d0]"></a>GAUGE_GetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gauge.o(.text.GAUGE_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GAUGE_GetValue &rArr; OUTLINED_FUNCTION_3 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddValue
</UL>

<P><STRONG><a name="[3d2]"></a>GAUGE_SetAlign</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GAUGE_SetAlign &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3d3]"></a>GAUGE_SetBkColor</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GAUGE_SetBkColor &rArr; WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3d5]"></a>GAUGE_SetColor</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GAUGE_SetColor &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3d6]"></a>GAUGE_SetOffset</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GAUGE_SetOffset &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3d7]"></a>GAUGE_SetRadius</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetRadius))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GAUGE_SetRadius &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3d8]"></a>GAUGE_SetRange</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GAUGE_SetRange &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3d9]"></a>GAUGE_SetRoundedEnd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetRoundedEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GAUGE_SetRoundedEnd &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3da]"></a>GAUGE_SetRoundedValue</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetRoundedValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GAUGE_SetRoundedValue &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3db]"></a>GAUGE_SetValue</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GAUGE_SetValue &rArr; _CalcAngle &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_cb
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetEnd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddValue
</UL>

<P><STRONG><a name="[3dc]"></a>GAUGE_SetValueRange</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetValueRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GAUGE_SetValueRange &rArr; _CalcAngle &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3dd]"></a>GAUGE_SetWidth</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gauge.o(.text.GAUGE_SetWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GAUGE_SetWidth &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[3de]"></a>GL_DrawArcHR</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, gui_arc.o(.text.GL_DrawArcHR))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = GL_DrawArcHR &rArr; OUTLINED_FUNCTION_4 &rArr; _DrawArc &rArr; GUI__SinHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPie
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[3e0]"></a>GL_DrawBitmap</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, gui_drawbitmap.o(.text.GL_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExNoPalette
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA4
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA2
</UL>

<P><STRONG><a name="[3e3]"></a>GL_DrawCircle</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gui_circ.o(.text.GL_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GL_DrawCircle &rArr; OUTLINED_FUNCTION_5 &rArr; _Draw8Point
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw8Point
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
</UL>

<P><STRONG><a name="[3e6]"></a>GL_DrawCircleAA_HiRes</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, guiaa_circle.o(.text.GL_DrawCircleAA_HiRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GL_DrawCircleAA_HiRes &rArr; GUI_AA_Init_HiRes &rArr; GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
</UL>

<P><STRONG><a name="[d2]"></a>GL_DrawEllipseXL</STRONG> (Thumb, 248 bytes, Stack size 120 bytes, gui_circ.o(.text.GL_DrawEllipseXL))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GL_DrawEllipseXL &rArr; LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_circ.o(.text.GUI_DrawEllipseXL)
</UL>
<P><STRONG><a name="[3ef]"></a>GL_DrawLine</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gui_drawline.o(.text.GL_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GL_DrawLine &rArr; GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>

<P><STRONG><a name="[3f0]"></a>GL_DrawLineEx</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, gui_drawline.o(.text.GL_DrawLineEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_cos
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_sin
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLine1Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>

<P><STRONG><a name="[3f7]"></a>GL_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_drawlib.o(.text.GL_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLine1Ex
</UL>

<P><STRONG><a name="[3f8]"></a>GL_FillCircle</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, gui_circ.o(.text.GL_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>

<P><STRONG><a name="[3fa]"></a>GL_FillCircleAA_HiRes</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, guiaa_circle.o(.text.GL_FillCircleAA_HiRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GL_FillCircleAA_HiRes &rArr; GUI_AA_Init_HiRes &rArr; GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillCircle
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
</UL>

<P><STRONG><a name="[3fc]"></a>GL_FillEllipse</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, gui_circ.o(.text.GL_FillEllipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GL_FillEllipse &rArr; LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawEllipse
</UL>

<P><STRONG><a name="[3fe]"></a>GL_FillEllipseAA_HiRes</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, guiaa_circle.o(.text.GL_FillEllipseAA_HiRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GL_FillEllipseAA_HiRes &rArr; GUI_AA_Init_HiRes &rArr; GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
</UL>

<P><STRONG><a name="[400]"></a>GL_FillEllipseAA_HiRes_XL</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, guiaa_circle.o(.text.GL_FillEllipseAA_HiRes_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GL_FillEllipseAA_HiRes_XL &rArr; GUI_AA_Init_HiRes &rArr; GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillEllipseXL
</UL>

<P><STRONG><a name="[d9]"></a>GL_FillEllipseXL</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, gui_circ.o(.text.GL_FillEllipseXL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GL_FillEllipseXL &rArr; LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_circ.o(.text.GUI_FillEllipseXL)
</UL>
<P><STRONG><a name="[3f5]"></a>GL_FillPolygon</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, gui_fillpolygon.o(.text.GL_FillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GL_FillPolygon &rArr; _Add
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[4c0]"></a>GL_MoveTo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_2dlib.o(.text.GL_MoveTo))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
</UL>

<P><STRONG><a name="[403]"></a>GL_SetDefault</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gui_common.o(.text.GL_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GL_SetDefault &rArr; GUI_SetPenSize &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
</UL>

<P><STRONG><a name="[672]"></a>GUICC_M1555I_SetCustColorConv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicc_m1555i.o(.text.GUICC_M1555I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[673]"></a>GUICC_M4444I_SetCustColorConv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicc_m4444i.o(.text.GUICC_M4444I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[675]"></a>GUICC_M8888I_SetCustColorConv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_m8888i.o(.text.GUICC_M8888I_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[674]"></a>GUICC_M888_SetCustColorConv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_m888.o(.text.GUICC_M888_SetCustColorConv))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[1fc]"></a>GUIMONO_DispChar</STRONG> (Thumb, 360 bytes, Stack size 88 bytes, gui_charm.o(.text.GUIMONO_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.rodata.GUI_Font6x8)
</UL>
<P><STRONG><a name="[1fd]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_charm.o(.text.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.rodata.GUI_Font6x8)
</UL>
<P><STRONG><a name="[1fe]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charm.o(.text.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.rodata.GUI_Font6x8)
</UL>
<P><STRONG><a name="[1ff]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gui_charm.o(.text.GUIMONO_IsInFont))
<BR>[Address Reference Count : 1]<UL><LI> f6x8.o(.rodata.GUI_Font6x8)
</UL>
<P><STRONG><a name="[1f8]"></a>GUIPROP_DispChar</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, gui_charp.o(.text.GUIPROP_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUIPROP_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f13_1.o(.rodata.GUI_Font13_1)
</UL>
<P><STRONG><a name="[40]"></a>GUIPROP_EXT__ClearLine</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, gui_encext.o(.text.GUIPROP_EXT__ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUIPROP_EXT__ClearLine &rArr; GUI__GetNonExistingCharWidth &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNonExistingCharWidth
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__FindChar
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_encext.o(.data._fpClearLine)
<LI> gui_xbf_propext.o(.text._DispLine)
</UL>
<P><STRONG><a name="[1f7]"></a>GUIPROP_EXT__DispLine</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gui_encext.o(.text.GUIPROP_EXT__DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUIPROP_EXT__DispLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_encext.o(.rodata.GUI_ENC_APIList_EXT)
</UL>
<P><STRONG><a name="[40b]"></a>GUIPROP_EXT__FindChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_charpext.o(.text.GUIPROP_EXT__FindChar))
<BR><BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__FindChar
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__FindChar
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
</UL>

<P><STRONG><a name="[7a3]"></a>GUIPROP_EXT__SetfpClearLine</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_encext.o(.text.GUIPROP_EXT__SetfpClearLine))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[1f9]"></a>GUIPROP_GetCharDistX</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gui_charp.o(.text.GUIPROP_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUIPROP_GetCharDistX &rArr; GUI__GetNonExistingCharWidth &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNonExistingCharWidth
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f13_1.o(.rodata.GUI_Font13_1)
</UL>
<P><STRONG><a name="[1fa]"></a>GUIPROP_GetFontInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_charp.o(.text.GUIPROP_GetFontInfo))
<BR>[Address Reference Count : 1]<UL><LI> f13_1.o(.rodata.GUI_Font13_1)
</UL>
<P><STRONG><a name="[1fb]"></a>GUIPROP_IsInFont</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_charp.o(.text.GUIPROP_IsInFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUIPROP_IsInFont
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f13_1.o(.rodata.GUI_Font13_1)
</UL>
<P><STRONG><a name="[408]"></a>GUIPROP__FindChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_charp.o(.text.GUIPROP__FindChar))
<BR><BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_IsInFont
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_GetCharDistX
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP__FindChar
</UL>

<P><STRONG><a name="[40e]"></a>GUITASK_CopyContext</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gui_task.o(.text.GUITASK_CopyContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUITASK_CopyContext &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[410]"></a>GUITASK_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gui_task.o(.text.GUITASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUITASK_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[757]"></a>GUI_AA_DisableHiRes</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_lib.o(.text.GUI_AA_DisableHiRes))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DISABLE_HIRES
</UL>

<P><STRONG><a name="[3c9]"></a>GUI_AA_DrawArcEx</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, guiaa_arc.o(.text.GUI_AA_DrawArcEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = GUI_AA_DrawArcEx &rArr; GUI_AA_DrawArcHR &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SinHQ
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CosHQ
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgY_AA
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgX_AA
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
</UL>

<P><STRONG><a name="[413]"></a>GUI_AA_DrawArcHR</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, guiaa_arc.o(.text.GUI_AA_DrawArcHR))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GUI_AA_DrawArcHR &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgY_AA
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgX_AA
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArcHR
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DRAW_ARC
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
</UL>

<P><STRONG><a name="[418]"></a>GUI_AA_DrawCircle</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, guiaa_circle.o(.text.GUI_AA_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GUI_AA_DrawCircle &rArr; GL_DrawCircleAA_HiRes &rArr; GUI_AA_Init_HiRes &rArr; GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgY_AA
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgX_AA
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircleAA_HiRes
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DRAW_CIRCLE
</UL>

<P><STRONG><a name="[41a]"></a>GUI_AA_DrawLine</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, guiaa_line.o(.text.GUI_AA_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GUI_AA_DrawLine &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenShape
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgY_AA
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgX_AA
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircleAA_HiRes
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DRAW_LINE
</UL>

<P><STRONG><a name="[41d]"></a>GUI_AA_DrawPie</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, guiaa_arc.o(.text.GUI_AA_DrawPie))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GUI_AA_DrawPie &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArcHR
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DRAW_PIE
</UL>

<P><STRONG><a name="[41e]"></a>GUI_AA_DrawRoundedFrame</STRONG> (Thumb, 676 bytes, Stack size 112 bytes, guiaa_drawroundedrect.o(.text.GUI_AA_DrawRoundedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GUI_AA_DrawRoundedFrame &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgY_AA
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgX_AA
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrameEx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DRAW_ROUNDED_FRAME
</UL>

<P><STRONG><a name="[2e6]"></a>GUI_AA_DrawRoundedFrameEx</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, guiaa_drawroundedrect.o(.text.GUI_AA_DrawRoundedFrameEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = GUI_AA_DrawRoundedFrameEx &rArr; GUI_AA_DrawRoundedFrame &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawFocusRect
</UL>

<P><STRONG><a name="[423]"></a>GUI_AA_DrawRoundedRect</STRONG> (Thumb, 924 bytes, Stack size 120 bytes, guiaa_drawroundedrect.o(.text.GUI_AA_DrawRoundedRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = GUI_AA_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgY_AA
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgX_AA
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
</UL>

<P><STRONG><a name="[756]"></a>GUI_AA_EnableHiRes</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_lib.o(.text.GUI_AA_EnableHiRes))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_ENABLE_HIRES
</UL>

<P><STRONG><a name="[3ea]"></a>GUI_AA_Exit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, guiaa_lib.o(.text.GUI_AA_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_AA_Exit &rArr; _FlushLine &rArr; LCD_SetPixelAA4_Trans &rArr; OUTLINED_FUNCTION_4 &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes_XL
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircleAA_HiRes
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircleAA_HiRes
</UL>

<P><STRONG><a name="[426]"></a>GUI_AA_FillCircle</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, guiaa_circle.o(.text.GUI_AA_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GUI_AA_FillCircle &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircleAA_HiRes
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_FILL_CIRCLE
</UL>

<P><STRONG><a name="[427]"></a>GUI_AA_FillEllipseXL</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, guiaa_circle.o(.text.GUI_AA_FillEllipseXL))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GUI_AA_FillEllipseXL &rArr; GL_FillEllipseAA_HiRes_XL &rArr; GUI_AA_Init_HiRes &rArr; GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgY_AA
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgX_AA
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes_XL
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_FILL_ELLIPSE
</UL>

<P><STRONG><a name="[42a]"></a>GUI_AA_FillRoundedRect</STRONG> (Thumb, 748 bytes, Stack size 144 bytes, guiaa_fillroundedrect.o(.text.GUI_AA_FillRoundedRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = GUI_AA_FillRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgY_AA
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetOrgX_AA
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRectEx
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawColors
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_FILL_ROUNDED_RECT
</UL>

<P><STRONG><a name="[42f]"></a>GUI_AA_FillRoundedRectEx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, guiaa_fillroundedrect.o(.text.GUI_AA_FillRoundedRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = GUI_AA_FillRoundedRectEx &rArr; GUI_AA_FillRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
</UL>

<P><STRONG><a name="[755]"></a>GUI_AA_GetFactor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_lib.o(.text.GUI_AA_GetFactor))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
</UL>

<P><STRONG><a name="[c6]"></a>GUI_AA_HiRes2Pixel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, guiaa_lib.o(.text.GUI_AA_HiRes2Pixel))
<BR>[Address Reference Count : 3]<UL><LI> guiaa_circle.o(.text.GUI_AA_DrawCircle)
<LI> guiaa_fillroundedrect.o(.text.GUI_AA_FillRoundedRect)
<LI> guiaa_drawroundedrect.o(.text.GUI_AA_DrawRoundedFrame)
</UL>
<P><STRONG><a name="[41b]"></a>GUI_AA_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, guiaa_lib.o(.text.GUI_AA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcClipRectHL
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CleanLine
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init_HiRes
</UL>

<P><STRONG><a name="[3e8]"></a>GUI_AA_Init_HiRes</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, guiaa_lib.o(.text.GUI_AA_Init_HiRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_AA_Init_HiRes &rArr; GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes_XL
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircleAA_HiRes
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircleAA_HiRes
</UL>

<P><STRONG><a name="[433]"></a>GUI_AA_SetFactor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_lib.o(.text.GUI_AA_SetFactor))
<BR><BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcClipRectHL
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_SET_FACTOR
</UL>

<P><STRONG><a name="[434]"></a>GUI_AA__DrawCharAA2</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, guiaa_char2.o(.text.GUI_AA__DrawCharAA2))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GUI_AA__DrawCharAA2 &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_MixColors16
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[437]"></a>GUI_AA__DrawCharAA4</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, guiaa_char4.o(.text.GUI_AA__DrawCharAA4))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GUI_AA__DrawCharAA4 &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[2e9]"></a>GUI_ALLOC_AllocNoInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_alloc.o(.text.GUI_ALLOC_AllocNoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetGradient
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_SetItemData
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPaletteEx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExNoPalette
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBuffer
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEAlpha
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[de]"></a>GUI_ALLOC_AllocZero</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gui_alloc.o(.text.GUI_ALLOC_AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CopyText
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetLockedText
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVarWin
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetTextItem
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AllocZero
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfoEx
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferAlloc
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE32Ex
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE4Ex
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE1Ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_jpeg.o(.text.GUI_JPEG__InitDraw)
</UL>
<P><STRONG><a name="[5d3]"></a>GUI_ALLOC_AssignMemory</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_alloc.o(.text.GUI_ALLOC_AssignMemory))
<BR><BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[df]"></a>GUI_ALLOC_Free</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_alloc.o(.text.GUI_ALLOC_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushFreeBlock
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_Create
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingCleanup
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetGradient
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Delete
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Free
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExNoPalette
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfoEx
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_End
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__Free
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEAlpha
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE32Ex
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE4Ex
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE1Ex
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GUI_USAGE_BM_Delete
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_End
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_jpeg.o(.text.GUI_JPEG__InitDraw)
</UL>
<P><STRONG><a name="[174]"></a>GUI_ALLOC_FreeFixedBlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_alloc.o(.text.GUI_ALLOC_FreeFixedBlock))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UnlockText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.text._OnExit)
</UL>
<P><STRONG><a name="[2f1]"></a>GUI_ALLOC_FreePtr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_alloc.o(.text.GUI_ALLOC_FreePtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtrArray
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[363]"></a>GUI_ALLOC_FreePtrArray</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_alloc.o(.text.GUI_ALLOC_FreePtrArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_ALLOC_FreePtrArray &rArr; GUI_ALLOC_FreePtr &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
</UL>

<P><STRONG><a name="[411]"></a>GUI_ALLOC_GetFixedBlock</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, gui_alloc.o(.text.GUI_ALLOC_GetFixedBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE32_SetFunc
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE16_SetFunc
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE8_SetFunc
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE4_SetFunc
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE1_SetFunc
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreatehCrit
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
</UL>

<P><STRONG><a name="[43f]"></a>GUI_ALLOC_GetMaxSize</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gui_alloc.o(.text.GUI_ALLOC_GetMaxSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[7d8]"></a>GUI_ALLOC_GetNumFreeBytes</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_alloc.o(.text.GUI_ALLOC_GetNumFreeBytes))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
</UL>

<P><STRONG><a name="[5fa]"></a>GUI_ALLOC_GetSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_alloc.o(.text.GUI_ALLOC_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>

<P><STRONG><a name="[cb]"></a>GUI_ALLOC_LockH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_alloc.o(.text.GUI_ALLOC_LockH))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_Create
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_Create
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_Create
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_Create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_Create
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_Create
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_cb
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetEnd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetSkin
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CopyText
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetState
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingDraw
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetGradient
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetLockedText
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_SetPara
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetTextItem
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAtomValueDetail
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTextLocked
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeCoord
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_GetItemDataLocked
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Exec
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Delete
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResetItems
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopAuto
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecAnimations
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MOTION_SetMoveable
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopTimer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPeriodSub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_cb
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddValue
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVal
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddValue
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueInteraction
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTA
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTAEx
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMP
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEG
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMPEx
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEGEx
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetVoid
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMotionInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftWindowEnd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftScreenEnd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShift
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AllocZero
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetVis
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BroadcastMessage
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPaletteEx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExNoPalette
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextLenEx
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBufferedEx
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetText
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfoEx
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTiled
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendants
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SavePrivateContextOnDemand
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetConfirmation
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContext
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsChild
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__GetInfoEx
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__DecodeLine
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadInfo
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadUntilSOF
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferAlloc
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferGetP_Locked
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeNextRow
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadNextRow
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE32Ex
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE4Ex
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE1Ex
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateBuffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetNumChars
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPosEx
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__GetCurrentChar
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsSpaceInBuffer
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteChar
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gui_anim.o(.text.GUI_ANIM_AddItem)
<LI> wm_lib.o(.text.WM_BringToBottom)
<LI> guidev_writealpha.o(.text.GUI_MEMDEV_WriteAlphaAt)
</UL>
<P><STRONG><a name="[440]"></a>GUI_ALLOC_Realloc</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, gui_alloc.o(.text.GUI_ALLOC_Realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI_ALLOC_Realloc &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementBuffer
</UL>

<P><STRONG><a name="[441]"></a>GUI_ALLOC_RequestSize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gui_alloc.o(.text.GUI_ALLOC_RequestSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_ALLOC_RequestSize &rArr; GUI_ALLOC_GetMaxSize &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExNoPalette
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE32Ex
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE4Ex
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE1Ex
</UL>

<P><STRONG><a name="[e5]"></a>GUI_ALLOC_UnlockH</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_alloc.o(.text.GUI_ALLOC_UnlockH))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_ALLOC_UnlockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_Create
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_Create
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_Create
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_Create
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_Create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_Create
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_Create
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetAlign
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetWidth
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValueRange
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRange
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_EnableCCW
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_cb
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetEnd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetSkin
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextOffset
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextAlign
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CopyText
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_IsPressed
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetState
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Toggle
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColors
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetState
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueSub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingDraw
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetGradient
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_SetPara
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetTextItem
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAtomValueDetail
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTextLocked
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeCoord
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Exec
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StartEx
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Delete
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResetItems
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopAuto
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecAnimations
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_SetBkColor
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetStayOnTop
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MOTION_SetMoveable
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopTimer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPeriodSub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_cb
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetWrapMode
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetRotation
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetBkColor
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFrameColor
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextOffset
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextAlign
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddValue
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddValue
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueInteraction
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTA
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTAEx
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreateUser
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMP
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEG
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_EnableLQ
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMPEx
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEGEx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetOffset
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlign
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetTiled
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAngle
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlpha
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetScale
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetVoid
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_GetValue
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CreateUser
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedEnd
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedValue
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRadius
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetBkColor
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetColor
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetOffset
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMotionInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFunc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftWindowEnd
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Free
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftScreenEnd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShift
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetVis
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetEnableState
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BroadcastMessage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExNoPalette
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextLenEx
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBufferedEx
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetRect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetText
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfoEx
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetPeriod
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTiled
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DRAW__Draw
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Create
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Toggle
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPidStateChange
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchReactOnLevel
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_End
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendants
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SavePrivateContextOnDemand
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetConfirmation
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContext
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsChild
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__GetInfoEx
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__DecodeLine
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__Free
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadInfo
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadUntilSOF
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockAC_First
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockAC_Refine
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockDC_First
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockDC_Refine
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferAlloc
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeNextRow
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadNextRow
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE32Ex
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE4Ex
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE1Ex
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateBuffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetNumChars
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPosEx
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__GetCurrentChar
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsSpaceInBuffer
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteChar
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementBuffer
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageTimer
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UnlockText
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_End
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wm_lib.o(.text.WM_BringToBottom)
<LI> guidev_writealpha.o(.text.GUI_MEMDEV_WriteAlphaAt)
</UL>
<P><STRONG><a name="[177]"></a>GUI_ALLOC_h2p</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_alloc.o(.text.GUI_ALLOC_h2p))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_cb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOnValueChanged
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetGradient
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetWidgetFocusable
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAtomValueDetail
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_SetItemData
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_GetItemDataLocked
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_IsRunning
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_GetNext
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GethAnim
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVal
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindowSecure
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Free
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintMemdev
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetLastSibling
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEAlpha
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextChild
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(.text._PaintTransChildren)
</UL>
<P><STRONG><a name="[442]"></a>GUI_ANIM_AddItem</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, gui_anim.o(.text.GUI_ANIM_AddItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_ANIM_AddItem &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimCreate
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[445]"></a>GUI_ANIM_Create</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, gui_anim.o(.text.GUI_ANIM_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_ANIM_Create &rArr; GUI_ANIM_CreateWithId &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[446]"></a>GUI_ANIM_CreateWithId</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gui_anim.o(.text.GUI_ANIM_CreateWithId))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_ANIM_CreateWithId &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GethAnim
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Create
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimCreate
</UL>

<P><STRONG><a name="[448]"></a>GUI_ANIM_Delete</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, gui_anim.o(.text.GUI_ANIM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_ANIM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopAnim
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimStop
</UL>

<P><STRONG><a name="[44a]"></a>GUI_ANIM_Exec</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, gui_anim.o(.text.GUI_ANIM_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_ANIM_Exec &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResetItems
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecAnimations
</UL>

<P><STRONG><a name="[44d]"></a>GUI_ANIM_Get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_anim.o(.text.GUI_ANIM_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_ANIM_Get &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GethAnim
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimStart
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimStop
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimCreate
</UL>

<P><STRONG><a name="[77a]"></a>GUI_ANIM_GetFirst</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_anim.o(.text.GUI_ANIM_GetFirst))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimStop
</UL>

<P><STRONG><a name="[44e]"></a>GUI_ANIM_GetItemDataLocked</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gui_anim.o(.text.GUI_ANIM_GetItemDataLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_ANIM_GetItemDataLocked &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFunc
</UL>

<P><STRONG><a name="[451]"></a>GUI_ANIM_GetNext</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_anim.o(.text.GUI_ANIM_GetNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_ANIM_GetNext
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimStop
</UL>

<P><STRONG><a name="[452]"></a>GUI_ANIM_IsRunning</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gui_anim.o(.text.GUI_ANIM_IsRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_ANIM_IsRunning &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimStart
</UL>

<P><STRONG><a name="[453]"></a>GUI_ANIM_SetItemData</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gui_anim.o(.text.GUI_ANIM_SetItemData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_ANIM_SetItemData &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimCreate
</UL>

<P><STRONG><a name="[455]"></a>GUI_ANIM_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_anim.o(.text.GUI_ANIM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_ANIM_Start &rArr; _Start &rArr; _ResetItems &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecAnimations
</UL>

<P><STRONG><a name="[457]"></a>GUI_ANIM_StartEx</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gui_anim.o(.text.GUI_ANIM_StartEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_ANIM_StartEx &rArr; _Start &rArr; _ResetItems &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[458]"></a>GUI_ANIM_Stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_anim.o(.text.GUI_ANIM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_ANIM_Stop &rArr; _StopAuto &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopAuto
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimStop
</UL>

<P><STRONG><a name="[45a]"></a>GUI_ANIM_StopById</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_anim.o(.text.GUI_ANIM_StopById))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_ANIM_StopById &rArr; _StopAuto &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopAuto
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GethAnim
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimStop
</UL>

<P><STRONG><a name="[827]"></a>GUI_AddDecShift</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, gui_common.o(.text.GUI_AddDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateBuffer
</UL>

<P><STRONG><a name="[45b]"></a>GUI_AddHex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_AddHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_AddHex
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
</UL>

<P><STRONG><a name="[3ac]"></a>GUI_AddRect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_common.o(.text.GUI_AddRect))
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNonExistingCharacter
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[826]"></a>GUI_AddSign</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_common.o(.text.GUI_AddSign))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateBuffer
</UL>

<P><STRONG><a name="[45e]"></a>GUI_BMP_Draw</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_bmp.o(.text.GUI_BMP_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = GUI_BMP_Draw &rArr; GUI_BMP_DrawEx &rArr; _DrawBitmap_16bpp &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
</UL>

<P><STRONG><a name="[45f]"></a>GUI_BMP_DrawEx</STRONG> (Thumb, 1348 bytes, Stack size 200 bytes, gui_bmp.o(.text.GUI_BMP_DrawEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = GUI_BMP_DrawEx &rArr; _DrawBitmap_16bpp &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__Init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__ReadPalette
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEarlyOut
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetClipParam
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_32bpp
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_Draw
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
</UL>

<P><STRONG><a name="[46a]"></a>GUI_BMP_GetXSize</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, gui_bmp.o(.text.GUI_BMP_GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_BMP_GetXSize
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
</UL>

<P><STRONG><a name="[46b]"></a>GUI_BMP_GetXSizeEx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, gui_bmp.o(.text.GUI_BMP_GetXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_BMP_GetXSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
</UL>

<P><STRONG><a name="[46d]"></a>GUI_BMP_GetYSize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_bmp.o(.text.GUI_BMP_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_BMP_GetYSize
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
</UL>

<P><STRONG><a name="[46e]"></a>GUI_BMP_GetYSizeEx</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gui_bmp.o(.text.GUI_BMP_GetYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_BMP_GetYSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
</UL>

<P><STRONG><a name="[ce]"></a>GUI_BMP__GetData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_bmp.o(.text.GUI_BMP__GetData))
<BR>[Address Reference Count : 1]<UL><LI> gui_bmp.o(.text.GUI_BMP_Draw)
</UL>
<P><STRONG><a name="[460]"></a>GUI_BMP__Init</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, gui_bmp.o(.text.GUI_BMP__Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_BMP__Init &rArr; _ManageBitfields &rArr; GUI_BMP__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__ReadData
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageBitfields
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
</UL>

<P><STRONG><a name="[46f]"></a>GUI_BMP__ReadData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_bmp.o(.text.GUI_BMP__ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_BMP__ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__Init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageBitfields
</UL>

<P><STRONG><a name="[462]"></a>GUI_BMP__ReadPalette</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, gui_bmp.o(.text.GUI_BMP__ReadPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_BMP__ReadPalette &rArr; OUTLINED_FUNCTION_3 &rArr; GUI_BMP__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
</UL>

<P><STRONG><a name="[5b2]"></a>GUI_BlendColors</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, gui_common.o(.text.GUI_BlendColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_BlendColors
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBlendBkColorEx
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBlendColorEx
</UL>

<P><STRONG><a name="[473]"></a>GUI_CURSOR_SetPositionEx</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gui_cursor.o(.text.GUI_CURSOR_SetPositionEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GUI_CURSOR_SetPositionEx &rArr; GUI_SPRITE_SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCursorLayer
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[79f]"></a>GUI_CalcColorDist</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_CalcColorDist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_CalcColorDist
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[3b3]"></a>GUI_Clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_core.o(.text.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = GUI_Clear &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_CLEAR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[122]"></a>GUI_ClearRect</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, gui_core.o(.text.GUI_ClearRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(.text.WIDGET__FillStringInRectEx)
</UL>
<P><STRONG><a name="[3af]"></a>GUI_ClearRectEx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_core.o(.text.GUI_ClearRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = GUI_ClearRectEx &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRectEx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[478]"></a>GUI_CopyRect</STRONG> (Thumb, 680 bytes, Stack size 72 bytes, gui_copyrect.o(.text.GUI_CopyRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = GUI_CopyRect &rArr; OUTLINED_FUNCTION_0 &rArr; _CopyRect &rArr; _CopyHLines &rArr; GUI_DrawPixel &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_COPY_RECT
</UL>

<P><STRONG><a name="[2ec]"></a>GUI_CreateBitmapFromStream</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, gui_streamcreate.o(.text.GUI_CreateBitmapFromStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_CreateBitmapFromStream &rArr; GUI__ReadHeaderFromStream
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CreateBitmapFromStream
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReadHeaderFromStream
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapINT
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTA
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapAuto
</UL>

<P><STRONG><a name="[598]"></a>GUI_DCACHE_Clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_core.o(.text.GUI_DCACHE_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_EndEx
</UL>

<P><STRONG><a name="[481]"></a>GUI_DEVICE_Create</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gui_device.o(.text.GUI_DEVICE_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[482]"></a>GUI_DEVICE_CreateAndLink</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_device.o(.text.GUI_DEVICE_CreateAndLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSelEx
</UL>

<P><STRONG><a name="[484]"></a>GUI_DEVICE_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(.text.GUI_DEVICE_Delete))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnExit
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSelEx
</UL>

<P><STRONG><a name="[483]"></a>GUI_DEVICE_Link</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gui_device.o(.text.GUI_DEVICE_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAlpha
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[485]"></a>GUI_DEVICE_LinkDevices</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_device.o(.text.GUI_DEVICE_LinkDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_DEVICE_LinkDevices &rArr; GUI_DEVICE_Link
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[4d5]"></a>GUI_DEVICE_Unlink</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gui_device.o(.text.GUI_DEVICE_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_DEVICE_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAlpha
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSelEx
</UL>

<P><STRONG><a name="[538]"></a>GUI_DEVICE_UnlinkTaskDevices</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_device.o(.text.GUI_DEVICE_UnlinkTaskDevices))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[5af]"></a>GUI_DEVICE__GetpDevice</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_device.o(.text.GUI_DEVICE__GetpDevice))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[543]"></a>GUI_DEVICE__GetpDriver</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_device.o(.text.GUI_DEVICE__GetpDriver))
<BR><BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpfColor2IndexEx
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPaletteEx
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_EndEx
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_BeginEx
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ExitEx
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSelEx
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
</UL>

<P><STRONG><a name="[37a]"></a>GUI_DRAW__Draw</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, gui_draw.o(.text.GUI_DRAW__Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_DRAW__Draw &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
</UL>

<P><STRONG><a name="[486]"></a>GUI_DispString</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, gui_dispstring.o(.text.GUI_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[3b0]"></a>GUI_DispStringAt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_dispstring.o(.text.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRectEx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[375]"></a>GUI_DispStringInRect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_dispstring.o(.text.GUI_DispStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
</UL>

<P><STRONG><a name="[48e]"></a>GUI_DispStringInRectEx</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, gui_dispstringinrectex.o(.text.GUI_DispStringInRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = GUI_DispStringInRectEx &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotation
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
</UL>

<P><STRONG><a name="[48d]"></a>GUI_DispStringInRectMax</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, gui_dispstring.o(.text.GUI_DispStringInRectMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRect
</UL>

<P><STRONG><a name="[491]"></a>GUI_DispStringInRectWrap</STRONG> (Thumb, 508 bytes, Stack size 80 bytes, gui_dispstring.o(.text.GUI_DispStringInRectWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = GUI_DispStringInRectWrap &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsDisp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
</UL>

<P><STRONG><a name="[496]"></a>GUI_DispStringInRectWrapEx</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, gui_dispstring.o(.text.GUI_DispStringInRectWrapEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = GUI_DispStringInRectWrapEx &rArr; GUI_DispStringInRectEx &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsDisp
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
</UL>

<P><STRONG><a name="[498]"></a>GUI_DrawArcHR</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gui_arc.o(.text.GUI_DrawArcHR))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GUI_DrawArcHR &rArr; OUTLINED_FUNCTION_3 &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_ARC
</UL>

<P><STRONG><a name="[2ed]"></a>GUI_DrawBitmap</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_drawbitmap.o(.text.GUI_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapINT
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
</UL>

<P><STRONG><a name="[49c]"></a>GUI_DrawCircle</STRONG> (Thumb, 388 bytes, Stack size 112 bytes, gui_circ.o(.text.GUI_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GUI_DrawCircle &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircle
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_CIRCLE
</UL>

<P><STRONG><a name="[49e]"></a>GUI_DrawEllipseXL</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, gui_circ.o(.text.GUI_DrawEllipseXL))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GUI_DrawEllipseXL &rArr; _DrawEllipse &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawEllipse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_ELLIPSE
</UL>

<P><STRONG><a name="[4a0]"></a>GUI_DrawFrame</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, gui_2dlib.o(.text.GUI_DrawFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GUI_DrawFrame &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFrameEx
</UL>

<P><STRONG><a name="[4a2]"></a>GUI_DrawFrameEx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gui_2dlib.o(.text.GUI_DrawFrameEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GUI_DrawFrameEx &rArr; GUI_DrawFrame &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
</UL>

<P><STRONG><a name="[4a3]"></a>GUI_DrawGradientH</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, gui_drawgradient.o(.text.GUI_DrawGradientH))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GUI_DrawGradientH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_GRADIENT_H
</UL>

<P><STRONG><a name="[4a7]"></a>GUI_DrawGradientMH</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, gui_drawgradient.o(.text.GUI_DrawGradientMH))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GUI_DrawGradientMH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMHEx
</UL>

<P><STRONG><a name="[4a9]"></a>GUI_DrawGradientMHEx</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, gui_drawgradient.o(.text.GUI_DrawGradientMHEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GUI_DrawGradientMHEx &rArr; GUI_DrawGradientMH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMH
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
</UL>

<P><STRONG><a name="[4ab]"></a>GUI_DrawGradientMV</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, gui_drawgradient.o(.text.GUI_DrawGradientMV))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GUI_DrawGradientMV &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMVEx
</UL>

<P><STRONG><a name="[4ac]"></a>GUI_DrawGradientMVEx</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, gui_drawgradient.o(.text.GUI_DrawGradientMVEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GUI_DrawGradientMVEx &rArr; GUI_DrawGradientMV &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMV
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
</UL>

<P><STRONG><a name="[4ad]"></a>GUI_DrawGradientRoundedH</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, gui_drawgradientrounded.o(.text.GUI_DrawGradientRoundedH))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = GUI_DrawGradientRoundedH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_GRADIENT_ROUNDED_H
</UL>

<P><STRONG><a name="[4b1]"></a>GUI_DrawGradientRoundedMH</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, gui_drawgradientrounded.o(.text.GUI_DrawGradientRoundedMH))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GUI_DrawGradientRoundedMH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMHEx
</UL>

<P><STRONG><a name="[4b5]"></a>GUI_DrawGradientRoundedMHEx</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, gui_drawgradientrounded.o(.text.GUI_DrawGradientRoundedMHEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GUI_DrawGradientRoundedMHEx &rArr; GUI_DrawGradientRoundedMH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMH
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
</UL>

<P><STRONG><a name="[4b7]"></a>GUI_DrawGradientRoundedMV</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, gui_drawgradientrounded.o(.text.GUI_DrawGradientRoundedMV))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = GUI_DrawGradientRoundedMV &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMVEx
</UL>

<P><STRONG><a name="[4b8]"></a>GUI_DrawGradientRoundedMVEx</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, gui_drawgradientrounded.o(.text.GUI_DrawGradientRoundedMVEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GUI_DrawGradientRoundedMVEx &rArr; GUI_DrawGradientRoundedMV &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMV
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
</UL>

<P><STRONG><a name="[4b9]"></a>GUI_DrawGradientRoundedV</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, gui_drawgradientrounded.o(.text.GUI_DrawGradientRoundedV))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = GUI_DrawGradientRoundedV &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_GRADIENT_ROUNDED_V
</UL>

<P><STRONG><a name="[379]"></a>GUI_DrawGradientV</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, gui_drawgradient.o(.text.GUI_DrawGradientV))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GUI_DrawGradientV &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_GRADIENT_V
</UL>

<P><STRONG><a name="[36e]"></a>GUI_DrawHLine</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gui_drawlib.o(.text.GUI_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GUI_DrawHLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_HLINE
</UL>

<P><STRONG><a name="[4bb]"></a>GUI_DrawLine</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gui_drawline.o(.text.GUI_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_LINE
</UL>

<P><STRONG><a name="[4bc]"></a>GUI_DrawLineRel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gui_drawline.o(.text.GUI_DrawLineRel))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUI_DrawLineRel &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRel
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_LINE_REL
</UL>

<P><STRONG><a name="[4bf]"></a>GUI_DrawLineTo</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gui_drawline.o(.text.GUI_DrawLineTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUI_DrawLineTo &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_MoveTo
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_LINE_TO
</UL>

<P><STRONG><a name="[4c1]"></a>GUI_DrawPieHR</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gui_drawlib.o(.text.GUI_DrawPieHR))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GUI_DrawPieHR &rArr; _DrawPie &rArr; GL_DrawArcHR &rArr; OUTLINED_FUNCTION_4 &rArr; _DrawArc &rArr; GUI__SinHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPie
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_PIE
</UL>

<P><STRONG><a name="[4c4]"></a>GUI_DrawPixel</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gui_drawlib.o(.text.GUI_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = GUI_DrawPixel &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_PIXEL
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
</UL>

<P><STRONG><a name="[4c6]"></a>GUI_DrawPoint</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gui_drawlib.o(.text.GUI_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = GUI_DrawPoint &rArr; OUTLINED_FUNCTION_0 &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_POINT
</UL>

<P><STRONG><a name="[378]"></a>GUI_DrawRect</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, gui_2dlib.o(.text.GUI_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = GUI_DrawRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRectEx
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_RECT
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[2e7]"></a>GUI_DrawRectEx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_2dlib.o(.text.GUI_DrawRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = GUI_DrawRectEx &rArr; GUI_DrawRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawFocusRect
</UL>

<P><STRONG><a name="[4c7]"></a>GUI_DrawRoundedFrame</STRONG> (Thumb, 432 bytes, Stack size 112 bytes, gui_drawroundedframe.o(.text.GUI_DrawRoundedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = GUI_DrawRoundedFrame &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_ROUNDED_FRAME
</UL>

<P><STRONG><a name="[4c8]"></a>GUI_DrawRoundedRect</STRONG> (Thumb, 468 bytes, Stack size 104 bytes, gui_drawroundedrect.o(.text.GUI_DrawRoundedRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedFrame
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_ROUNDED_RECT
</UL>

<P><STRONG><a name="[16]"></a>GUI_DrawStreamedBitmapAuto</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, gui_stream.o(.text.GUI_DrawStreamedBitmapAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GUI_DrawStreamedBitmapAuto &rArr; _DrawBitmap &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateBitmapFromStream
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw_streamed.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[17]"></a>GUI_DrawStreamedBitmapExAuto</STRONG> (Thumb, 512 bytes, Stack size 128 bytes, gui_stream.o(.text.GUI_DrawStreamedBitmapExAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = GUI_DrawStreamedBitmapExAuto &rArr; _DrawStreamedBitmapExLoop &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReadHeaderFromStream
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPaletteEx
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExLoop
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE32_SetFunc
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE16_SetFunc
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE8_SetFunc
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE4_SetFunc
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE1_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_draw_streamed.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[36f]"></a>GUI_DrawVLine</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gui_drawlib.o(.text.GUI_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = GUI_DrawVLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_VLINE
</UL>

<P><STRONG><a name="[4d4]"></a>GUI_EnableAlpha</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, gui_enablealpha.o(.text.GUI_EnableAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_EnableAlpha &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawColors
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_ENABLE_ALPHA
</UL>

<P><STRONG><a name="[4d6]"></a>GUI_Exec1</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_Exec1))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = GUI_Exec1 &rArr; WM_Exec &rArr; _Exec1Draw &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[4d8]"></a>GUI_FillCircle</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gui_circ.o(.text.GUI_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = GUI_FillCircle &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_FILL_CIRCLE
</UL>

<P><STRONG><a name="[4d9]"></a>GUI_FillEllipseXL</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, gui_circ.o(.text.GUI_FillEllipseXL))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = GUI_FillEllipseXL &rArr; _FillEllipse &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillEllipse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_FILL_ELLIPSE
</UL>

<P><STRONG><a name="[377]"></a>GUI_FillRect</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, gui_drawlib.o(.text.GUI_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GUI_FillRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawColors
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_FILL_RECT
</UL>

<P><STRONG><a name="[4db]"></a>GUI_FillRectEx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_drawlib.o(.text.GUI_FillRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GUI_FillRectEx &rArr; GUI_FillRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
</UL>

<P><STRONG><a name="[4dc]"></a>GUI_FillRoundedRect</STRONG> (Thumb, 332 bytes, Stack size 80 bytes, gui_fillroundedrect.o(.text.GUI_FillRoundedRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = GUI_FillRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRectEx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_FILL_ROUNDED_RECT
</UL>

<P><STRONG><a name="[3ae]"></a>GUI_FillRoundedRectEx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, gui_fillroundedrect.o(.text.GUI_FillRoundedRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GUI_FillRoundedRectEx &rArr; GUI_FillRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[4dd]"></a>GUI_GIF_DrawSub</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, gui_gif.o(.text.GUI_GIF_DrawSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GUI_GIF_DrawSub &rArr; GUI_GIF_DrawSubEx &rArr; GUI_GIF__DrawFromFilePointer &rArr; _ReadExtension &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
</UL>

<P><STRONG><a name="[4de]"></a>GUI_GIF_DrawSubEx</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, gui_gif.o(.text.GUI_GIF_DrawSubEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = GUI_GIF_DrawSubEx &rArr; GUI_GIF__DrawFromFilePointer &rArr; _ReadExtension &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__DrawFromFilePointer
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageDimension
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSub
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
</UL>

<P><STRONG><a name="[4e4]"></a>GUI_GIF_GetImageInfo</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui_gif.o(.text.GUI_GIF_GetImageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GUI_GIF_GetImageInfo &rArr; GUI_GIF_GetImageInfoEx &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
</UL>

<P><STRONG><a name="[4e5]"></a>GUI_GIF_GetImageInfoEx</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gui_gif.o(.text.GUI_GIF_GetImageInfoEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GUI_GIF_GetImageInfoEx &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipLocalColorTable
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadExtension
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSizeAndColorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfo
</UL>

<P><STRONG><a name="[4ec]"></a>GUI_GIF_GetInfo</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui_gif.o(.text.GUI_GIF_GetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_GIF_GetInfo &rArr; GUI_GIF_GetInfoEx &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
</UL>

<P><STRONG><a name="[4ed]"></a>GUI_GIF_GetInfoEx</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, gui_gif.o(.text.GUI_GIF_GetInfoEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_GIF_GetInfoEx &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipLocalColorTable
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadExtension
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSizeAndColorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfo
</UL>

<P><STRONG><a name="[4ee]"></a>GUI_GIF_GetXSize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_gif.o(.text.GUI_GIF_GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_GIF_GetXSize &rArr; GUI_GIF_GetXSizeEx &rArr; _GetValue &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetXSizeEx
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
</UL>

<P><STRONG><a name="[4ef]"></a>GUI_GIF_GetXSizeEx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_gif.o(.text.GUI_GIF_GetXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_GIF_GetXSizeEx &rArr; _GetValue &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetXSize
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
</UL>

<P><STRONG><a name="[4f1]"></a>GUI_GIF_GetYSize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_gif.o(.text.GUI_GIF_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_GIF_GetYSize &rArr; GUI_GIF_GetYSizeEx &rArr; _GetValue &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetYSizeEx
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
</UL>

<P><STRONG><a name="[4f2]"></a>GUI_GIF_GetYSizeEx</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gui_gif.o(.text.GUI_GIF_GetYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_GIF_GetYSizeEx &rArr; _GetValue &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetYSize
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
</UL>

<P><STRONG><a name="[7d6]"></a>GUI_GIF_SetFillTrans</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_gif.o(.text.GUI_GIF_SetFillTrans))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
</UL>

<P><STRONG><a name="[4e2]"></a>GUI_GIF__DrawFromFilePointer</STRONG> (Thumb, 372 bytes, Stack size 128 bytes, gui_gif.o(.text.GUI_GIF__DrawFromFilePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_GIF__DrawFromFilePointer &rArr; _ReadExtension &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadExtension
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadColorMap
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSizeAndColorTable
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
</UL>

<P><STRONG><a name="[dc]"></a>GUI_GIF__GetData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_gif.o(.text.GUI_GIF__GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_GIF__GetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_gif.o(.text.GUI_GIF_GetYSize)
</UL>
<P><STRONG><a name="[4f4]"></a>GUI_GIF__GetNextByte</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, gui_gif.o(.text.GUI_GIF__GetNextByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_GIF__GetNextByte &rArr; _GetNextCode &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextCode
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFromDataBlock
</UL>

<P><STRONG><a name="[7d2]"></a>GUI_GIF__InitLZW</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, gui_gif.o(.text.GUI_GIF__InitLZW))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_GIF__InitLZW
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFromDataBlock
</UL>

<P><STRONG><a name="[69d]"></a>GUI_GIF__ReadData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_gif.o(.text.GUI_GIF__ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_GIF__ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipLocalColorTable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFromDataBlock
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageDimension
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadExtension
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataBlock
</UL>

<P><STRONG><a name="[7b5]"></a>GUI_GetAlpha</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_setalpha.o(.text.GUI_GetAlpha))
<BR><BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7b6]"></a>GUI_GetAlphaEx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_setalpha.o(.text.GUI_GetAlphaEx))
<BR><BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[4f6]"></a>GUI_GetBitmapPixelIndex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_GetBitmapPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_GetBitmapPixelIndex &rArr; GUI_GetBitmapPixelIndexEx
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndexEx
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndexAlpha
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndex
</UL>

<P><STRONG><a name="[4f7]"></a>GUI_GetBitmapPixelIndexEx</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_GetBitmapPixelIndexEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_GetBitmapPixelIndexEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
</UL>

<P><STRONG><a name="[479]"></a>GUI_GetBitsPerPixelEx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_getex.o(.text.GUI_GetBitsPerPixelEx))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CopyRect
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_Start
</UL>

<P><STRONG><a name="[409]"></a>GUI_GetBkColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_GetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetBkColor &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRectEx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__ClearLine
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[3a8]"></a>GUI_GetCharDistX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_char.o(.text.GUI_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetCharWrap
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetWordWrap
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetCursorPosChar
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetCursorPosX
</UL>

<P><STRONG><a name="[4fa]"></a>GUI_GetCharDistXEx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_char.o(.text.GUI_GetCharDistXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
</UL>

<P><STRONG><a name="[372]"></a>GUI_GetClientRect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_common.o(.text.GUI_GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_GetClientRect &rArr; WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[2e4]"></a>GUI_GetColor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_GetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetColor &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawFocusRect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__ClearLine
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEAlpha
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[474]"></a>GUI_GetCursorLayer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_selectlayer.o(.text.GUI_GetCursorLayer))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[4fc]"></a>GUI_GetDrawMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_GetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetDrawMode &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
</UL>

<P><STRONG><a name="[4fd]"></a>GUI_GetFallbackFont</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_GetFallbackFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_GetFallbackFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNonExistingCharWidth
</UL>

<P><STRONG><a name="[4ff]"></a>GUI_GetFont</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_GetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetFont &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNonExistingCharWidth
</UL>

<P><STRONG><a name="[487]"></a>GUI_GetFontDistY</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gui_char.o(.text.GUI_GetFontDistY))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
</UL>

<P><STRONG><a name="[500]"></a>GUI_GetLayerPosEx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_selectlayer.o(.text.GUI_GetLayerPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_GetLayerPosEx &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[503]"></a>GUI_GetOrg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_GetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_GetOrg &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[3e7]"></a>GUI_GetPenSize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_GetPenSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetPenSize &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircleAA_HiRes
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPie
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawEllipse
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillEllipse
</UL>

<P><STRONG><a name="[505]"></a>GUI_GetPixelIndex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_getp.o(.text.GUI_GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_GetPixelIndex &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
</UL>

<P><STRONG><a name="[30b]"></a>GUI_GetStreamedBitmapInfoEx</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, gui_stream.o(.text.GUI_GetStreamedBitmapInfoEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_GetStreamedBitmapInfoEx &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReadHeaderFromStream
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetStreamedBitmapInfoEXT
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
</UL>

<P><STRONG><a name="[3bf]"></a>GUI_GetStringDistX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_dispstring.o(.text.GUI_GetStringDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetStringDistX &rArr; GUI__GetNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CalcTextRect
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
</UL>

<P><STRONG><a name="[507]"></a>GUI_GetStringDistXEx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_dispstring.o(.text.GUI_GetStringDistXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_GetStringDistXEx &rArr; GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
</UL>

<P><STRONG><a name="[44b]"></a>GUI_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_time.o(.text.GUI_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_GetTime &rArr; GUI_X_GetTime &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Exec
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMotionTagR
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMotionTagXY
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
</UL>

<P><STRONG><a name="[825]"></a>GUI_GetTimeSlice</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_time.o(.text.GUI_GetTimeSlice))
<BR><BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartMotionTimer
</UL>

<P><STRONG><a name="[488]"></a>GUI_GetYAdjust</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gui_char.o(.text.GUI_GetYAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[573]"></a>GUI_GetpfColor2IndexEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text.GUI_GetpfColor2IndexEx))
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[572]"></a>GUI_GetpfIndex2ColorEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text.GUI_GetpfIndex2ColorEx))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[405]"></a>GUI_GotoXY</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_GotoXY &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitEx
</UL>

<P><STRONG><a name="[313]"></a>GUI_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, gui_core.o(.text.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GUI_Init &rArr; WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplaySize
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
</UL>

<P><STRONG><a name="[513]"></a>GUI_InvertRect</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, gui_drawlib.o(.text.GUI_InvertRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = GUI_InvertRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_INVERT_RECT
</UL>

<P><STRONG><a name="[514]"></a>GUI_JPEG_Draw</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui_jpeg.o(.text.GUI_JPEG_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = GUI_JPEG_Draw &rArr; GUI_JPEG_DrawEx &rArr; GUI_JPEG__DecodeLine &rArr; _DecodeNextRow &rArr; _ProcessRestart &rArr; _InitBitBuffer &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
</UL>

<P><STRONG><a name="[515]"></a>GUI_JPEG_DrawEx</STRONG> (Thumb, 572 bytes, Stack size 120 bytes, gui_jpeg.o(.text.GUI_JPEG_DrawEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = GUI_JPEG_DrawEx &rArr; GUI_JPEG__DecodeLine &rArr; _DecodeNextRow &rArr; _ProcessRestart &rArr; _InitBitBuffer &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelIndex
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__GetInfoEx
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__DecodeLine
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__Free
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_Draw
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
</UL>

<P><STRONG><a name="[51c]"></a>GUI_JPEG_GetInfo</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gui_jpeg.o(.text.GUI_JPEG_GetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_JPEG_GetInfo &rArr; GUI_JPEG_GetInfoEx &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfoEx
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
</UL>

<P><STRONG><a name="[51d]"></a>GUI_JPEG_GetInfoEx</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gui_jpeg.o(.text.GUI_JPEG_GetInfoEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_JPEG_GetInfoEx &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__GetInfoEx
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
</UL>

<P><STRONG><a name="[518]"></a>GUI_JPEG__DecodeLine</STRONG> (Thumb, 2100 bytes, Stack size 216 bytes, gui_jpeg.o(.text.GUI_JPEG__DecodeLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GUI_JPEG__DecodeLine &rArr; _DecodeNextRow &rArr; _ProcessRestart &rArr; _InitBitBuffer &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeNextRow
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadNextRow
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadMarkers
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
</UL>

<P><STRONG><a name="[51b]"></a>GUI_JPEG__Free</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gui_jpeg.o(.text.GUI_JPEG__Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_JPEG__Free &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
</UL>

<P><STRONG><a name="[dd]"></a>GUI_JPEG__GetData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_jpeg.o(.text.GUI_JPEG__GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_JPEG__GetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_jpeg.o(.text.GUI_JPEG_GetInfo)
</UL>
<P><STRONG><a name="[516]"></a>GUI_JPEG__GetInfoEx</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gui_jpeg.o(.text.GUI_JPEG__GetInfoEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUI_JPEG__GetInfoEx &rArr; GUI_JPEG__ReadInfo &rArr; _SkipVariable &rArr; _SkipInputData &rArr; _FillInputBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfoEx
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
</UL>

<P><STRONG><a name="[517]"></a>GUI_JPEG__InitDraw</STRONG> (Thumb, 1040 bytes, Stack size 88 bytes, gui_jpeg.o(.text.GUI_JPEG__InitDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = GUI_JPEG__InitDraw &rArr; _InitScan &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadUntilSOF
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcMCUBlockOrder
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferAlloc
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessRestart
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
</UL>

<P><STRONG><a name="[523]"></a>GUI_JPEG__ReadInfo</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, gui_jpeg.o(.text.GUI_JPEG__ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_JPEG__ReadInfo &rArr; _SkipVariable &rArr; _SkipInputData &rArr; _FillInputBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetU16
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetInt
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipVariable
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadNextMarker
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadFirstMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__GetInfoEx
</UL>

<P><STRONG><a name="[524]"></a>GUI_JPEG__ReadUntilSOF</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, gui_jpeg.o(.text.GUI_JPEG__ReadUntilSOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI_JPEG__ReadUntilSOF &rArr; _ReadMarkers &rArr; _SkipVariable &rArr; _SkipInputData &rArr; _FillInputBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetU16
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetInt
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadMarkers
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadFirstMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
</UL>

<P><STRONG><a name="[305]"></a>GUI_LANG_GetTextBuffered</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_lang.o(.text.GUI_LANG_GetTextBuffered))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetLockedText
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetTextItem
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
</UL>

<P><STRONG><a name="[52f]"></a>GUI_LANG_GetTextBufferedEx</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, gui_lang.o(.text.GUI_LANG_GetTextBufferedEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveEscapeTXT
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveEscapeCSV
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[304]"></a>GUI_LANG_GetTextLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_lang.o(.text.GUI_LANG_GetTextLen))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetLockedText
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetTextItem
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
</UL>

<P><STRONG><a name="[533]"></a>GUI_LANG_GetTextLenEx</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_lang.o(.text.GUI_LANG_GetTextLenEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[342]"></a>GUI_LANG_LoadTextEx</STRONG> (Thumb, 392 bytes, Stack size 96 bytes, gui_lang.o(.text.GUI_LANG_LoadTextEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GUI_LANG_LoadTextEx &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharBuffered
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_TextInitMem
</UL>

<P><STRONG><a name="[783]"></a>GUI_LANG_SetLang</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_lang.o(.text.GUI_LANG_SetLang))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetLang
</UL>

<P><STRONG><a name="[2f3]"></a>GUI_Lock</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gui_task.o(.text.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_LinkDevices
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_UnlinkTaskDevices
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_Create
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_Create
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_Create
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_Create
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_Create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_Create
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_Create
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Exec
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetSkin
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeUTF8
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_SetPara
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFont
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNonExistingCharWidth
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Exec
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecAnimations
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_SetBkColor
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MOTION_SetMoveable
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillCircle
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PreserveTrans
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTA
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTAEx
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreateUser
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMP
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEG
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMPEx
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEGEx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetOffset
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlign
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetTiled
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CreateUser
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveTo
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRel
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedFrame
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPieHR
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MakeModal
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetCoord
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetSize
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExLoop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBufferedEx
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMH
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMV
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMH
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMV
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistXEx
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFrame
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_Encode
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfoEx
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Fill32
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotation
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawEllipse
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillEllipse
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
</UL>

<P><STRONG><a name="[6fd]"></a>GUI_Long2Len</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_Long2Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_Long2Len
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT__SetDec
</UL>

<P><STRONG><a name="[539]"></a>GUI_MEMDEV_Clear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, guidev_clear.o(.text.GUI_MEMDEV_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_MEMDEV_Clear &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[552]"></a>GUI_MEMDEV_CopyToLCD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev.o(.text.GUI_MEMDEV_CopyToLCD))
<BR><BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[53a]"></a>GUI_MEMDEV_CopyToLCDAt</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, guidev.o(.text.GUI_MEMDEV_CopyToLCDAt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[541]"></a>GUI_MEMDEV_Create</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, guidev.o(.text.GUI_MEMDEV_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = GUI_MEMDEV_Create &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
</UL>

<P><STRONG><a name="[542]"></a>GUI_MEMDEV_CreateEx</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, guidev.o(.text.GUI_MEMDEV_CreateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Create
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[545]"></a>GUI_MEMDEV_CreateFixed32</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, guidev_createfixed.o(.text.GUI_MEMDEV_CreateFixed32))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GUI_MEMDEV_CreateFixed32 &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
</UL>

<P><STRONG><a name="[547]"></a>GUI_MEMDEV_Delete</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, guidev.o(.text.GUI_MEMDEV_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScaleAngAlphaSub
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[54a]"></a>GUI_MEMDEV_Draw</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, guidev_banding.o(.text.GUI_MEMDEV_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCD
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
</UL>

<P><STRONG><a name="[553]"></a>GUI_MEMDEV_Fill32</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guidev_clear.o(.text.GUI_MEMDEV_Fill32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_MEMDEV_Fill32 &rArr; GUI_MEMDEV_GetYSize &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
</UL>

<P><STRONG><a name="[556]"></a>GUI_MEMDEV_GetBitsPerPixel</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, guidev.o(.text.GUI_MEMDEV_GetBitsPerPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_MEMDEV_GetBitsPerPixel &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[558]"></a>GUI_MEMDEV_GetColorConv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, guidev_setcolorconv.o(.text.GUI_MEMDEV_GetColorConv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[555]"></a>GUI_MEMDEV_GetDataPtr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, guidev_getdataptr.o(.text.GUI_MEMDEV_GetDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Fill32
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>

<P><STRONG><a name="[559]"></a>GUI_MEMDEV_GetXPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guidev_getpos.o(.text.GUI_MEMDEV_GetXPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_MEMDEV_GetXPos &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__SetCanvas
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTiled
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[554]"></a>GUI_MEMDEV_GetXSize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guidev_getxsize.o(.text.GUI_MEMDEV_GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_MEMDEV_GetXSize &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__SetCanvas
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Fill32
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[55a]"></a>GUI_MEMDEV_GetYPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guidev_getpos.o(.text.GUI_MEMDEV_GetYPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_MEMDEV_GetYPos &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__SetCanvas
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTiled
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[54f]"></a>GUI_MEMDEV_GetYSize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guidev_getysize.o(.text.GUI_MEMDEV_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_MEMDEV_GetYSize &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__SetCanvas
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Fill32
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[176]"></a>GUI_MEMDEV_Paint1Static</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, guidev_staticdevices.o(.text.GUI_MEMDEV_Paint1Static))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = GUI_MEMDEV_Paint1Static &rArr; _CreateStaticDevice &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(.text._Paint1)
</UL>
<P><STRONG><a name="[550]"></a>GUI_MEMDEV_ReduceYSize</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, guidev_reduceysize.o(.text.GUI_MEMDEV_ReduceYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_MEMDEV_ReduceYSize &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[17b]"></a>GUI_MEMDEV_Rotate</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, guidev_rotate.o(.text.GUI_MEMDEV_Rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_MEMDEV_Rotate &rArr; GUI_MEMDEV__Rotate &rArr; _Check &rArr; GUI_MEMDEV_GetBitsPerPixel &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.text._SetScaleAngAlphaSub)
</UL>
<P><STRONG><a name="[17a]"></a>GUI_MEMDEV_RotateHQ</STRONG> (Thumb, 472 bytes, Stack size 120 bytes, guidev_rotate.o(.text.GUI_MEMDEV_RotateHQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GUI_MEMDEV_RotateHQ &rArr; _GetColorHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SinHQ
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CosHQ
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetColorHQ
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_15
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.text._SetScaleAngAlphaSub)
</UL>
<P><STRONG><a name="[540]"></a>GUI_MEMDEV_Select</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, guidev.o(.text.GUI_MEMDEV_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_MEMDEV_Select &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[551]"></a>GUI_MEMDEV_SetOrg</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, guidev_setorg.o(.text.GUI_MEMDEV_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_MEMDEV_SetOrg &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[55c]"></a>GUI_MEMDEV_Write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_write.o(.text.GUI_MEMDEV_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GUI_MEMDEV_Write &rArr; GUI_MEMDEV_WriteAt &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintMemdev
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[810]"></a>GUI_MEMDEV_WriteAlpha</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_writealpha.o(.text.GUI_MEMDEV_WriteAlpha))
<BR><BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintMemdev
</UL>

<P><STRONG><a name="[570]"></a>GUI_MEMDEV_WriteAlphaAt</STRONG> (Thumb, 1184 bytes, Stack size 224 bytes, guidev_writealpha.o(.text.GUI_MEMDEV_WriteAlphaAt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__XY2PTREx
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[56f]"></a>GUI_MEMDEV_WriteAt</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, guidev_write.o(.text.GUI_MEMDEV_WriteAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GUI_MEMDEV_WriteAt &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAt
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTiled
</UL>

<P><STRONG><a name="[581]"></a>GUI_MEMDEV__ClearCanvas</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidev.o(.text.GUI_MEMDEV__ClearCanvas))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_MEMDEV__ClearCanvas &rArr; _EnableWM &rArr; WM__DeactivateEx &rArr; WM_Deactivate &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnableWM
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
</UL>

<P><STRONG><a name="[544]"></a>GUI_MEMDEV__CreateFixed</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, guidev.o(.text.GUI_MEMDEV__CreateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed32
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[55e]"></a>GUI_MEMDEV__Rotate</STRONG> (Thumb, 532 bytes, Stack size 112 bytes, guidev_rotate.o(.text.GUI_MEMDEV__Rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GUI_MEMDEV__Rotate &rArr; _Check &rArr; GUI_MEMDEV_GetBitsPerPixel &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SinHQ
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CosHQ
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinMax
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Rotate
</UL>

<P><STRONG><a name="[5b0]"></a>GUI_MEMDEV__SetAlphaCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_banding.o(.text.GUI_MEMDEV__SetAlphaCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[588]"></a>GUI_MEMDEV__SetCanvas</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, guidev.o(.text.GUI_MEMDEV__SetCanvas))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI_MEMDEV__SetCanvas &rArr; _EnableWM &rArr; WM__DeactivateEx &rArr; WM_Deactivate &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnableWM
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
</UL>

<P><STRONG><a name="[16f]"></a>GUI_MEMDEV__WriteToActiveAlpha</STRONG> (Thumb, 264 bytes, Stack size 96 bytes, guidev_writetoactivealpha.o(.text.GUI_MEMDEV__WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = GUI_MEMDEV__WriteToActiveAlpha &rArr; _WriteToActiveAlpha &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClipY
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClipX
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[580]"></a>GUI_MEMDEV__WriteToActiveAt</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, guidev.o(.text.GUI_MEMDEV__WriteToActiveAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_MEMDEV__WriteToActiveAt &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[53f]"></a>GUI_MEMDEV__WriteToActiveOpaque</STRONG> (Thumb, 1788 bytes, Stack size 136 bytes, guidev_writetoactiveopaque.o(.text.GUI_MEMDEV__WriteToActiveOpaque), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPP
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert8
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert16
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[574]"></a>GUI_MEMDEV__XY2PTREx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, guidev_xy2ptr.o(.text.GUI_MEMDEV__XY2PTREx), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[595]"></a>GUI_MULTIBUF_BeginEx</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gui_multibuf.o(.text.GUI_MULTIBUF_BeginEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MULTIBUF_BeginEx
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MULTIBUF_Begin
</UL>

<P><STRONG><a name="[596]"></a>GUI_MULTIBUF_ConfigEx</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_multibuf.o(.text.GUI_MULTIBUF_ConfigEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_MULTIBUF_ConfigEx
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[615]"></a>GUI_MULTIBUF_ConfirmEx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_multibuf.o(.text.GUI_MULTIBUF_ConfirmEx))
<BR><BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[597]"></a>GUI_MULTIBUF_EndEx</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gui_multibuf.o(.text.GUI_MULTIBUF_EndEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_MULTIBUF_EndEx
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DCACHE_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MULTIBUF_End
</UL>

<P><STRONG><a name="[75b]"></a>GUI_MergeRect</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, gui_common.o(.text.GUI_MergeRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_MergeRect
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[373]"></a>GUI_MoveRect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_common.o(.text.GUI_MoveRect))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Screen2Client
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendants
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[4be]"></a>GUI_MoveRel</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_2dlib.o(.text.GUI_MoveRel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_MoveRel &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_MOVE_REL
</UL>

<P><STRONG><a name="[599]"></a>GUI_MoveTo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_2dlib.o(.text.GUI_MoveTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_MoveTo &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_MOVE_TO
</UL>

<P><STRONG><a name="[41]"></a>GUI_PID_GetState</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gui_pid.o(.text.GUI_PID_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_PID_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wm_touch.o(.text.WM_EnablePID)
<LI> wm_touch.o(.data._pcbGetState)
</UL>
<P><STRONG><a name="[730]"></a>GUI_PID_IsEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_pid.o(.text.GUI_PID_IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[350]"></a>GUI_PID_RegisterReadHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_pid.o(.text.GUI_PID_RegisterReadHook))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__RegisterPID_Hook
</UL>

<P><STRONG><a name="[59a]"></a>GUI_PID_StoreState</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, gui_pid.o(.text.GUI_PID_StoreState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_PID_StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>

<P><STRONG><a name="[59c]"></a>GUI_PollKeyMsg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gui_onkey.o(.text.GUI_PollKeyMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GUI_PollKeyMsg &rArr; WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
</UL>

<P><STRONG><a name="[59e]"></a>GUI_PreserveTrans</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_drawbitmap.o(.text.GUI_PreserveTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_PreserveTrans &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_SetOrMask
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
</UL>

<P><STRONG><a name="[575]"></a>GUI_ReadRectEx</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcd_readrect.o(.text.GUI_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_ReadRectEx &rArr; LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[6cf]"></a>GUI_RectsIntersect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gui_common.o(.text.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRectEx
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>

<P><STRONG><a name="[5a1]"></a>GUI_RestoreContext</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_RestoreContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_RestoreContext &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
</UL>

<P><STRONG><a name="[477]"></a>GUI_SPRITE_SetPosition</STRONG> (Thumb, 1176 bytes, Stack size 176 bytes, gui_sprite.o(.text.GUI_SPRITE_SetPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GUI_SPRITE_SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_14
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDeviceRect
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndexAlpha
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkIndexBuffered
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateBuffer
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[5ad]"></a>GUI_SaveContext_W</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_SaveContext_W))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_SaveContext_W &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
</UL>

<P><STRONG><a name="[548]"></a>GUI_SelectLCD</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SelectLCD &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
</UL>

<P><STRONG><a name="[53d]"></a>GUI_SelectLayer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_selectlayer.o(.text.GUI_SelectLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitEx
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
</UL>

<P><STRONG><a name="[ea]"></a>GUI_SetAlpha</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, gui_setalpha.o(.text.GUI_SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Create
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDevice
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__SetAlphaCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAlpha
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.text.GUI_SetAlpha)
</UL>
<P><STRONG><a name="[3b2]"></a>GUI_SetBkColor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SetBkColor &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBlendBkColorEx
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_SET_BKCOLOR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[7ef]"></a>GUI_SetBlendBkColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_common.o(.text.GUI_SetBlendBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_SET_BLENDBKCOLOR
</UL>

<P><STRONG><a name="[5b1]"></a>GUI_SetBlendBkColorEx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_SetBlendBkColorEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetBlendBkColorEx &rArr; GUI_SetBkColor &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BlendColors
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_SET_BLENDBKCOLOREX
</UL>

<P><STRONG><a name="[7f0]"></a>GUI_SetBlendColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_common.o(.text.GUI_SetBlendColor))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_SET_BLENDCOLOR
</UL>

<P><STRONG><a name="[5b3]"></a>GUI_SetBlendColorEx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_SetBlendColorEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetBlendColorEx &rArr; GUI_SetColor &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BlendColors
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_SET_BLENDCOLOREX
</UL>

<P><STRONG><a name="[2e5]"></a>GUI_SetColor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SetColor &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawFocusRect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawColors
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBlendColorEx
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_SET_COLOR
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__ClearLine
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[5b4]"></a>GUI_SetColorIndex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_SetColorIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SetColorIndex &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CallDrawBitmapHW
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
</UL>

<P><STRONG><a name="[5d4]"></a>GUI_SetDefaultFont</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_core.o(.text.GUI_SetDefaultFont))
<BR><BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
</UL>

<P><STRONG><a name="[3e1]"></a>GUI_SetDrawMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_common.o(.text.GUI_SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_SetDrawMode &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
</UL>

<P><STRONG><a name="[371]"></a>GUI_SetFont</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNonExistingCharWidth
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF_CreateFont
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
</UL>

<P><STRONG><a name="[676]"></a>GUI_SetFuncAlphaBlending</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__alpha.o(.text.GUI_SetFuncAlphaBlending))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[677]"></a>GUI_SetFuncGetpPalConvTable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_core.o(.text.GUI_SetFuncGetpPalConvTable))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[678]"></a>GUI_SetFuncMixColors</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui__alpha.o(.text.GUI_SetFuncMixColors))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[679]"></a>GUI_SetFuncMixColorsBulk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui__alpha.o(.text.GUI_SetFuncMixColorsBulk))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[476]"></a>GUI_SetLayerPosEx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_selectlayer.o(.text.GUI_SetLayerPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetLayerPosEx &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[406]"></a>GUI_SetLineStyle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_SetLineStyle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetLineStyle &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_SET_LINESTYLE
</UL>

<P><STRONG><a name="[511]"></a>GUI_SetOrg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetOrg &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[41c]"></a>GUI_SetPenShape</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_SetPenShape))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetPenShape &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
</UL>

<P><STRONG><a name="[2e3]"></a>GUI_SetPenSize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_SetPenSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetPenSize &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawFocusRect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DRAW_ROUNDED_FRAME
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_SET_PENSIZE
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawPie
</UL>

<P><STRONG><a name="[404]"></a>GUI_SetTextAlign</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_SetTextAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetTextAlign &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>

<P><STRONG><a name="[374]"></a>GUI_SetTextMode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_common.o(.text.GUI_SetTextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_SetTextMode &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRectEx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[348]"></a>GUI_ShowMissingCharacters</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_char.o(.text.GUI_ShowMissingCharacters))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_X_Setup
</UL>

<P><STRONG><a name="[59b]"></a>GUI_SignalEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_waitevent.o(.text.GUI_SignalEvent))
<BR><BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[5b7]"></a>GUI_StoreKey</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_onkey.o(.text.GUI_StoreKey))
<BR><BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[5b8]"></a>GUI_TIMER_Create</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, gui_timer.o(.text.GUI_TIMER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartMotionTimer
</UL>

<P><STRONG><a name="[5bb]"></a>GUI_TIMER_Delete</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gui_timer.o(.text.GUI_TIMER_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveToNearestSnapPosition
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopMotionOnHit
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[eb]"></a>GUI_TIMER_Exec</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, gui_timer.o(.text.GUI_TIMER_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI_TIMER_Exec &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_timer.o(.text.GUI_TIMER_Create)
</UL>
<P><STRONG><a name="[5be]"></a>GUI_TIMER_GetFlag</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gui_timer.o(.text.GUI_TIMER_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_TIMER_GetFlag &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[5bf]"></a>GUI_TIMER_GetPeriod</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_timer.o(.text.GUI_TIMER_GetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_TIMER_GetPeriod &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
</UL>

<P><STRONG><a name="[5c0]"></a>GUI_TIMER_Restart</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gui_timer.o(.text.GUI_TIMER_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI_TIMER_Restart &rArr; _Link &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unlink
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartMotionTimer
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[5c1]"></a>GUI_TIMER_SetPeriod</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_timer.o(.text.GUI_TIMER_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_TIMER_SetPeriod &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartMotionTimer
</UL>

<P><STRONG><a name="[5c2]"></a>GUI_TIMER__GetFirstTimer</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gui_timer.o(.text.GUI_TIMER__GetFirstTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_TIMER__GetFirstTimer &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[5c3]"></a>GUI_TIMER__GetNextTimerLin</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gui_timer.o(.text.GUI_TIMER__GetNextTimerLin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_TIMER__GetNextTimerLin &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
</UL>

<P><STRONG><a name="[5c4]"></a>GUI_TOUCH_Calibrate</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gui_x_touch.o(.text.GUI_TOUCH_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_TOUCH_Calibrate &rArr; LCD_GetYSize &rArr; LCD_GetYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[5c5]"></a>GUI_TOUCH_Exec</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, gui_x_touch.o(.text.GUI_TOUCH_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GUI_TOUCH_Exec &rArr; Touch_GetState &rArr; BSP_TS_GetState &rArr; ft5336_TS_GetTouchInfo &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_GetState
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreState
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Tick
</UL>

<P><STRONG><a name="[5c8]"></a>GUI_TOUCH_Initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_touch.o(.text.GUI_TOUCH_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_TOUCH_Initialize &rArr; Touch_Initialize &rArr; BSP_TS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
</UL>

<P><STRONG><a name="[67a]"></a>GUI_TOUCH_SetOrientation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_x_touch.o(.text.GUI_TOUCH_SetOrientation))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[5c7]"></a>GUI_TOUCH_StoreState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_touch_storestate.o(.text.GUI_TOUCH_StoreState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_TOUCH_StoreState &rArr; GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreStateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[5ca]"></a>GUI_TOUCH_StoreStateEx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, gui_touch.o(.text.GUI_TOUCH_StoreStateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_TOUCH_StoreStateEx &rArr; GUI_PID_StoreState
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_StoreState
</UL>

<P><STRONG><a name="[396]"></a>GUI_UC_Encode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_uc.o(.text.GUI_UC_Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_UC_Encode &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ChangeCharacter
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
</UL>

<P><STRONG><a name="[38e]"></a>GUI_UC_GetCharCode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_uc.o(.text.GUI_UC_GetCharCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__GetCurrentChar
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetCursorCharacter
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetCursorPosChar
</UL>

<P><STRONG><a name="[5cb]"></a>GUI_UC_GetCharSize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_uc.o(.text.GUI_UC_GetCharSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_UC_GetCharSize &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteChar
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetCursorPosChar
</UL>

<P><STRONG><a name="[314]"></a>GUI_UC_SetEncodeUTF8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_uc_encodeutf8.o(.text.GUI_UC_SetEncodeUTF8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_UC_SetEncodeUTF8 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
</UL>

<P><STRONG><a name="[392]"></a>GUI_UC__CalcSizeOfChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc.o(.text.GUI_UC__CalcSizeOfChar))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ChangeCharacter
</UL>

<P><STRONG><a name="[5cd]"></a>GUI_UC__DisableLigatures</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_uc.o(.text.GUI_UC__DisableLigatures))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumGlyphs2NumBytes
</UL>

<P><STRONG><a name="[5cc]"></a>GUI_UC__EnableLigatures</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_uc.o(.text.GUI_UC__EnableLigatures))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumGlyphs2NumBytes
</UL>

<P><STRONG><a name="[40a]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gui_uc.o(.text.GUI_UC__GetCharCodeInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawCharEXT
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__HandleEOLine
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetCharWrap
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetWordWrap
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__ClearLine
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetCursorPosX
</UL>

<P><STRONG><a name="[6d7]"></a>GUI_UC__GetLigature</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gui_uc.o(.text.GUI_UC__GetLigature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_UC__GetLigature
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[5f7]"></a>GUI_UC__NumBytes2NumChars</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gui_uc.o(.text.GUI_UC__NumBytes2NumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumBytes2NumChars
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__NOBIDI_GetCursorPosChar
</UL>

<P><STRONG><a name="[48c]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui_uc.o(.text.GUI_UC__NumChars2NumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumGlyphs2NumBytes
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
</UL>

<P><STRONG><a name="[394]"></a>GUI_UC__NumGlyphs2NumBytes</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_uc.o(.text.GUI_UC__NumGlyphs2NumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_UC__NumGlyphs2NumBytes &rArr; GUI_UC__NumChars2NumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__DisableLigatures
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__EnableLigatures
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetText
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__GetCurrentChar
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteChar
</UL>

<P><STRONG><a name="[7af]"></a>GUI_USAGE_AddRect</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, guidev_usage.o(.text.GUI_USAGE_AddRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[583]"></a>GUI_USAGE_BM_Create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, guidev_usagebm.o(.text.GUI_USAGE_BM_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[549]"></a>GUI_USAGE_DecUseCnt</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, guidev_usage.o(.text.GUI_USAGE_DecUseCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>

<P><STRONG><a name="[2dd]"></a>GUI_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_task.o(.text.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_Create
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_Create
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_Create
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_Create
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_Create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_Create
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_Create
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Exec
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetAlign
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetWidth
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValueRange
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRange
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_EnableCCW
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetEnd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStart
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetSkin
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextOffset
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextAlign
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_IsPressed
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_SetEncodeUTF8
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStreamedBitmapInfoEx
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_SetPara
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BroadcastMessage
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeWindow
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFallbackFont
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFont
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNonExistingCharWidth
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_SetItemData
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_GetItemDataLocked
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_IsRunning
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Get
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StopById
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Stop
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Exec
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StartEx
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Start
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Delete
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecAnimations
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_SetBkColor
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetStayOnTop
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MOTION_SetMoveable
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetWrapMode
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetRotation
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetBkColor
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFrameColor
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextOffset
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextAlign
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillCircle
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PreserveTrans
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed32
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTA
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTAEx
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreateUser
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMP
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEG
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_EnableLQ
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMPEx
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEGEx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetOffset
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlign
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetTiled
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAngle
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlpha
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetScale
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_GetValue
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CreateUser
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedEnd
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedValue
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRadius
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetBkColor
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetColor
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetOffset
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColorIndex
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenShape
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveTo
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRel
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedFrame
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPieHR
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawArcHR
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MakeModal
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetCoord
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetSize
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillEllipseXL
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgY
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFlags
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetEnableState
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BroadcastMessage
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapAuto
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExLoop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextLenEx
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBufferedEx
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMH
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMV
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMH
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMV
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistXEx
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFrame
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateEx
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_DecUseCnt
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_BM_Create
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_Encode
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetText
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfoEx
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetPeriod
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Fill32
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Toggle
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Exec
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotation
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawEllipse
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillEllipse
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_ReduceYSize
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetNumChars
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetColorConv
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[492]"></a>GUI_WrapGetNumLines</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gui_dispstring.o(.text.GUI_WrapGetNumLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_WrapGetNumLines &rArr; GUI__WrapGetNumBytesToNextLine &rArr; GUI__WrapGetNumCharsToNextLine &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
</UL>

<P><STRONG><a name="[320]"></a>GUI_XBF_CreateFont</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, gui_xbf.o(.text.GUI_XBF_CreateFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GUI_XBF_CreateFont &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MakeFontEx
</UL>

<P><STRONG><a name="[141]"></a>GUI_XBF__ClearLine</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, gui_xbf.o(.text.GUI_XBF__ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GUI_XBF__ClearLine &rArr; GUI_XBF__GetCharDistX &rArr; GUI__GetNonExistingCharWidth &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiaa_char4ext_xbf.o(.text._DispLine)
</UL>
<P><STRONG><a name="[211]"></a>GUI_XBF__GetCharDistX</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gui_xbf.o(.text.GUI_XBF__GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_XBF__GetCharDistX &rArr; GUI__GetNonExistingCharWidth &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNonExistingCharWidth
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOff
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__ClearLine
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
</UL>
<BR>[Address Reference Count : 4]<UL><LI> guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
<LI> guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
<LI> gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
<LI> gui_xbf_propfrm.o(.rodata.GUI_XBF_APIList_Prop_Frm)
</UL>
<P><STRONG><a name="[214]"></a>GUI_XBF__GetCharInfo</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gui_xbf.o(.text.GUI_XBF__GetCharInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GUI_XBF__GetCharInfo &rArr; GUI_XBF__GetOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOff
</UL>
<BR>[Address Reference Count : 3]<UL><LI> guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
<LI> guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
<LI> gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
</UL>
<P><STRONG><a name="[212]"></a>GUI_XBF__GetFontInfo</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_xbf.o(.text.GUI_XBF__GetFontInfo))
<BR>[Address Reference Count : 4]<UL><LI> guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
<LI> guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
<LI> gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
<LI> gui_xbf_propfrm.o(.rodata.GUI_XBF_APIList_Prop_Frm)
</UL>
<P><STRONG><a name="[5cf]"></a>GUI_XBF__GetOff</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gui_xbf.o(.text.GUI_XBF__GetOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_XBF__GetOff
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetCharInfo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__IsInFont
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetCharDistX
</UL>

<P><STRONG><a name="[5d1]"></a>GUI_XBF__GetOffAndSize</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, gui_xbf.o(.text.GUI_XBF__GetOffAndSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_XBF__GetOffAndSize
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[213]"></a>GUI_XBF__IsInFont</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_xbf.o(.text.GUI_XBF__IsInFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_XBF__IsInFont &rArr; GUI_XBF__GetOff
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOff
</UL>
<BR>[Address Reference Count : 4]<UL><LI> guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
<LI> guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
<LI> gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
<LI> gui_xbf_propfrm.o(.rodata.GUI_XBF_APIList_Prop_Frm)
</UL>
<P><STRONG><a name="[5d2]"></a>GUI_X_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, guiconf.o(.text.GUI_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDefaultFont
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[5d5]"></a>GUI_X_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_rte.o(.text.GUI_X_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_Delay &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[536]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_rte.o(.text.GUI_X_GetTaskId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>

<P><STRONG><a name="[508]"></a>GUI_X_GetTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_rte.o(.text.GUI_X_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_GetTime &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>

<P><STRONG><a name="[50a]"></a>GUI_X_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_x_rte.o(.text.GUI_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI_X_Init &rArr; osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[412]"></a>GUI_X_InitOS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gui_x_rte.o(.text.GUI_X_InitOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_X_InitOS &rArr; osEventFlagsNew
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[537]"></a>GUI_X_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_x_rte.o(.text.GUI_X_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_X_Lock &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[5ce]"></a>GUI_X_Unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_x_rte.o(.text.GUI_X_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_X_Unlock &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[5e0]"></a>GUI__ASinHQ</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gui__sinhq.o(.text.GUI__ASinHQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__ASinHQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ATan2
</UL>

<P><STRONG><a name="[5df]"></a>GUI__ATan2</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, gui__sinhq.o(.text.GUI__ATan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__ATan2 &rArr; GUI__ASinHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ASinHQ
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMotionTagR
</UL>

<P><STRONG><a name="[5e1]"></a>GUI__AllocAlphaBuffer</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, gui__alpha.o(.text.GUI__AllocAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GUI__AllocAlphaBuffer &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEAlpha
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[5e3]"></a>GUI__AlphaPreserveTrans</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_setalpha.o(.text.GUI__AlphaPreserveTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__AlphaPreserveTrans
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_AA_SetOrMask
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[3a3]"></a>GUI__CalcTextRect</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gui__private.o(.text.GUI__CalcTextRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI__CalcTextRect &rArr; GUI_GetFontDistY &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
</UL>

<P><STRONG><a name="[7a0]"></a>GUI__CompactPixelIndices</STRONG> (Thumb, 300 bytes, Stack size 20 bytes, gui__compactpixelindices.o(.text.GUI__CompactPixelIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapLine
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert8
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert16
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushBuffer
</UL>

<P><STRONG><a name="[519]"></a>GUI__CompactPixelIndicesEx</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, gui__compactpixelindices.o(.text.GUI__CompactPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI__CompactPixelIndicesEx &rArr; GUI__ConvertColor2Index
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ConvertColor2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[509]"></a>GUI__Config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_core.o(.text.GUI__Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GUI__Config &rArr; LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Config
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[5e4]"></a>GUI__ConvertColor2Index</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, gui__compactpixelindices.o(.text.GUI__ConvertColor2Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI__ConvertColor2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
</UL>

<P><STRONG><a name="[5e6]"></a>GUI__CopyText</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gui__private.o(.text.GUI__CopyText))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GUI__CopyText &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
</UL>

<P><STRONG><a name="[417]"></a>GUI__CosHQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui__sinhq.o(.text.GUI__CosHQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI__CosHQ &rArr; GUI__SinHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SinHQ
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
</UL>

<P><STRONG><a name="[480]"></a>GUI__CreateBitmapFromStream</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_stream.o(.text.GUI__CreateBitmapFromStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__CreateBitmapFromStream
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateBitmapFromStream
</UL>

<P><STRONG><a name="[48b]"></a>GUI__DispLine</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, gui_charline.o(.text.GUI__DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[490]"></a>GUI__DispStringInRect</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, gui_dispstring.o(.text.GUI__DispStringInRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = GUI__DispStringInRect &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__HandleEOLine
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
</UL>

<P><STRONG><a name="[158]"></a>GUI__DivideRound32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui__private.o(.text.GUI__DivideRound32))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetColorHQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_rotate.o(.text._GetColorHQ)
</UL>
<P><STRONG><a name="[5ea]"></a>GUI__DoAlphaBlending</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, gui__alpha.o(.text.GUI__DoAlphaBlending))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndicesEx
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[5ec]"></a>GUI__DrawBitmap16bpp</STRONG> (Thumb, 764 bytes, Stack size 104 bytes, gui__drawbitmap16bpp.o(.text.GUI__DrawBitmap16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNextPixelAPI
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[5ee]"></a>GUI__DrawBitmapA16bpp</STRONG> (Thumb, 776 bytes, Stack size 128 bytes, gui_drawbitmap_a16.o(.text.GUI__DrawBitmapA16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GUI__DrawBitmapA16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetPixelAlpha
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[1f]"></a>GUI__DrawCharEXT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gui_encext.o(.text.GUI__DrawCharEXT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__DrawCharEXT &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.data.GUI__pfDrawCharEXT)
</UL>
<P><STRONG><a name="[407]"></a>GUI__DrawNonExistingCharacter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gui_char.o(.text.GUI__DrawNonExistingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI__DrawNonExistingCharacter &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFallbackFont
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>

<P><STRONG><a name="[36d]"></a>GUI__DrawTwinArc4</STRONG> (Thumb, 452 bytes, Stack size 96 bytes, gui__drawtwinarc.o(.text.GUI__DrawTwinArc4))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = GUI__DrawTwinArc4 &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTwinArcPara
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
</UL>

<P><STRONG><a name="[7fc]"></a>GUI__ExpandPixelIndices</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, gui__expandpixelindices.o(.text.GUI__ExpandPixelIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI__ExpandPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
</UL>

<P><STRONG><a name="[5eb]"></a>GUI__ExpandPixelIndicesEx</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, gui__expandpixelindices.o(.text.GUI__ExpandPixelIndicesEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__ExpandPixelIndicesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Convert8
</UL>

<P><STRONG><a name="[5e2]"></a>GUI__GetAlphaBuffer</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gui__alpha.o(.text.GUI__GetAlphaBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEAlpha
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[3a7]"></a>GUI__GetCursorCharacter</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui__getcursorpos.o(.text.GUI__GetCursorCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__GetCursorCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[3c0]"></a>GUI__GetCursorPosChar</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui__getcursorpos.o(.text.GUI__GetCursorPosChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__GetCursorPosChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
</UL>

<P><STRONG><a name="[3a9]"></a>GUI__GetCursorPosX</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui__getcursorpos.o(.text.GUI__GetCursorPosX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__GetCursorPosX
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
</UL>

<P><STRONG><a name="[48a]"></a>GUI__GetLineDistX</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gui_charline.o(.text.GUI__GetLineDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUI__GetLineDistX &rArr; GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistXEx
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[489]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gui_charline.o(.text.GUI__GetLineNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WrapGetNumCharsDisp
</UL>

<P><STRONG><a name="[40c]"></a>GUI__GetNonExistingCharWidth</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gui_char.o(.text.GUI__GetNonExistingCharWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI__GetNonExistingCharWidth &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFallbackFont
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNonExistingCharacter
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetCharDistX
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_GetCharDistX
</UL>

<P><STRONG><a name="[38b]"></a>GUI__GetNumChars</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui_uc.o(.text.GUI__GetNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__GetNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetText
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetNumChars
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPosEx
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteChar
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDisplayedText
</UL>

<P><STRONG><a name="[40d]"></a>GUI__GetOverlap</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_charline.o(.text.GUI__GetOverlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI__GetOverlap &rArr; GUI_GetCharDistXEx &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistXEx
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__ClearLine
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
</UL>

<P><STRONG><a name="[5e8]"></a>GUI__HandleEOLine</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui__private.o(.text.GUI__HandleEOLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__HandleEOLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[73c]"></a>GUI__IntersectRect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gui__private.o(.text.GUI__IntersectRect))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
</UL>

<P><STRONG><a name="[331]"></a>GUI__IntersectRects</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, gui__private.o(.text.GUI__IntersectRects))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRectEx
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[3b1]"></a>GUI__InvertRectColors</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, gui_common.o(.text.GUI__InvertRectColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI__InvertRectColors &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelIndex
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[3f1]"></a>GUI__ManageCache</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__managecache.o(.text.GUI__ManageCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCacheEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[5f6]"></a>GUI__ManageCacheEx</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gui__managecache.o(.text.GUI__ManageCacheEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>

<P><STRONG><a name="[22]"></a>GUI__MixColors</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gui__alpha.o(.text.GUI__MixColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__MixColors
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui__alpha.o(.text.GUI_SetFuncMixColors)
<LI> gui__alpha.o(.data.GUI__pfMixColors)
</UL>
<P><STRONG><a name="[23]"></a>GUI__MixColorsBulk</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, gui__alpha.o(.text.GUI__MixColorsBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__MixColorsBulk
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui__alpha.o(.text.GUI_SetFuncMixColorsBulk)
<LI> gui__alpha.o(.data.GUI__pfMixColorsBulk)
</UL>
<P><STRONG><a name="[14]"></a>GUI__NOBIDI_GetCharWrap</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, gui__wrap.o(.text.GUI__NOBIDI_GetCharWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI__NOBIDI_GetCharWrap &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__wrap.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1c]"></a>GUI__NOBIDI_GetCursorCharacter</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui__getcursorpos.o(.text.GUI__NOBIDI_GetCursorCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI__NOBIDI_GetCursorCharacter &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__getcursorpos.o(.data.GUI__GetCursorPos_pfGetCharacter)
</UL>
<P><STRONG><a name="[1d]"></a>GUI__NOBIDI_GetCursorPosChar</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, gui__getcursorpos.o(.text.GUI__NOBIDI_GetCursorPosChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI__NOBIDI_GetCursorPosChar &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumBytes2NumChars
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__getcursorpos.o(.data.GUI__GetCursorPos_pfGetPosChar)
</UL>
<P><STRONG><a name="[1e]"></a>GUI__NOBIDI_GetCursorPosX</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui__getcursorpos.o(.text.GUI__NOBIDI_GetCursorPosX))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GUI__NOBIDI_GetCursorPosX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__getcursorpos.o(.data.GUI__GetCursorPos_pfGetPosX)
</UL>
<P><STRONG><a name="[13]"></a>GUI__NOBIDI_GetWordWrap</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, gui__wrap.o(.text.GUI__NOBIDI_GetWordWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI__NOBIDI_GetWordWrap &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__wrap.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1b]"></a>GUI__NOBIDI_Log2VisBuffered</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_charline.o(.text.GUI__NOBIDI_Log2VisBuffered))
<BR>[Address Reference Count : 1]<UL><LI> gui_charline.o(.data.GUI_CharLine_pfLog2Vis)
</UL>
<P><STRONG><a name="[bb]"></a>GUI__Read16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__private.o(.text.GUI__Read16))
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__Init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetCharDistX
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOffAndSize
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageDimension
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
</UL>
<BR>[Address Reference Count : 7]<UL><LI> appwizard_fileaccess.o(.text.APPW_MakeFontEx)
<LI> gui_xbf.o(.text.GUI_XBF__GetCharInfo)
<LI> gui_stream.o(.text.GUI__ReadHeaderFromStream)
<LI> guiaa_char4ext_xbf.o(.text._DispChar)
<LI> gui_gif.o(.text.GUI_GIF__DrawFromFilePointer)
<LI> gui_xbf_propext.o(.text._DispChar)
<LI> gui_xbf_propfrm.o(.text._DispChar)
</UL>
<P><STRONG><a name="[d1]"></a>GUI__Read32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__private.o(.text.GUI__Read32))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF_CreateFont
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MakeFontEx
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPaletteEx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetYSizeEx
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetXSizeEx
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetYSize
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetXSize
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLine_RGB
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOffAndSize
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOff
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_bmp.o(.text.GUI_BMP__Init)
<LI> gui_bmp.o(.text._ManageBitfields)
</UL>
<P><STRONG><a name="[47f]"></a>GUI__ReadHeaderFromStream</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gui_stream.o(.text.GUI__ReadHeaderFromStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI__ReadHeaderFromStream
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStreamedBitmapInfoEx
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateBitmapFromStream
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
</UL>

<P><STRONG><a name="[45d]"></a>GUI__ReduceRect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui__private.o(.text.GUI__ReduceRect))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddRect
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
</UL>

<P><STRONG><a name="[30f]"></a>GUI__RegisterExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_core.o(.text.GUI__RegisterExit))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MOTION_Enable
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVarWin
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_ConfigEx
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_StoreState
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE32_SetFunc
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE16_SetFunc
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE8_SetFunc
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE4_SetFunc
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__RLE1_SetFunc
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RegisterExit
</UL>

<P><STRONG><a name="[5ef]"></a>GUI__SetPixelAlpha</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gui__private.o(.text.GUI__SetPixelAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI__SetPixelAlpha &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
</UL>

<P><STRONG><a name="[383]"></a>GUI__SetText</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, gui__private.o(.text.GUI__SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GUI__SetText &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetSize
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp_hp
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
</UL>

<P><STRONG><a name="[416]"></a>GUI__SinHQ</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, gui__sinhq.o(.text.GUI__SinHQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI__SinHQ
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CosHQ
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
</UL>

<P><STRONG><a name="[495]"></a>GUI__WrapGetNumBytesToNextLine</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui__wrap.o(.text.GUI__WrapGetNumBytesToNextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUI__WrapGetNumBytesToNextLine &rArr; GUI__WrapGetNumCharsToNextLine &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_WrapGetNumLines
</UL>

<P><STRONG><a name="[493]"></a>GUI__WrapGetNumCharsDisp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui__wrap.o(.text.GUI__WrapGetNumCharsDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI__WrapGetNumCharsDisp &rArr; _WrapGetNumCharsDisp &rArr; GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WrapGetNumCharsDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
</UL>

<P><STRONG><a name="[5fb]"></a>GUI__WrapGetNumCharsToNextLine</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, gui__wrap.o(.text.GUI__WrapGetNumCharsToNextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUI__WrapGetNumCharsToNextLine &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WrapGetNumCharsDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumBytesToNextLine
</UL>

<P><STRONG><a name="[802]"></a>GUI__memset</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gui__private.o(.text.GUI__memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI__memset
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[3fd]"></a>GUI__sqrt32</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui__private.o(.text.GUI__sqrt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedFrame
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ATan2
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTwinArcPara
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveToNearestSnapPositionXY
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AimDestinationXY
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipse
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[794]"></a>GUI__strcmp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui__private.o(.text.GUI__strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
</UL>

<P><STRONG><a name="[5f9]"></a>GUI__strcmp_hp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui__private.o(.text.GUI__strcmp_hp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUI__strcmp_hp &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
</UL>

<P><STRONG><a name="[3f3]"></a>GUI_cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_drawline.o(.text.GUI_cos))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[3f4]"></a>GUI_sin</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gui_drawline.o(.text.GUI_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[35a]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f7xx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[35b]"></a>HAL_DMA_Init</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
</UL>

<P><STRONG><a name="[357]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f7xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Delay
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[359]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 44 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[683]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayOff
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayOn
</UL>

<P><STRONG><a name="[3c8]"></a>HAL_GetTick</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[5fe]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(.text.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>

<P><STRONG><a name="[623]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(.text.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[600]"></a>HAL_I2C_Init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f7xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[602]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, stm32f7xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>

<P><STRONG><a name="[605]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 566 bytes, Stack size 48 bytes, stm32f7xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>

<P><STRONG><a name="[5ff]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(.text.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[601]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[608]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60a]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[67c]"></a>HAL_LTDC_ConfigCLUT</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_ConfigCLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_LTDC_ConfigCLUT
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[680]"></a>HAL_LTDC_ConfigColorKeying</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_ConfigColorKeying))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[60c]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[682]"></a>HAL_LTDC_DisableColorKeying</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_DisableColorKeying))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[681]"></a>HAL_LTDC_EnableCLUT</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_EnableCLUT))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[67f]"></a>HAL_LTDC_EnableColorKeying</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_EnableColorKeying))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[610]"></a>HAL_LTDC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[60e]"></a>HAL_LTDC_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ErrorCallback
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ReloadEventCallback
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_IRQHandler
</UL>

<P><STRONG><a name="[612]"></a>HAL_LTDC_Init</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_LTDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[611]"></a>HAL_LTDC_LineEventCallback</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lcdconf.o(.text.HAL_LTDC_LineEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_ConfirmEx
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[613]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[616]"></a>HAL_LTDC_ProgramLineEvent</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_ProgramLineEvent))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[60f]"></a>HAL_LTDC_ReloadEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_ReloadEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>

<P><STRONG><a name="[614]"></a>HAL_LTDC_SetAddress</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_LineEventCallback
</UL>

<P><STRONG><a name="[617]"></a>HAL_LTDC_SetAlpha</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_SetAlpha &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[618]"></a>HAL_LTDC_SetWindowPosition</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_SetWindowPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_LTDC_SetWindowPosition &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[619]"></a>HAL_LTDC_SetWindowSize</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f7xx_hal_ltdc.o(.text.HAL_LTDC_SetWindowSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_SetWindowSize &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[82b]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82a]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82c]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60b]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[35d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[35c]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_MspInit
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>

<P><STRONG><a name="[609]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[61a]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PWREx_EnableOverDrive &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61b]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1382 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Init
</UL>

<P><STRONG><a name="[61c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 742 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[355]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(.text.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SDRAM_Init &rArr; FMC_SDRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[61e]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_sdram.o(.text.HAL_SDRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[358]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f7xx_hal_sdram.o(.text.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[356]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f7xx_hal_sdram.o(.text.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[268]"></a>ID_SCREEN_00__ID_BUTTON_00__WM_NOTIFICATION_CLICKED</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, id_screen_00_slots.o(.text.ID_SCREEN_00__ID_BUTTON_00__WM_NOTIFICATION_CLICKED))
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.rodata._aAction)
</UL>
<P><STRONG><a name="[269]"></a>ID_SCREEN_00__ID_TIMER_00__APPW_NOTIFICATION_TIMER__ID_TIMER_00__APPW_JOB_START</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, id_screen_00_slots.o(.text.ID_SCREEN_00__ID_TIMER_00__APPW_NOTIFICATION_TIMER__ID_TIMER_00__APPW_JOB_START))
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.rodata._aAction)
</UL>
<P><STRONG><a name="[f1]"></a>IMAGE_Callback</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, image.o(.text.IMAGE_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = IMAGE_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed32
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Create
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Clear
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintMemdev
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.text.IMAGE_CreateUser)
</UL>
<P><STRONG><a name="[627]"></a>IMAGE_CreateUser</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, image.o(.text.IMAGE_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = IMAGE_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_Create
</UL>

<P><STRONG><a name="[629]"></a>IMAGE_EnableLQ</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, image.o(.text.IMAGE_EnableLQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = IMAGE_EnableLQ &rArr; OUTLINED_FUNCTION_3 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[62e]"></a>IMAGE_SetAlign</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, image.o(.text.IMAGE_SetAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = IMAGE_SetAlign &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[62f]"></a>IMAGE_SetAlpha</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, image.o(.text.IMAGE_SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = IMAGE_SetAlpha &rArr; OUTLINED_FUNCTION_3 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[630]"></a>IMAGE_SetAngle</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, image.o(.text.IMAGE_SetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = IMAGE_SetAngle &rArr; OUTLINED_FUNCTION_3 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAngle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[631]"></a>IMAGE_SetBMP</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, image_bmp.o(.text.IMAGE_SetBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IMAGE_SetBMP &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[633]"></a>IMAGE_SetBMPEx</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, image_bmp.o(.text.IMAGE_SetBMPEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IMAGE_SetBMPEx &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[634]"></a>IMAGE_SetDTA</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, image_dta.o(.text.IMAGE_SetDTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IMAGE_SetDTA &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CreateBitmapFromStream
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
</UL>

<P><STRONG><a name="[635]"></a>IMAGE_SetDTAEx</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, image_dta.o(.text.IMAGE_SetDTAEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IMAGE_SetDTAEx &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
</UL>

<P><STRONG><a name="[636]"></a>IMAGE_SetGIF</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, image_gif.o(.text.IMAGE_SetGIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = IMAGE_SetGIF &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfo
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[639]"></a>IMAGE_SetGIFEx</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, image_gif.o(.text.IMAGE_SetGIFEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = IMAGE_SetGIFEx &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[63a]"></a>IMAGE_SetJPEG</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, image_jpeg.o(.text.IMAGE_SetJPEG))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IMAGE_SetJPEG &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[63b]"></a>IMAGE_SetJPEGEx</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, image_jpeg.o(.text.IMAGE_SetJPEGEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IMAGE_SetJPEGEx &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[63c]"></a>IMAGE_SetOffset</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, image.o(.text.IMAGE_SetOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = IMAGE_SetOffset &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[63d]"></a>IMAGE_SetScale</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, image.o(.text.IMAGE_SetScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = IMAGE_SetScale &rArr; OUTLINED_FUNCTION_3 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScale
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[63e]"></a>IMAGE_SetTiled</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, image.o(.text.IMAGE_SetTiled))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = IMAGE_SetTiled &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[625]"></a>IMAGE__FreeAttached</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, image.o(.text.IMAGE__FreeAttached))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IMAGE__FreeAttached &rArr; GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTA
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTAEx
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMP
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEG
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMPEx
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEGEx
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
</UL>

<P><STRONG><a name="[63f]"></a>IMAGE__SetVoid</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, image.o(.text.IMAGE__SetVoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IMAGE__SetVoid &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
</UL>

<P><STRONG><a name="[632]"></a>IMAGE__SetWindowSize</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, image.o(.text.IMAGE__SetWindowSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTA
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTAEx
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMP
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEG
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMPEx
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEGEx
</UL>

<P><STRONG><a name="[641]"></a>Init_GUIThread</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gui_singlethread.o(.text.Init_GUIThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Init_GUIThread &rArr; osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>LCD_AA_MixColors16</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcd_aa.o(.text.LCD_AA_MixColors16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_AA_MixColors16
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(.data.LCD_AA_pfMixColors16)
</UL>
<P><STRONG><a name="[59f]"></a>LCD_AA_SetOrMask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_aa.o(.text.LCD_AA_SetOrMask))
<BR><BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PreserveTrans
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
</UL>

<P><STRONG><a name="[472]"></a>LCD_Color2Index</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(.text.LCD_Color2Index))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetPixelAlpha
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColor
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__ReadPalette
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelAlpha
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CallDrawBitmapHW
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
</UL>

<P><STRONG><a name="[3e2]"></a>LCD_DrawBitmap</STRONG> (Thumb, 484 bytes, Stack size 112 bytes, lcd.o(.text.LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushBuffer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[d4]"></a>LCD_DrawHLine</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lcd.o(.text.LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNonExistingCharacter
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawEllipseXL
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseXL
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipse
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 4]<UL><LI> gui_core.o(.rodata._HL_APIList)
<LI> gui_drawgradient.o(.text.GUI_DrawGradientV)
<LI> gui__drawtwinarc.o(.text.GUI__DrawTwinArc4)
<LI> gui_drawroundedrect.o(.text.GUI_DrawRoundedRect)
</UL>
<P><STRONG><a name="[d5]"></a>LCD_DrawPixel</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcd.o(.text.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_core.o(.rodata._HL_APIList)
<LI> gui_drawroundedrect.o(.text.GUI_DrawRoundedRect)
</UL>
<P><STRONG><a name="[d3]"></a>LCD_DrawVLine</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lcd.o(.text.LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNonExistingCharacter
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawRect
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLine1Ex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawgradientrounded.o(.text.GUI_DrawGradientRoundedMH)
</UL>
<P><STRONG><a name="[643]"></a>LCD_ExitEx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcd.o(.text.LCD_ExitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LCD_ExitEx &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSelEx
</UL>

<P><STRONG><a name="[c7]"></a>LCD_FillRect</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd.o(.text.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNonExistingCharacter
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__ClearLine
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__DrawBitmap_1bpp
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__ClearLine
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearUnusedPixels
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCCW
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap180
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearLine
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
</UL>
<BR>[Address Reference Count : 2]<UL><LI> guiaa_fillroundedrect.o(.text.GUI_AA_FillRoundedRect)
<LI> gui_drawroundedframe.o(.text.GUI_DrawRoundedFrame)
</UL>
<P><STRONG><a name="[571]"></a>LCD_GetBitsPerPixelEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetBitsPerPixelEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetBitsPerPixelEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsPerPixel
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[4f8]"></a>LCD_GetBkColorIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getcolorindex.o(.text.LCD_GetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearUnusedPixels
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFromDataBlock
</UL>

<P><STRONG><a name="[4e1]"></a>LCD_GetColorIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getcolorindex.o(.text.LCD_GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CallDrawBitmapHW
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
</UL>

<P><STRONG><a name="[805]"></a>LCD_GetDevFunc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetDevFunc))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_GetpPalConvTable
</UL>

<P><STRONG><a name="[646]"></a>LCD_GetMirrorXEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetMirrorXEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetMirrorXEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[647]"></a>LCD_GetMirrorYEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetMirrorYEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetMirrorYEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[5ed]"></a>LCD_GetNextPixelAPI</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd_nextpixelapi.o(.text.LCD_GetNextPixelAPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetNextPixelAPI
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[648]"></a>LCD_GetNumColors</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetNumColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetNumColors &rArr; LCD_GetNumColorsEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetIndexMask_0
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[649]"></a>LCD_GetNumColorsEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetNumColorsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetNumColorsEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[64a]"></a>LCD_GetNumLayers</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_getnumdisplays.o(.text.LCD_GetNumLayers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_GetNumLayers
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[64b]"></a>LCD_GetPalette</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPalette &rArr; LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPaletteEx
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2Color_0
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2Index_0
</UL>

<P><STRONG><a name="[64c]"></a>LCD_GetPaletteEx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_getex.o(.text.LCD_GetPaletteEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
</UL>

<P><STRONG><a name="[5f8]"></a>LCD_GetPixelColor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_getpixelcolor.o(.text.LCD_GetPixelColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetPixelAlpha
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[506]"></a>LCD_GetPixelIndex</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lcd_getp.o(.text.LCD_GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
</UL>

<P><STRONG><a name="[502]"></a>LCD_GetPosEx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcd_set.o(.text.LCD_GetPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetPosEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
</UL>

<P><STRONG><a name="[64f]"></a>LCD_GetSwapXYEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetSwapXYEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetSwapXYEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
</UL>

<P><STRONG><a name="[54d]"></a>LCD_GetVXSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetVXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetVXSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[430]"></a>LCD_GetVXSizeMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetVXSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetVXSizeMax &rArr; _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>

<P><STRONG><a name="[54e]"></a>LCD_GetVYSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetVYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetVYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[318]"></a>LCD_GetXSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetXSize &rArr; LCD_GetXSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeCoord
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotationIndex
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[50c]"></a>LCD_GetXSizeDisplay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetXSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>

<P><STRONG><a name="[54b]"></a>LCD_GetXSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetXSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetXSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDeviceRect
</UL>

<P><STRONG><a name="[50e]"></a>LCD_GetXSizeMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetXSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetXSizeMax &rArr; _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[31a]"></a>LCD_GetYSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetYSize &rArr; LCD_GetYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeCoord
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotationIndex
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[50d]"></a>LCD_GetYSizeDisplay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetYSizeDisplay))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>

<P><STRONG><a name="[54c]"></a>LCD_GetYSizeEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetYSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetYSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDeviceRect
</UL>

<P><STRONG><a name="[50f]"></a>LCD_GetYSizeMax</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_GetYSizeMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetYSizeMax &rArr; _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[651]"></a>LCD_GetpPalConvTable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_color.o(.text.LCD_GetpPalConvTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTableUncached
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCD_GetpPalConvTable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFromDataBlock
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[25]"></a>LCD_GetpPalConvTableBM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_color.o(.text.LCD_GetpPalConvTableBM))
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.data.GUI_pfGetpPalConvTable)
</UL>
<P><STRONG><a name="[436]"></a>LCD_GetpPalConvTableUncached</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lcd_color.o(.text.LCD_GetpPalConvTableUncached))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA4
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA2
</UL>

<P><STRONG><a name="[652]"></a>LCD_GetpfColor2IndexEx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_getex.o(.text.LCD_GetpfColor2IndexEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GetpfColor2IndexEx
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
</UL>

<P><STRONG><a name="[435]"></a>LCD_Index2Color</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(.text.LCD_Index2Color))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA4
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA2
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[148]"></a>LCD_Index2Color_444_12</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_444_12_index2color.o(.text.LCD_Index2Color_444_12))
<BR>[Address Reference Count : 2]<UL><LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_12)
<LI> gui_drawbitmap_444.o(.text._DrawBitmap444_12)
</UL>
<P><STRONG><a name="[149]"></a>LCD_Index2Color_444_12_1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_444_12_1_index2color.o(.text.LCD_Index2Color_444_12_1))
<BR>[Address Reference Count : 2]<UL><LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_12_1)
<LI> gui_drawbitmap_444.o(.text._DrawBitmap444_12_1)
</UL>
<P><STRONG><a name="[14a]"></a>LCD_Index2Color_444_16</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_444_16_index2color.o(.text.LCD_Index2Color_444_16))
<BR>[Address Reference Count : 2]<UL><LI> gui_drawbitmap_444.o(.text._DrawBitmap444_16)
<LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_16)
</UL>
<P><STRONG><a name="[144]"></a>LCD_Index2Color_555</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_555_index2color.o(.text.LCD_Index2Color_555))
<BR>[Address Reference Count : 4]<UL><LI> gui_drawbitmap_555.o(.text._DrawBitmap)
<LI> gui_drawbitmap_555.o(.rodata.GUI_BitmapMethods555)
<LI> gui_drawbitmap_a16.o(.text._DrawBitmapA555)
<LI> gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsA555)
</UL>
<P><STRONG><a name="[145]"></a>LCD_Index2Color_565</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_565.o(.text.LCD_Index2Color_565))
<BR><BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>
<BR>[Address Reference Count : 5]<UL><LI> gui_drawbitmap_a16.o(.text._DrawBitmapA565)
<LI> gui_drawbitmap_565.o(.text._DrawBitmap)
<LI> gui_drawbitmap_565.o(.rodata.GUI_BitmapMethods565)
<LI> gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsA565)
<LI> guicc_565.o(.rodata.LCD_API_ColorConv_565)
</UL>
<P><STRONG><a name="[1d8]"></a>LCD_Index2Color_888</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, guicc_888_index2color.o(.text.LCD_Index2Color_888))
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_24.o(.rodata.GUI_BitmapMethods24)
</UL>
<P><STRONG><a name="[143]"></a>LCD_Index2Color_8888</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, guicc_8888_index2color.o(.text.LCD_Index2Color_8888))
<BR>[Address Reference Count : 4]<UL><LI> gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethods8888)
<LI> gui_drawbitmap_8888.o(.text._DrawBitmap_8888)
<LI> lcd_rle32.o(.text._Draw)
<LI> guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
</UL>
<P><STRONG><a name="[14c]"></a>LCD_Index2Color_M444_12</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_m444_12_index2color.o(.text.LCD_Index2Color_M444_12))
<BR>[Address Reference Count : 2]<UL><LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_12)
<LI> gui_drawbitmap_444.o(.text._DrawBitmapM444_12)
</UL>
<P><STRONG><a name="[14d]"></a>LCD_Index2Color_M444_12_1</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_m444_12_1_index2color.o(.text.LCD_Index2Color_M444_12_1))
<BR>[Address Reference Count : 2]<UL><LI> gui_drawbitmap_444.o(.text._DrawBitmapM444_12_1)
<LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_12_1)
</UL>
<P><STRONG><a name="[14e]"></a>LCD_Index2Color_M444_16</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_m444_16_index2color.o(.text.LCD_Index2Color_M444_16))
<BR>[Address Reference Count : 2]<UL><LI> gui_drawbitmap_444.o(.text._DrawBitmapM444_16)
<LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_16)
</UL>
<P><STRONG><a name="[d0]"></a>LCD_Index2Color_M555</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_m555_index2color.o(.text.LCD_Index2Color_M555))
<BR>[Address Reference Count : 5]<UL><LI> gui_drawbitmap_555.o(.rodata.GUI_BitmapMethodsM555)
<LI> gui_drawbitmap_555.o(.text._DrawBitmapSwapRB)
<LI> gui_drawbitmap_a16.o(.text._DrawBitmapAM555)
<LI> gui_bmp.o(.text.GUI_BMP_DrawEx)
<LI> gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsAM555)
</UL>
<P><STRONG><a name="[14b]"></a>LCD_Index2Color_M565</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guicc_m565.o(.text.LCD_Index2Color_M565))
<BR><BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>
<BR>[Address Reference Count : 5]<UL><LI> gui_drawbitmap_a16.o(.text._DrawBitmapAM565)
<LI> gui_drawbitmap_565.o(.text._DrawBitmapSwapRB)
<LI> gui_drawbitmap_565.o(.rodata.GUI_BitmapMethodsM565)
<LI> gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsAM565)
<LI> guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
</UL>
<P><STRONG><a name="[ef]"></a>LCD_Index2Color_M8888I</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_m8888i_index2color.o(.text.LCD_Index2Color_M8888I))
<BR>[Address Reference Count : 6]<UL><LI> gui__alpha.o(.text.GUI__DoAlphaBlending)
<LI> guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
<LI> gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethodsM8888I)
<LI> gui_drawbitmap_8888.o(.text._DrawBitmap_M8888I)
<LI> lcd_rlealpha.o(.text._Draw)
<LI> guidev_writetoactivealpha.o(.text._WriteToActiveAlpha)
</UL>
<P><STRONG><a name="[50b]"></a>LCD_Init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lcd.o(.text.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_Init &rArr; LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitColors
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[653]"></a>LCD_InitColors</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd_color.o(.text.LCD_InitColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_InitColors &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[656]"></a>LCD_InitEx</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lcd.o(.text.LCD_InitEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_InitEx &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSelEx
</UL>

<P><STRONG><a name="[654]"></a>LCD_InitLUT</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, lcd_color.o(.text.LCD_InitLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_InitLUT &rArr; LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumLayers
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[6a3]"></a>LCD_MixColors256</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_mixcolors256.o(.text.LCD_MixColors256), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[658]"></a>LCD_ROTATE_GetCurrentIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd_rotatedisplay.o(.text.LCD_ROTATE_GetCurrentIndex))
<BR><BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_RotateDisplay
</UL>

<P><STRONG><a name="[77f]"></a>LCD_ROTATE_GetNumDrivers</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcd_rotatedisplay.o(.text.LCD_ROTATE_GetNumDrivers))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_RotateDisplay
</UL>

<P><STRONG><a name="[780]"></a>LCD_ROTATE_GetOrientation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rotatedisplay.o(.text.LCD_ROTATE_GetOrientation))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_RotateDisplay
</UL>

<P><STRONG><a name="[65a]"></a>LCD_ROTATE_GetOrientationEx</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lcd_rotatedisplay.o(.text.LCD_ROTATE_GetOrientationEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>

<P><STRONG><a name="[65c]"></a>LCD_ROTATE_SetSel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rotatedisplay.o(.text.LCD_ROTATE_SetSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LCD_ROTATE_SetSel &rArr; LCD_ROTATE_SetSelEx &rArr; LCD_ExitEx &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSelEx
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotationIndex
</UL>

<P><STRONG><a name="[65d]"></a>LCD_ROTATE_SetSelEx</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lcd_rotatedisplay.o(.text.LCD_ROTATE_SetSelEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LCD_ROTATE_SetSelEx &rArr; LCD_ExitEx &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindowEx
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ExitEx
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitEx
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSel
</UL>

<P><STRONG><a name="[660]"></a>LCD_ReadRect</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lcd_readrect.o(.text.LCD_ReadRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_ReadRect &rArr; LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>

<P><STRONG><a name="[5ae]"></a>LCD_SelectLCD</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lcd_selectlcd.o(.text.LCD_SelectLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SelectLCD &rArr; GUI_DEVICE_Unlink
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[3a0]"></a>LCD_SetBkColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text.LCD_SetBkColor))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[671]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(.text.LCD_SetBkColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
</UL>

<P><STRONG><a name="[662]"></a>LCD_SetClipRectEx</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lcd_setcliprectex.o(.text.LCD_SetClipRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
</UL>

<P><STRONG><a name="[56e]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd.o(.text.LCD_SetClipRectMax))
<BR><BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SelectLCD
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>

<P><STRONG><a name="[3a1]"></a>LCD_SetColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text.LCD_SetColor))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[4e3]"></a>LCD_SetColorIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(.text.LCD_SetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColorIndex
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_UpdateColorIndices
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClearUnusedPixels
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFromDataBlock
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[663]"></a>LCD_SetDevFunc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcd_set.o(.text.LCD_SetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetDevFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[510]"></a>LCD_SetDisplaySize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD_SetDisplaySize))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[3ad]"></a>LCD_SetDrawMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text.LCD_SetDrawMode))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawNonExistingCharacter
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_DispChar
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispChar
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[657]"></a>LCD_SetLUTEntryEx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcd_set.o(.text.LCD_SetLUTEntryEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetLUTEntryEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[115]"></a>LCD_SetPixelAA4_NoTrans</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lcd_aa.o(.text.LCD_SetPixelAA4_NoTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetPixelAA4_NoTrans
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(.text.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[ca]"></a>LCD_SetPixelAA4_Trans</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lcd_aa.o(.text.LCD_SetPixelAA4_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SetPixelAA4_Trans &rArr; OUTLINED_FUNCTION_4 &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA2
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawCharAA4_Trans
</UL>
<BR>[Address Reference Count : 3]<UL><LI> guiaa_char2.o(.text.GUI_AA__DrawCharAA2)
<LI> guiaa_lib.o(.text._FlushLine)
<LI> lcd_aa.o(.text.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[113]"></a>LCD_SetPixelAA8_NoTrans</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lcd_aa.o(.text.LCD_SetPixelAA8_NoTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetPixelAA8_NoTrans
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(.text.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[114]"></a>LCD_SetPixelAA8_Trans</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lcd_aa.o(.text.LCD_SetPixelAA8_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SetPixelAA8_Trans &rArr; OUTLINED_FUNCTION_4 &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_aa.o(.text.LCD__GetPfSetPixel)
</UL>
<P><STRONG><a name="[51a]"></a>LCD_SetPixelIndex</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd.o(.text.LCD_SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__InvertRectColors
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFromDataBlock
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[5b5]"></a>LCD_SetPosEx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcd_set.o(.text.LCD_SetPosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetPosEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
</UL>

<P><STRONG><a name="[66c]"></a>LCD_SetSizeEx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcd_set.o(.text.LCD_SetSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[66d]"></a>LCD_SetVRAMAddrEx</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd_set.o(.text.LCD_SetVRAMAddrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SetVRAMAddrEx
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[670]"></a>LCD_SetVSizeEx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lcd_set.o(.text.LCD_SetVSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_SetVSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Config
</UL>

<P><STRONG><a name="[56d]"></a>LCD_UpdateColorIndices</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_updatecolorindices.o(.text.LCD_UpdateColorIndices))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_UpdateColorIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
</UL>

<P><STRONG><a name="[5e5]"></a>LCD_X_Config</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, lcdconf.o(.text.LCD_X_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_X_Config &rArr; GUI_DEVICE_CreateAndLink &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncMixColorsBulk
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncMixColors
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncGetpPalConvTable
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFuncAlphaBlending
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M8888I_SetCustColorConv
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M888_SetCustColorConv
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M4444I_SetCustColorConv
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUICC_M1555I_SetCustColorConv
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_CreateAndLink
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_ConfigEx
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Calibrate
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_SetOrientation
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Config
</UL>

<P><STRONG><a name="[644]"></a>LCD_X_DisplayDriver</STRONG> (Thumb, 788 bytes, Stack size 72 bytes, lcdconf.o(.text.LCD_X_DisplayDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayOff
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayOn
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_Init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ProgramLineEvent
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowSize
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_EnableCLUT
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DisableColorKeying
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_EnableColorKeying
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigCLUT
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigColorKeying
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChroma
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetChromaMode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlphaMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Off
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_On
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetOrg
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ExitEx
</UL>

<P><STRONG><a name="[67e]"></a>LCD_X_DisplayOff</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd_x.o(.text.LCD_X_DisplayOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_X_DisplayOff
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[67d]"></a>LCD_X_DisplayOn</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd_x.o(.text.LCD_X_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_X_DisplayOn
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[67b]"></a>LCD_X_Init</STRONG> (Thumb, 258 bytes, Stack size 176 bytes, lcd_x.o(.text.LCD_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>

<P><STRONG><a name="[58f]"></a>LCD__DrawBitmap_1bpp</STRONG> (Thumb, 436 bytes, Stack size 120 bytes, lcd.o(.text.LCD__DrawBitmap_1bpp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[58d]"></a>LCD__GetBPP</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, lcd_getex.o(.text.LCD__GetBPP))
<BR><BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPPDevice
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[557]"></a>LCD__GetBPPDevice</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd_getex.o(.text.LCD__GetBPPDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD__GetBPPDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetBPP
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[7c5]"></a>LCD__GetPfSetPixel</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lcd_aa.o(.text.LCD__GetPfSetPixel))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCCW
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap180
</UL>

<P><STRONG><a name="[4d2]"></a>LCD__RLE16_SetFunc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lcd_rle16.o(.text.LCD__RLE16_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD__RLE16_SetFunc &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
</UL>

<P><STRONG><a name="[4cf]"></a>LCD__RLE1_SetFunc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcd_rle1.o(.text.LCD__RLE1_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD__RLE1_SetFunc &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
</UL>

<P><STRONG><a name="[4d3]"></a>LCD__RLE32_SetFunc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcd_rle32.o(.text.LCD__RLE32_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD__RLE32_SetFunc &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
</UL>

<P><STRONG><a name="[4ce]"></a>LCD__RLE4_SetFunc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcd_rle4.o(.text.LCD__RLE4_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD__RLE4_SetFunc &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
</UL>

<P><STRONG><a name="[4d1]"></a>LCD__RLE8_SetFunc</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lcd_rle8.o(.text.LCD__RLE8_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD__RLE8_SetFunc &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
</UL>

<P><STRONG><a name="[ad]"></a>LTDC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcdconf.o(.text.LTDC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LTDC_IRQHandler &rArr; HAL_LTDC_IRQHandler &rArr; HAL_LTDC_LineEventCallback &rArr; HAL_LTDC_SetAddress &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>MainTask</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, appw_maintask.o(.text.MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = MainTask &rArr; GUI_Exec1 &rArr; WM_Exec &rArr; _Exec1Draw &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Exec
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreatePersistentScreens
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_X_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_singlethread.o(.text.Init_GUIThread)
</UL>
<P><STRONG><a name="[877]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[887]"></a>OS_Tick_Enable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[886]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[885]"></a>OS_Tick_Setup</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[82d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, system_stm32f7xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>TEXT_Callback</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, text.o(.text.TEXT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = TEXT_Callback &rArr; GUI_DispStringInRectWrapEx &rArr; GUI_DispStringInRectEx &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreePtr
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> text.o(.text.TEXT_CreateUser)
</UL>
<P><STRONG><a name="[6f0]"></a>TEXT_CreateUser</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, text.o(.text.TEXT_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = TEXT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_Create
</UL>

<P><STRONG><a name="[6f1]"></a>TEXT_SetBkColor</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, text.o(.text.TEXT_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = TEXT_SetBkColor &rArr; WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6f2]"></a>TEXT_SetFont</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, text.o(.text.TEXT_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TEXT_SetFont &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6f3]"></a>TEXT_SetFrameColor</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, text.o(.text.TEXT_SetFrameColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TEXT_SetFrameColor &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6f4]"></a>TEXT_SetHex</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, text.o(.text.TEXT_SetHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = TEXT_SetHex &rArr; _SetText &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddHex
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVal
</UL>

<P><STRONG><a name="[6f6]"></a>TEXT_SetRotation</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, text.o(.text.TEXT_SetRotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TEXT_SetRotation &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6f7]"></a>TEXT_SetText</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, text.o(.text.TEXT_SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TEXT_SetText &rArr; _SetText &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT__SetDec
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetItem
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6f8]"></a>TEXT_SetTextAlign</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, text.o(.text.TEXT_SetTextAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TEXT_SetTextAlign &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6f9]"></a>TEXT_SetTextColor</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, text.o(.text.TEXT_SetTextColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TEXT_SetTextColor &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6fa]"></a>TEXT_SetTextOffset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, text.o(.text.TEXT_SetTextOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TEXT_SetTextOffset &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6fb]"></a>TEXT_SetWrapMode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, text.o(.text.TEXT_SetWrapMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TEXT_SetWrapMode &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6fc]"></a>TEXT__SetDec</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, text.o(.text.TEXT__SetDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TEXT__SetDec &rArr; EDIT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetText
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDecSub
</UL>

<P><STRONG><a name="[6fe]"></a>TS_IO_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32746g_discovery.o(.text.TS_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TS_IO_Delay &rArr; HAL_Delay &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_Init
</UL>

<P><STRONG><a name="[6ff]"></a>TS_IO_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32746g_discovery.o(.text.TS_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TS_IO_Init &rArr; I2Cx_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_ReadID
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_Init
</UL>

<P><STRONG><a name="[700]"></a>TS_IO_Read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stm32746g_discovery.o(.text.TS_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetTouchInfo
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetGestureID
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_GetXY
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_DetectTouch
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_ReadID
</UL>

<P><STRONG><a name="[701]"></a>TS_IO_Write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stm32746g_discovery.o(.text.TS_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TS_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_DisableIT
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_EnableIT
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft5336_TS_Start
</UL>

<P><STRONG><a name="[5c6]"></a>Touch_GetState</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, touch_746g_discovery.o(.text.Touch_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Touch_GetState &rArr; BSP_TS_GetState &rArr; ft5336_TS_GetTouchInfo &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>

<P><STRONG><a name="[5c9]"></a>Touch_Initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, touch_746g_discovery.o(.text.Touch_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Touch_Initialize &rArr; BSP_TS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Initialize
</UL>

<P><STRONG><a name="[366]"></a>WIDGET_AndState</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, widget.o(.text.WIDGET_AndState))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WIDGET_AndState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetPressed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetFocusable
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
</UL>

<P><STRONG><a name="[703]"></a>WIDGET_GetType</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, widget.o(.text.WIDGET_GetType))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WIDGET_GetType &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
</UL>

<P><STRONG><a name="[361]"></a>WIDGET_HandleActive</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, widget.o(.text.WIDGET_HandleActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_GetType
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_cb
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_cb
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[380]"></a>WIDGET_OrState</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, widget.o(.text.WIDGET_OrState))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetPressed
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetFocusable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
</UL>

<P><STRONG><a name="[33f]"></a>WIDGET_SetFocusable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, widget.o(.text.WIDGET_SetFocusable))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WIDGET_SetFocusable &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetWidgetFocusable
</UL>

<P><STRONG><a name="[707]"></a>WIDGET_SetState</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, widget.o(.text.WIDGET_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WIDGET_SetState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
</UL>

<P><STRONG><a name="[3b5]"></a>WIDGET__EFFECT_DrawDown</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget.o(.text.WIDGET__EFFECT_DrawDown))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[709]"></a>WIDGET__EFFECT_DrawDownRect</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, widget.o(.text.WIDGET__EFFECT_DrawDownRect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EffectRequiresRedraw
</UL>

<P><STRONG><a name="[3b4]"></a>WIDGET__FillStringInRectEx</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, widget.o(.text.WIDGET__FillStringInRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = WIDGET__FillStringInRectEx &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRectEx
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[3a2]"></a>WIDGET__GetInsideRect</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, widget.o(.text.WIDGET__GetInsideRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIDGET__GetInsideRect
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
</UL>

<P><STRONG><a name="[36c]"></a>WIDGET__Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, widget.o(.text.WIDGET__Init))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreateUser
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CreateUser
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
</UL>

<P><STRONG><a name="[123]"></a>WINDOW_Callback</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, window.o(.text.WINDOW_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = WINDOW_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HasFocus
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestorOrSelf
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.text.WINDOW_CreateUser)
</UL>
<P><STRONG><a name="[711]"></a>WINDOW_CreateUser</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, window.o(.text.WINDOW_CreateUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = WINDOW_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_Create
</UL>

<P><STRONG><a name="[712]"></a>WINDOW_SetBkColor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, window.o(.text.WINDOW_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WINDOW_SetBkColor &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_Create
</UL>

<P><STRONG><a name="[53e]"></a>WM_Activate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm.o(.text.WM_Activate))
<BR><BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLCD
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnableWM
</UL>

<P><STRONG><a name="[713]"></a>WM_AttachWindow</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_AttachWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = WM_AttachWindow &rArr; WM_DetachWindow &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetStayOnTop
</UL>

<P><STRONG><a name="[335]"></a>WM_BringBehind</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wm_lib.o(.text.WM_BringBehind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM_BringBehind &rArr; WM_ForEachDesc &rArr; OUTLINED_FUNCTION_6 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
</UL>

<P><STRONG><a name="[718]"></a>WM_BringToBottom</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, wm_lib.o(.text.WM_BringToBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = WM_BringToBottom &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
</UL>

<P><STRONG><a name="[329]"></a>WM_BringToTop</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_BringToTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WM_BringToTop &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShift
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[71b]"></a>WM_BroadcastMessage</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, wm_lib.o(.text.WM_BroadcastMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_BroadcastMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetLang
</UL>

<P><STRONG><a name="[3d4]"></a>WM_ClrHasTrans</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm_settrans.o(.text.WM_ClrHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = WM_ClrHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetBkColor
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetBkColor
</UL>

<P><STRONG><a name="[71c]"></a>WM_CreateTimer</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, wm_timer.o(.text.WM_CreateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WM_CreateTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_Create
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageTimer
</UL>

<P><STRONG><a name="[36b]"></a>WM_CreateWindowAsChild</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, wm.o(.text.WM_CreateWindowAsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_Create
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_Create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_Create
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreateUser
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CreateUser
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
</UL>

<P><STRONG><a name="[56c]"></a>WM_Deactivate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm.o(.text.WM_Deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_Deactivate &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeactivateEx
</UL>

<P><STRONG><a name="[367]"></a>WM_DefaultProc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, wm.o(.text.WM_DefaultProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[71f]"></a>WM_DeleteTimer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_timer.o(.text.WM_DeleteTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM_DeleteTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopTimer
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_cb
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageTimer
</UL>

<P><STRONG><a name="[3ba]"></a>WM_DeleteWindow</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, wm.o(.text.WM_DeleteWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + In Cycle
<LI>Call Chain = WM_DeleteWindow &rArr;  WM_DeleteWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeleteAssocTimer
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT__SetDec
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
</UL>

<P><STRONG><a name="[723]"></a>WM_DeleteWindowSecure</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm.o(.text.WM_DeleteWindowSecure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM_DeleteWindowSecure
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteScreenIfNotPersistent
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftScreenEnd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_CloseScreen
</UL>

<P><STRONG><a name="[714]"></a>WM_DetachWindow</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_DetachWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = WM_DetachWindow &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
</UL>

<P><STRONG><a name="[2ca]"></a>WM_DisableWindow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.WM_DisableWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_DisableWindow &rArr; WM_SetEnableState &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetEnableState
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ACTION_SetEnable
</UL>

<P><STRONG><a name="[77d]"></a>WM_EnablePID</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_touch.o(.text.WM_EnablePID))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_EnablePID
</UL>

<P><STRONG><a name="[2cb]"></a>WM_EnableWindow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.WM_EnableWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_EnableWindow &rArr; WM_SetEnableState &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetEnableState
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ACTION_SetEnable
</UL>

<P><STRONG><a name="[4d7]"></a>WM_Exec</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wm.o(.text.WM_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = WM_Exec &rArr; _Exec1Draw &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Input
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Exec1
</UL>

<P><STRONG><a name="[717]"></a>WM_ForEachDesc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_ForEachDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM_ForEachDesc &rArr; OUTLINED_FUNCTION_6 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>

<P><STRONG><a name="[7f9]"></a>WM_GetActiveWindow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm.o(.text.WM_GetActiveWindow))
<BR><BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDefaultWin
</UL>

<P><STRONG><a name="[4fb]"></a>WM_GetClientRect</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_GetClientRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WM_GetClientRect &rArr; WM_GetClientRectEx &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawColors
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetClientRect
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
</UL>

<P><STRONG><a name="[628]"></a>WM_GetClientRectEx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM_GetClientRectEx &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreateUser
</UL>

<P><STRONG><a name="[317]"></a>WM_GetDesktopWindow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_lib.o(.text.WM_GetDesktopWindow))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT__SetDec
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotationIndex
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[65e]"></a>WM_GetDesktopWindowEx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_lib.o(.text.WM_GetDesktopWindowEx))
<BR><BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWinStop
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSelEx
</UL>

<P><STRONG><a name="[2d8]"></a>WM_GetDialogItem</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomInfo
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPosition
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeCoord
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetHandle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
</UL>

<P><STRONG><a name="[34b]"></a>WM_GetFirstChild</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_GetFirstChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_GetFirstChild &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
</UL>

<P><STRONG><a name="[729]"></a>WM_GetFlags</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_GetFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_GetFlags &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
</UL>

<P><STRONG><a name="[39f]"></a>WM_GetHasTrans</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_settrans.o(.text.WM_GetHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_GetHasTrans &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[324]"></a>WM_GetId</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_GetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WM_GetId &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_CalcVar
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[72a]"></a>WM_GetInsideRectEx</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_GetInsideRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WM_GetInsideRectEx &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
</UL>

<P><STRONG><a name="[706]"></a>WM_GetInsideRectExScrollbar</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, wm_lib.o(.text.WM_GetInsideRectExScrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectEx
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFlags
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>

<P><STRONG><a name="[6d3]"></a>WM_GetNextSibling</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_GetNextSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_GetNextSibling &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeWindow
</UL>

<P><STRONG><a name="[309]"></a>WM_GetParent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_GetParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_GetParent &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetSize
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Motion_AutoWithinParent
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
</UL>

<P><STRONG><a name="[72c]"></a>WM_GetWindowOrgX</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_GetWindowOrgX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_GetWindowOrgX &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[72d]"></a>WM_GetWindowOrgY</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_GetWindowOrgY))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_GetWindowOrgY &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
</UL>

<P><STRONG><a name="[72e]"></a>WM_GetWindowRect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_GetWindowRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_GetWindowRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
</UL>

<P><STRONG><a name="[2ff]"></a>WM_GetWindowRectEx</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_GetWindowRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM_GetWindowRectEx &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetCurrentRootInfo
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMotionTagR
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Motion_AutoWithinParent
</UL>

<P><STRONG><a name="[333]"></a>WM_GetWindowSizeX</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wm_getwindowsize.o(.text.WM_GetWindowSizeX))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WM_GetWindowSizeX &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDefaultWin
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
</UL>

<P><STRONG><a name="[334]"></a>WM_GetWindowSizeY</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wm_getwindowsize.o(.text.WM_GetWindowSizeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WM_GetWindowSizeY &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDefaultWin
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[e8]"></a>WM_HandlePID</STRONG> (Thumb, 884 bytes, Stack size 112 bytes, wm_touch.o(.text.WM_HandlePID))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = WM_HandlePID &rArr; GUI_CURSOR_SetPositionEx &rArr; GUI_SPRITE_SetPosition &rArr; _CreateBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveCriticalHandle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_IsEmpty
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PID_GetState
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInModalArea
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_PID__SetPrevState
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_pid.o(.text.GUI_PID_StoreState)
</UL>
<P><STRONG><a name="[70c]"></a>WM_HasFocus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_lib.o(.text.WM_HasFocus))
<BR><BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
</UL>

<P><STRONG><a name="[738]"></a>WM_HideWindow</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_HideWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = WM_HideWindow &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetVis
</UL>

<P><STRONG><a name="[512]"></a>WM_Init</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, wm.o(.text.WM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = WM_Init &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[739]"></a>WM_InvalidateRect</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, wm.o(.text.WM_InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Invalidate1Abs
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>

<P><STRONG><a name="[34e]"></a>WM_InvalidateWindow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.WM_InvalidateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetEnd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStart
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetSkin
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetState
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetGradient
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_SetPara
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UndisposeWindow
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_SetBkColor
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddValue
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTA
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTAEx
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMP
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEG
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMPEx
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEGEx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetOffset
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlign
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetTiled
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBitmap
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbInvalidateOne
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShift
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_Invalidate
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetSize
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[65f]"></a>WM_InvalidateWindowAndDescs</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_InvalidateWindowAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescs &rArr;  WM_InvalidateWindowAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSelEx
</UL>

<P><STRONG><a name="[73f]"></a>WM_InvalidateWindowAndDescsEx</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, wm.o(.text.WM_InvalidateWindowAndDescsEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + In Cycle
<LI>Call Chain = WM_InvalidateWindowAndDescsEx &rArr;  WM_InvalidateWindowAndDescsEx (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>

<P><STRONG><a name="[2c9]"></a>WM_IsEnabled</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_IsEnabled &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ACTION_SetEnable
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>

<P><STRONG><a name="[77c]"></a>WM_IsEnabledPID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_touch.o(.text.WM_IsEnabledPID))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_EnablePID
</UL>

<P><STRONG><a name="[741]"></a>WM_IsFocusable</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, wm_lib.o(.text.WM_IsFocusable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM_IsFocusable &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[742]"></a>WM_IsVisible</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_IsVisible))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_IsVisible &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetVis
</UL>

<P><STRONG><a name="[307]"></a>WM_IsWindow</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_lib.o(.text.WM_IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM_IsWindow &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
</UL>

<P><STRONG><a name="[315]"></a>WM_MOTION_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wm_motion.o(.text.WM_MOTION_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = WM_MOTION_Enable &rArr; _ExecMotion &rArr; _MoveToNearestSnapPosition &rArr; _StartMotionTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetMotionCallback
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
</UL>

<P><STRONG><a name="[745]"></a>WM_MOTION_SetMoveable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_motion.o(.text.WM_MOTION_SetMoveable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WM_MOTION_SetMoveable &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[316]"></a>WM_MULTIBUF_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_multibuf.o(.text.WM_MULTIBUF_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
</UL>

<P><STRONG><a name="[746]"></a>WM_MakeModal</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, wm_makemodal.o(.text.WM_MakeModal))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WM_MakeModal &rArr; WM__SendPIDMessage &rArr; WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInModalArea
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ModalMessage
</UL>

<P><STRONG><a name="[34c]"></a>WM_MoveWindow</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wm_move.o(.text.WM_MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Motion_AutoWithinParent
</UL>

<P><STRONG><a name="[399]"></a>WM_NotifyParent</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_NotifyParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM_NotifyParent &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOnValueChanged
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueSub
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostSet
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueInteraction
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcAngle
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchReactOnLevel
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteChar
</UL>

<P><STRONG><a name="[39]"></a>WM_OBJECT_BOX_Create</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, obox.o(.text.WM_OBJECT_BOX_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = WM_OBJECT_BOX_Create &rArr; WM_SetYSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.data._aCreate)
</UL>
<P><STRONG><a name="[12b]"></a>WM_OBJECT_BOX_cb</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, obox.o(.text.WM_OBJECT_BOX_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = WM_OBJECT_BOX_cb &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMVEx
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMVEx
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMHEx
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMHEx
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeY
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRectEx
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingDraw
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeX
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingCleanup
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obox.o(.text.WM_OBJECT_BOX_Create)
</UL>
<P><STRONG><a name="[3b]"></a>WM_OBJECT_BUTTON_Create</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, obutton.o(.text.WM_OBJECT_BUTTON_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = WM_OBJECT_BUTTON_Create &rArr; BUTTON_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetSkin
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetReactOnLevel
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetSupportFocus
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetFocusable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.data._aCreate)
</UL>
<P><STRONG><a name="[12d]"></a>WM_OBJECT_BUTTON_cb</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, obutton.o(.text.WM_OBJECT_BUTTON_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = WM_OBJECT_BUTTON_cb &rArr; BUTTON_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CopyText
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_IsPressed
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOnValueChanged
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetState
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueSub
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingDraw
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingCleanup
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.text.WM_OBJECT_BUTTON_Create)
</UL>
<P><STRONG><a name="[3d]"></a>WM_OBJECT_GAUGE_Create</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, ogauge.o(.text.WM_OBJECT_GAUGE_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = WM_OBJECT_GAUGE_Create &rArr; GAUGE_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CreateUser
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.data._aCreate)
</UL>
<P><STRONG><a name="[130]"></a>WM_OBJECT_GAUGE_cb</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, ogauge.o(.text.WM_OBJECT_GAUGE_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = WM_OBJECT_GAUGE_cb &rArr; GAUGE_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_Callback
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingDraw
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingCleanup
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ogauge.o(.text.WM_OBJECT_GAUGE_Create)
</UL>
<P><STRONG><a name="[3a]"></a>WM_OBJECT_IMAGE_Create</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, oimage.o(.text.WM_OBJECT_IMAGE_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = WM_OBJECT_IMAGE_Create &rArr; IMAGE_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreateUser
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.data._aCreate)
</UL>
<P><STRONG><a name="[132]"></a>WM_OBJECT_IMAGE_cb</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, oimage.o(.text.WM_OBJECT_IMAGE_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = WM_OBJECT_IMAGE_cb &rArr; IMAGE_Callback &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingDraw
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingCleanup
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetFileAccess
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetVoid
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oimage.o(.text.WM_OBJECT_IMAGE_Create)
</UL>
<P><STRONG><a name="[3f]"></a>WM_OBJECT_PROGBAR_Create</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, oprogbar.o(.text.WM_OBJECT_PROGBAR_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = WM_OBJECT_PROGBAR_Create &rArr; WM_SetYSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.data._aCreate)
</UL>
<P><STRONG><a name="[134]"></a>WM_OBJECT_PROGBAR_cb</STRONG> (Thumb, 852 bytes, Stack size 80 bytes, oprogbar.o(.text.WM_OBJECT_PROGBAR_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = WM_OBJECT_PROGBAR_cb &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingDraw
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingCleanup
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DisableHiRes
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_SetFactor
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_EnableHiRes
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_GetFactor
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawColors
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueInteraction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oprogbar.o(.text.WM_OBJECT_PROGBAR_Create)
</UL>
<P><STRONG><a name="[3e]"></a>WM_OBJECT_TEXT_Create</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, otext.o(.text.WM_OBJECT_TEXT_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = WM_OBJECT_TEXT_Create &rArr; TEXT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.data._aCreate)
</UL>
<P><STRONG><a name="[136]"></a>WM_OBJECT_TEXT_cb</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, otext.o(.text.WM_OBJECT_TEXT_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = WM_OBJECT_TEXT_cb &rArr; TEXT_Callback &rArr; GUI_DispStringInRectWrapEx &rArr; GUI_DispStringInRectEx &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CopyText
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingDraw
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingCleanup
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBuffered
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextLen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_Callback
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otext.o(.text.WM_OBJECT_TEXT_Create)
</UL>
<P><STRONG><a name="[3c]"></a>WM_OBJECT_TIMER_Create</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, otimer.o(.text.WM_OBJECT_TIMER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = WM_OBJECT_TIMER_Create &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.data._aCreate)
</UL>
<P><STRONG><a name="[38]"></a>WM_OBJECT_WINDOW_Create</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, owindow.o(.text.WM_OBJECT_WINDOW_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = WM_OBJECT_WINDOW_Create &rArr; WINDOW_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_SetBkColor
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_CreateUser
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.data._aCreate)
</UL>
<P><STRONG><a name="[2d5]"></a>WM_OBJECT_WINDOW_SetPara</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, owindow.o(.text.WM_OBJECT_WINDOW_SetPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WM_OBJECT_WINDOW_SetPara &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
</UL>

<P><STRONG><a name="[13a]"></a>WM_OBJECT_WINDOW_cb</STRONG> (Thumb, 640 bytes, Stack size 72 bytes, owindow.o(.text.WM_OBJECT_WINDOW_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = WM_OBJECT_WINDOW_cb &rArr; APPW_ProcessMotion &rArr; APPW_CreateRoot &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingPrepare
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingDraw
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawingCleanup
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfo
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_IsRoot
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SendNotification
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetHasTrans
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> owindow.o(.text.WM_OBJECT_WINDOW_Create)
</UL>
<P><STRONG><a name="[59d]"></a>WM_OnKey</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, wm_lib.o(.text.WM_OnKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_OnKey &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
</UL>

<P><STRONG><a name="[736]"></a>WM_PID__SetPrevState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_pid__getprevstate.o(.text.WM_PID__SetPrevState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM_PID__SetPrevState
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[735]"></a>WM_ReleaseCapture</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_setcapture.o(.text.WM_ReleaseCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_ReleaseCapture &rArr; WM__ReleaseCapture &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ReleaseCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MakeModal
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[75a]"></a>WM_ResizeWindow</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, wm_lib.o(.text.WM_ResizeWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__UpdateChildPositions
</UL>

<P><STRONG><a name="[3a6]"></a>WM_RestartTimer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_timer.o(.text.WM_RestartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WM_RestartTimer &rArr; GUI_TIMER_Restart &rArr; _Link &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPeriodSub
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_cb
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[300]"></a>WM_Screen2hWin</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_screen2win.o(.text.WM_Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM_Screen2hWin &rArr; _Screen2hWinStop &rArr; _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWinStop
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetCurrentRootInfo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>

<P><STRONG><a name="[3a5]"></a>WM_SelectWindow</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm.o(.text.WM_SelectWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WM_SelectWindow &rArr; WM__SelectTopLevelLayer &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Init
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[2e1]"></a>WM_SendMessage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm.o(.text.WM_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Exec
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomValue
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawFocusRect
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitDrawing
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TIMER_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AddValue
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetValue
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStartStopNotification
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsPersistent
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectEx
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_GetType
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AimDestinationXY
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMotionTagR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Motion_ByWindow
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveToNearestSnapPosition
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetConfirmation
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContext
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[2dc]"></a>WM_SendMessageNoPara</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM_SendMessageNoPara &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BroadcastMessage
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[708]"></a>WM_SendToParent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_SendToParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>

<P><STRONG><a name="[30e]"></a>WM_SetCallback</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_SetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WM_SetCallback &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageNoPara
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_Create
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_GAUGE_Create
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_Create
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVarWin
</UL>

<P><STRONG><a name="[75e]"></a>WM_SetDefault</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm.o(.text.WM_SetDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM_SetDefault &rArr; GL_SetDefault &rArr; GUI_SetPenSize &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_SetDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
</UL>

<P><STRONG><a name="[724]"></a>WM_SetEnableState</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, wm_lib.o(.text.WM_SetEnableState))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = WM_SetEnableState &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DisableWindow
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_EnableWindow
</UL>

<P><STRONG><a name="[704]"></a>WM_SetFocus</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, wm_lib.o(.text.WM_SetFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetFocus
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
</UL>

<P><STRONG><a name="[710]"></a>WM_SetFocusOnNextChild</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wm_setfocusonnextchild.o(.text.WM_SetFocusOnNextChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WM_SetFocusOnNextChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextChild
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
</UL>

<P><STRONG><a name="[70f]"></a>WM_SetFocusOnPrevChild</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm_setfocusonprevchild.o(.text.WM_SetFocusOnPrevChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WM_SetFocusOnPrevChild &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPrevChild
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
</UL>

<P><STRONG><a name="[370]"></a>WM_SetHasTrans</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_settrans.o(.text.WM_SetHasTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetBkColor
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetBkColor
</UL>

<P><STRONG><a name="[640]"></a>WM_SetSize</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, wm_lib.o(.text.WM_SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotationIndex
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__SetWindowSize
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>

<P><STRONG><a name="[763]"></a>WM_SetStayOnTop</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_SetStayOnTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = WM_SetStayOnTop &rArr; WM_AttachWindow &rArr; WM_DetachWindow &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[2e2]"></a>WM_SetUserClipRect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_SetUserClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = WM_SetUserClipRect &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawFocusRect
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectMax
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__FillStringInRectEx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[319]"></a>WM_SetXSize</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_SetXSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = WM_SetXSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_Create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_Create
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
</UL>

<P><STRONG><a name="[31b]"></a>WM_SetYSize</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_lib.o(.text.WM_SetYSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = WM_SetYSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_Create
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_Create
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Init
</UL>

<P><STRONG><a name="[765]"></a>WM_ShowWindow</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_ShowWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = WM_ShowWindow &rArr; WM_InvalidateWindowAndDescs &rArr;  WM_InvalidateWindowAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetVis
</UL>

<P><STRONG><a name="[762]"></a>WM_ValidateWindow</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_lib.o(.text.WM_ValidateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM_ValidateWindow &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
</UL>

<P><STRONG><a name="[764]"></a>WM__ActivateClipRect</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wm.o(.text.WM__ActivateClipRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>

<P><STRONG><a name="[127]"></a>WM__AddCriticalHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm__private.o(.text.WM__AddCriticalHandle))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreatehCrit
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(.text.WM_Init)
</UL>
<P><STRONG><a name="[73b]"></a>WM__Client2Screen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm.o(.text.WM__Client2Screen))
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetClipRectUserIntersect
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[73d]"></a>WM__ClipAtParentBorders</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm.o(.text.WM__ClipAtParentBorders))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WM__ClipAtParentBorders &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[768]"></a>WM__DeactivateEx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm.o(.text.WM__DeactivateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM__DeactivateEx &rArr; WM_Deactivate &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnableWM
</UL>

<P><STRONG><a name="[721]"></a>WM__DeleteAssocTimer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm_timer.o(.text.WM__DeleteAssocTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WM__DeleteAssocTimer &rArr; WM_DeleteTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetFlag
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[722]"></a>WM__DetachWindow</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wm.o(.text.WM__DetachWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = WM__DetachWindow &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[727]"></a>WM__ForEachDesc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm__private.o(.text.WM__ForEachDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = WM__ForEachDesc &rArr;  WM__ForEachDesc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ForEachDesc
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
</UL>

<P><STRONG><a name="[71e]"></a>WM__GetClientRectEx</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm__private.o(.text.WM__GetClientRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__GetClientRectEx &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectWin
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>

<P><STRONG><a name="[70b]"></a>WM__GetClientRectWin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm.o(.text.WM__GetClientRectWin))
<BR><BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetClientRectEx
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
</UL>

<P><STRONG><a name="[769]"></a>WM__GetFirstSibling</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm__private.o(.text.WM__GetFirstSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM__GetFirstSibling &rArr; WM_GetParent &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
</UL>

<P><STRONG><a name="[75f]"></a>WM__GetFocusedChild</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm__private.o(.text.WM__GetFocusedChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WM__GetFocusedChild &rArr; WM__IsChild &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsChild
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[76b]"></a>WM__GetLastSibling</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm__private.o(.text.WM__GetLastSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__GetLastSibling
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPrevChild
</UL>

<P><STRONG><a name="[3b6]"></a>WM__GetNextIVR</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, wm.o(.text.WM__GetNextIVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillCircle
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedFrame
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPieHR
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawArcHR
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillEllipseXL
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExLoop
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMH
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMV
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMH
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMV
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFrame
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawEllipse
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillEllipse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[414]"></a>WM__GetOrgX_AA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm__private.o(.text.WM__GetOrgX_AA))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillEllipseXL
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
</UL>

<P><STRONG><a name="[415]"></a>WM__GetOrgY_AA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm__private.o(.text.WM__GetOrgY_AA))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillEllipseXL
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
</UL>

<P><STRONG><a name="[719]"></a>WM__GetPrevSibling</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm__private.o(.text.WM__GetPrevSibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM__GetPrevSibling &rArr; WM__GetFirstSibling &rArr; WM_GetParent &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFirstSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPrevChild
</UL>

<P><STRONG><a name="[720]"></a>WM__GetTopLevelLayer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm.o(.text.WM__GetTopLevelLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__GetTopLevelLayer
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SelectTopLevelLayer
</UL>

<P><STRONG><a name="[749]"></a>WM__GetWindowSizeX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_getwindowsize.o(.text.WM__GetWindowSizeX))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTiled
</UL>

<P><STRONG><a name="[74b]"></a>WM__GetWindowSizeY</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_getwindowsize.o(.text.WM__GetWindowSizeY))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTiled
</UL>

<P><STRONG><a name="[3aa]"></a>WM__InitIVRSearch</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, wm.o(.text.WM__InitIVRSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillCircle
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedFrame
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillEllipseXL
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExLoop
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMH
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMV
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMH
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMV
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFrame
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcEx
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawEllipse
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillEllipse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[715]"></a>WM__InsertWindowIntoList</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, wm.o(.text.WM__InsertWindowIntoList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM__InsertWindowIntoList &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
</UL>

<P><STRONG><a name="[73e]"></a>WM__Invalidate1Abs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.WM__Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = WM__Invalidate1Abs &rArr; _Invalidate1Abs &rArr; GUI_MergeRect
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[73a]"></a>WM__InvalidateDrawAndDescs</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wm.o(.text.WM__InvalidateDrawAndDescs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = WM__InvalidateDrawAndDescs &rArr;  WM__InvalidateDrawAndDescs (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[770]"></a>WM__InvalidateParent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm.o(.text.WM__InvalidateParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__InvalidateParent
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
</UL>

<P><STRONG><a name="[771]"></a>WM__InvalidateRect</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wm.o(.text.WM__InvalidateRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRectEx
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>

<P><STRONG><a name="[71a]"></a>WM__InvalidateRectEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.WM__InvalidateRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
</UL>

<P><STRONG><a name="[70e]"></a>WM__IsAncestor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm__private.o(.text.WM__IsAncestor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestorOrSelf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInModalArea
</UL>

<P><STRONG><a name="[70d]"></a>WM__IsAncestorOrSelf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm__private.o(.text.WM__IsAncestorOrSelf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsAncestorOrSelf &rArr; WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
</UL>

<P><STRONG><a name="[76a]"></a>WM__IsChild</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm__private.o(.text.WM__IsChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__IsChild &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetFocusedChild
</UL>

<P><STRONG><a name="[376]"></a>WM__IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm__private.o(.text.WM__IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[731]"></a>WM__IsInModalArea</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm_touch.o(.text.WM__IsInModalArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WM__IsInModalArea &rArr; WM__IsAncestor
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsAncestor
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MakeModal
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[816]"></a>WM__IsInWindow</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wm_screen2win.o(.text.WM__IsInWindow))
<BR><BR>[Called By]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>

<P><STRONG><a name="[2fa]"></a>WM__IsWindow</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm.o(.text.WM__IsWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__IsWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomInfo
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteScreenIfNotPersistent
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[748]"></a>WM__MoveWindow</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, wm_move.o(.text.WM__MoveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendants
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateParent
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>

<P><STRONG><a name="[773]"></a>WM__Paint</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, wm.o(.text.WM__Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
</UL>

<P><STRONG><a name="[175]"></a>WM__Paint1</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, wm.o(.text.WM__Paint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = WM__Paint1 &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetDefault
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreateStaticDevice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(.text._Paint1)
</UL>
<P><STRONG><a name="[804]"></a>WM__RectIsNZ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm.o(.text.WM__RectIsNZ))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
</UL>

<P><STRONG><a name="[6de]"></a>WM__RemoveCriticalHandle</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm__private.o(.text.WM__RemoveCriticalHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__RemoveCriticalHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftWindowEnd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftScreenEnd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[716]"></a>WM__RemoveWindowFromList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm.o(.text.WM__RemoveWindowFromList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WM__RemoveWindowFromList
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
</UL>

<P><STRONG><a name="[778]"></a>WM__Screen2Client</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm__private.o(.text.WM__Screen2Client), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EffectRequiresRedraw
</UL>

<P><STRONG><a name="[75d]"></a>WM__SelectTopLevelLayer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm.o(.text.WM__SelectTopLevelLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WM__SelectTopLevelLayer &rArr; GUI_SelectLayer &rArr; GUI_SelectLCD &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SelectLayer
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
</UL>

<P><STRONG><a name="[2d9]"></a>WM__SendMessage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm__private.o(.text.WM__SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Exec
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetValue
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetValue
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SendNotification
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetTextItem
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTextLocked
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessActions
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMsgNoData
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetEnableState
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BroadcastMessage
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendants
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ReleaseCapture
</UL>

<P><STRONG><a name="[734]"></a>WM__SendMessageIfEnabled</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm__private.o(.text.WM__SendMessageIfEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
</UL>

<P><STRONG><a name="[2d7]"></a>WM__SendMessageNoPara</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, wm__private.o(.text.WM__SendMessageNoPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WM__SendMessageNoPara
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Draw
</UL>

<P><STRONG><a name="[71d]"></a>WM__SendMsgNoData</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, wm.o(.text.WM__SendMsgNoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>

<P><STRONG><a name="[747]"></a>WM__SendPIDMessage</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, wm_touch.o(.text.WM__SendPIDMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = WM__SendPIDMessage &rArr; WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessageIfEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MakeModal
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendTouchMessage
</UL>

<P><STRONG><a name="[732]"></a>WM__SendTouchMessage</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_touch.o(.text.WM__SendTouchMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = WM__SendTouchMessage &rArr; WM__SendPIDMessage &rArr; WM__SendMessageIfEnabled &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendPIDMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[743]"></a>WM__SetMotionCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_touch.o(.text.WM__SetMotionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WM__SetMotionCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MOTION_Enable
</UL>

<P><STRONG><a name="[705]"></a>WM__UpdateChildPositions</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, wm__private.o(.text.WM__UpdateChildPositions))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ResizeWindow
</UL>

<P><STRONG><a name="[2a1]"></a>_mutex_acquire</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[2a3]"></a>_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_lib.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_free &rArr; osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[2a4]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_lib.o(.text._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_initialize &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[2a2]"></a>_mutex_release</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mutex_release &rArr; osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[2ad]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[26]"></a>cbID_SCREEN_00</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, id_screen_00_slots.o(.text.cbID_SCREEN_00))
<BR>[Address Reference Count : 1]<UL><LI> id_screen_00.o(.data.ID_SCREEN_00_RootInfo)
</UL>
<P><STRONG><a name="[42]"></a>ft5336_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ft5336.o(.text.ft5336_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ft5336_Init &rArr; TS_IO_Init &rArr; I2Cx_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[43]"></a>ft5336_ReadID</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ft5336.o(.text.ft5336_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ft5336_ReadID &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[44]"></a>ft5336_Reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft5336.o(.text.ft5336_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[49]"></a>ft5336_TS_ClearIT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ft5336.o(.text.ft5336_TS_ClearIT))
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[46]"></a>ft5336_TS_DetectTouch</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ft5336.o(.text.ft5336_TS_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ft5336_TS_DetectTouch &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[4b]"></a>ft5336_TS_DisableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft5336.o(.text.ft5336_TS_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ft5336_TS_DisableIT &rArr; TS_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[48]"></a>ft5336_TS_EnableIT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft5336.o(.text.ft5336_TS_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ft5336_TS_EnableIT &rArr; TS_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[360]"></a>ft5336_TS_GetGestureID</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ft5336.o(.text.ft5336_TS_GetGestureID))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ft5336_TS_GetGestureID &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>

<P><STRONG><a name="[35f]"></a>ft5336_TS_GetTouchInfo</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ft5336.o(.text.ft5336_TS_GetTouchInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ft5336_TS_GetTouchInfo &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
</UL>

<P><STRONG><a name="[47]"></a>ft5336_TS_GetXY</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, ft5336.o(.text.ft5336_TS_GetXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ft5336_TS_GetXY &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[4a]"></a>ft5336_TS_ITStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft5336.o(.text.ft5336_TS_ITStatus))
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[45]"></a>ft5336_TS_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ft5336.o(.text.ft5336_TS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ft5336_TS_Start &rArr; TS_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft5336.o(.data.ft5336_ts_drv)
</UL>
<P><STRONG><a name="[2b1]"></a>main</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = main &rArr; BSP_SDRAM_Init &rArr; BSP_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GUIThread
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5d6]"></a>osDelay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Delay
</UL>

<P><STRONG><a name="[5dc]"></a>osEventFlagsNew</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_evflags.o(.text.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osEventFlagsNew
</UL>
<BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsNew
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[5fd]"></a>osKernelGetState</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[5d8]"></a>osKernelGetTickCount</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTime
</UL>

<P><STRONG><a name="[829]"></a>osKernelInitialize</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelBeforeInit
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[82e]"></a>osKernelStart</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[839]"></a>osMessageQueueGet</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[83f]"></a>osMessageQueuePut</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[5dd]"></a>osMutexAcquire</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osMutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
</UL>

<P><STRONG><a name="[828]"></a>osMutexDelete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDelete
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[5db]"></a>osMutexNew</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexNew
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[5de]"></a>osMutexRelease</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>

<P><STRONG><a name="[849]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[18a]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[835]"></a>osRtxKernelBeforeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelBeforeInit))
<BR><BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[2b8]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[84e]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[850]"></a>osRtxMemoryFree</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[852]"></a>osRtxMemoryInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[841]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[855]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[857]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[85c]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[85e]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[861]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Calls]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[2b9]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[83b]"></a>osRtxPostProcess</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[871]"></a>osRtxThreadBeforeFree</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_lib.o(.text.osRtxThreadBeforeFree))
<BR><BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[864]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[863]"></a>osRtxThreadDispatch</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[859]"></a>osRtxThreadListGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[88a]"></a>osRtxThreadListPut</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[84a]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[862]"></a>osRtxThreadListSort</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[878]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[85a]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2b7]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[873]"></a>osRtxThreadStartup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[874]"></a>osRtxThreadSwitch</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[875]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[84b]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2ba]"></a>osRtxTick_Handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[196]"></a>osRtxTimerSetup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[195]"></a>osRtxTimerThread</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[87a]"></a>osThreadExit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEntry
</UL>

<P><STRONG><a name="[5d7]"></a>osThreadGetId</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>

<P><STRONG><a name="[642]"></a>osThreadNew</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GUIThread
</UL>

<P><STRONG><a name="[5d9]"></a>osTimerNew</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerNew
</UL>
<BR>[Calls]<UL><LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerNew
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
</UL>

<P><STRONG><a name="[5da]"></a>osTimerStart</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStart
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
</UL>

<P><STRONG><a name="[2c8]"></a>$Super$$_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[8cd]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[8ce]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[be]"></a>_InitText</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwconf.o(.text._InitText))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _InitText &rArr; APPW_TextInitMem &rArr; GUI_LANG_LoadTextEx &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_TextInitMem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwconf.o(.text.APPW_X_Setup)
</UL>
<P><STRONG><a name="[622]"></a>I2Cx_Init</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, stm32746g_discovery.o(.text.I2Cx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2Cx_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Write
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Read
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_IO_Init
</UL>

<P><STRONG><a name="[17e]"></a>svcRtxDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[17f]"></a>svcRtxEventFlagsNew</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, rtx_evflags.o(.text.svcRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxEventFlagsNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsCreated
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsNew)
</UL>
<P><STRONG><a name="[191]"></a>osRtxEventFlagsPostProcess</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, rtx_evflags.o(.text.osRtxEventFlagsPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxEventFlagsPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.svcRtxEventFlagsNew)
</UL>
<P><STRONG><a name="[182]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[180]"></a>svcRtxKernelGetState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[183]"></a>svcRtxKernelStart</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[181]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[85d]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>

<P><STRONG><a name="[192]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[185]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[184]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[188]"></a>svcRtxMutexNew</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[186]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[189]"></a>svcRtxMutexRelease</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[187]"></a>svcRtxMutexDelete</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexDestroyed
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[870]"></a>osRtxThreadFree</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBeforeFree
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[18e]"></a>svcRtxThreadNew</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[193]"></a>osThreadEntry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadEntry))
<BR><BR>[Calls]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[194]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[18d]"></a>svcRtxThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[18c]"></a>svcRtxThreadExit</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[18b]"></a>osRtxTimerTick</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[18f]"></a>svcRtxTimerNew</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCreated
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[190]"></a>svcRtxTimerStart</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerStarted
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[607]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32f7xx_hal_i2c.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[604]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f7xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[606]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[603]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, stm32f7xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[60d]"></a>LTDC_SetConfig</STRONG> (Thumb, 292 bytes, Stack size 20 bytes, stm32f7xx_hal_ltdc.o(.text.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAddress
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetAlpha
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowPosition
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_SetWindowSize
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[ed]"></a>GUI_TOUCH_Tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_x_rte.o(.text.GUI_TOUCH_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GUI_TOUCH_Tick &rArr; GUI_TOUCH_Exec &rArr; Touch_GetState &rArr; BSP_TS_GetState &rArr; ft5336_TS_GetTouchInfo &rArr; TS_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_IsAcknowledgeFailed &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TOUCH_Exec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_x_rte.o(.text.GUI_X_Init)
</UL>
<P><STRONG><a name="[106]"></a>_LCD_CopyBuffer</STRONG> (Thumb, 230 bytes, Stack size 28 bytes, lcdconf.o(.text._LCD_CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _LCD_CopyBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[107]"></a>_Color2IndexBulk_M1555I_DMA2D</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, lcdconf.o(.text._Color2IndexBulk_M1555I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Color2IndexBulk_M1555I_DMA2D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[108]"></a>_Index2ColorBulk_M1555I_DMA2D</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, lcdconf.o(.text._Index2ColorBulk_M1555I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Index2ColorBulk_M1555I_DMA2D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[109]"></a>_Color2IndexBulk_M4444I_DMA2D</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, lcdconf.o(.text._Color2IndexBulk_M4444I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Color2IndexBulk_M4444I_DMA2D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[10a]"></a>_Index2ColorBulk_M4444I_DMA2D</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, lcdconf.o(.text._Index2ColorBulk_M4444I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Index2ColorBulk_M4444I_DMA2D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[10b]"></a>_Color2IndexBulk_M888_DMA2D</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, lcdconf.o(.text._Color2IndexBulk_M888_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Color2IndexBulk_M888_DMA2D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[10c]"></a>_Index2ColorBulk_M888_DMA2D</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, lcdconf.o(.text._Index2ColorBulk_M888_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Index2ColorBulk_M888_DMA2D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[10d]"></a>_Color2IndexBulk_M8888I_DMA2D</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, lcdconf.o(.text._Color2IndexBulk_M8888I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Color2IndexBulk_M8888I_DMA2D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[10e]"></a>_Index2ColorBulk_M8888I_DMA2D</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, lcdconf.o(.text._Index2ColorBulk_M8888I_DMA2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Index2ColorBulk_M8888I_DMA2D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[10f]"></a>_DMA_AlphaBlending</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, lcdconf.o(.text._DMA_AlphaBlending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _DMA_AlphaBlending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[110]"></a>_LCD_GetpPalConvTable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lcdconf.o(.text._LCD_GetpPalConvTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetDevFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[111]"></a>_DMA_MixColors</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lcdconf.o(.text._DMA_MixColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _DMA_MixColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[112]"></a>_LCD_MixColorsBulk</STRONG> (Thumb, 240 bytes, Stack size 60 bytes, lcdconf.o(.text._LCD_MixColorsBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _LCD_MixColorsBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcdconf.o(.text.LCD_X_Config)
</UL>
<P><STRONG><a name="[30c]"></a>_GetHandle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, appwizard.o(.text._GetHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _GetHandle &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByRootId
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetValue
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetValue
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetTextItem
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTextLocked
</UL>

<P><STRONG><a name="[bf]"></a>_PID_Hook</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, appwizard.o(.text._PID_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _PID_Hook &rArr; APPW_SendNotification &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SendNotification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard.o(.text.APPW__RegisterPID_Hook)
</UL>
<P><STRONG><a name="[34a]"></a>_DisposeCoord</STRONG> (Thumb, 564 bytes, Stack size 48 bytes, appwizard.o(.text._DisposeCoord))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = _DisposeCoord &rArr;  APPW__DisposeObject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
</UL>

<P><STRONG><a name="[2db]"></a>_DisposeWindow</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, appwizard.o(.text._DisposeWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeWindow
</UL>

<P><STRONG><a name="[2df]"></a>_UndisposeWindow</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, appwizard.o(.text._UndisposeWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = _UndisposeWindow &rArr;  _UndisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UndisposeWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UndisposeWindow
</UL>

<P><STRONG><a name="[33b]"></a>_SetStreamedBitmap</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, appwizard.o(.text._SetStreamedBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _SetStreamedBitmap &rArr; APPW_GetStreamedBitmapInfoEXT &rArr; GUI_GetStreamedBitmapInfoEx &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStreamedBitmapInfoEx
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetMemAccess
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetStreamedBitmapInfoEXT
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetStreamedBitmap
</UL>

<P><STRONG><a name="[306]"></a>_GetTextLocked</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, appwizard.o(.text._GetTextLocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _GetTextLocked &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetLockedText
</UL>

<P><STRONG><a name="[2fd]"></a>_GetAtomValueDetail</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, appwizard.o(.text._GetAtomValueDetail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetAtomValueDetail &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomValue
</UL>

<P><STRONG><a name="[2d4]"></a>_InitDrawing</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, appwizard.o(.text._InitDrawing))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _InitDrawing &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
</UL>

<P><STRONG><a name="[2da]"></a>_BroadcastMessage</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, appwizard.o(.text._BroadcastMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = _BroadcastMessage &rArr;  _BroadcastMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BroadcastMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BroadcastMessage
</UL>

<P><STRONG><a name="[7a4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, appwizard.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeCoord
</UL>

<P><STRONG><a name="[2d3]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BroadcastMessage
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeWindow
</UL>

<P><STRONG><a name="[6be]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appwizard.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; APPW__GetDispose &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeCoord
</UL>

<P><STRONG><a name="[308]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; APPW__GetDispose &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPositionRoot
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UndisposeWindow
</UL>

<P><STRONG><a name="[34d]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; WM_GetNextSibling &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__DisposeObject
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BroadcastMessage
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UndisposeWindow
</UL>

<P><STRONG><a name="[352]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; WM_GetFirstChild &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BroadcastMessage
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UndisposeWindow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeWindow
</UL>

<P><STRONG><a name="[12c]"></a>_Setup</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, obox.o(.text._Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _Setup &rArr; _SetColor &rArr; WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetGradient
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obox.o(.text.WM_OBJECT_BOX_cb)
</UL>
<P><STRONG><a name="[26a]"></a>_SetColor</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, obox.o(.text._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _SetColor &rArr; WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetHasTrans
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obox.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[81b]"></a>_SetGradient</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, obox.o(.text._SetGradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _SetGradient &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[684]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obox.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
</UL>

<P><STRONG><a name="[74a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, obox.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BOX_cb
</UL>

<P><STRONG><a name="[12f]"></a>_Setup</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, obutton.o(.text._Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _Setup &rArr; APPW_SetWidgetFocusable &rArr; WIDGET_SetFocusable &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextOffset
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextAlign
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColors
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MakeFont
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetWidgetFocusable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.text.WM_OBJECT_BUTTON_cb)
</UL>
<P><STRONG><a name="[74e]"></a>_SetValueSub</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, obutton.o(.text._SetValueSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _SetValueSub &rArr; BUTTON_SetPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetPressed
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
</UL>

<P><STRONG><a name="[750]"></a>_GetState</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, obutton.o(.text._GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _GetState &rArr; BUTTON_IsPressed &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_IsPressed
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
</UL>

<P><STRONG><a name="[751]"></a>_NotifyOnValueChanged</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, obutton.o(.text._NotifyOnValueChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _NotifyOnValueChanged &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetState
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Toggle
</UL>

<P><STRONG><a name="[12e]"></a>_Skin</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, obutton.o(.text._Skin))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = _Skin &rArr; BUTTON_DrawSkinFlex &rArr; GUI_DispStringInRect &rArr; GUI_DispStringInRectMax &rArr; GUI__DispStringInRect &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRectEx
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFrameEx
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRectEx
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ReduceRect
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_DrawSkinFlex
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsEnabled
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetState
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRectEx
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawObject
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrameEx
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawFocusRect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBuffered
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.text.WM_OBJECT_BUTTON_Create)
</UL>
<P><STRONG><a name="[26d]"></a>_SetBkColors</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, obutton.o(.text._SetBkColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _SetBkColors &rArr; OUTLINED_FUNCTION_4 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[818]"></a>_SetStreamedBitmap</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, obutton.o(.text._SetStreamedBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _SetStreamedBitmap &rArr; APPW_SetStreamedBitmap &rArr; _SetStreamedBitmap &rArr; APPW_GetStreamedBitmapInfoEXT &rArr; GUI_GetStreamedBitmapInfoEx &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetStreamedBitmap
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBitmap
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[26c]"></a>_SetColor</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, obutton.o(.text._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _SetColor &rArr; OUTLINED_FUNCTION_4 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[26e]"></a>_SetValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, obutton.o(.text._SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _SetValue &rArr; _SetValueSub &rArr; BUTTON_SetPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[26f]"></a>_SetText</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, obutton.o(.text._SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _SetText &rArr; APPW_GetLockedText &rArr; _GetTextLocked &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetLockedText
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[270]"></a>_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, obutton.o(.text._Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _Set &rArr; _SetState &rArr; BUTTON_SetPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[271]"></a>_Clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, obutton.o(.text._Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _Clear &rArr; _SetState &rArr; BUTTON_SetPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[272]"></a>_Toggle</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, obutton.o(.text._Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _Toggle &rArr; BUTTON_SetPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetPressed
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_IsPressed
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOnValueChanged
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[273]"></a>_SetFocus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, obutton.o(.text._SetFocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _SetFocus &rArr; WM_SetFocus &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[274]"></a>_SetBitmap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, obutton.o(.text._SetBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _SetBitmap &rArr; _SetStreamedBitmap &rArr; APPW_SetStreamedBitmap &rArr; _SetStreamedBitmap &rArr; APPW_GetStreamedBitmapInfoEXT &rArr; GUI_GetStreamedBitmapInfoEx &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[275]"></a>_SetItem</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, obutton.o(.text._SetItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _SetItem &rArr; APPW__GetTextItem &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetTextItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> obutton.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[797]"></a>_SetState</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, obutton.o(.text._SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _SetState &rArr; BUTTON_SetPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetPressed
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_IsPressed
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NotifyOnValueChanged
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Set
</UL>

<P><STRONG><a name="[685]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obutton.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_Create
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6a6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obutton.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
</UL>

<P><STRONG><a name="[6bf]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, obutton.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Skin
</UL>

<P><STRONG><a name="[74f]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, obutton.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_BUTTON_cb
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetState
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Toggle
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetState
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueSub
</UL>

<P><STRONG><a name="[6d4]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obutton.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBitmap
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Toggle
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColors
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueSub
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6dc]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obutton.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Toggle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColors
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetState
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueSub
</UL>

<P><STRONG><a name="[131]"></a>_Setup</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, ogauge.o(.text._Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _Setup &rArr; GAUGE_SetBkColor &rArr; WM_SetHasTrans &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetAlign
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetWidth
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValueRange
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRange
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_EnableCCW
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedEnd
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedValue
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRadius
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetBkColor
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetColor
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetOffset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ogauge.o(.text.WM_OBJECT_GAUGE_cb)
</UL>
<P><STRONG><a name="[276]"></a>_AddValue</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ogauge.o(.text._AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _AddValue &rArr; GAUGE_SetValue &rArr; _CalcAngle &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_GetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ogauge.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[277]"></a>_SetValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ogauge.o(.text._SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _SetValue &rArr; GAUGE_SetValue &rArr; _CalcAngle &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ogauge.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[278]"></a>_SetStart</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ogauge.o(.text._SetStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _SetStart &rArr; GAUGE_SetValue &rArr; _CalcAngle &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ogauge.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[279]"></a>_SetEnd</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ogauge.o(.text._SetEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _SetEnd &rArr; GAUGE_SetValue &rArr; _CalcAngle &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ogauge.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[27a]"></a>_SetRange</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ogauge.o(.text._SetRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _SetRange &rArr; GAUGE_SetValueRange &rArr; _CalcAngle &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValueRange
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ogauge.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[686]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ogauge.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetEnd
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStart
</UL>

<P><STRONG><a name="[133]"></a>_Setup</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, oimage.o(.text._Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = _Setup &rArr; _SetStreamedBitmap &rArr; IMAGE_SetDTA &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetFileAccess
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMP
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEG
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_EnableLQ
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetBMPEx
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetJPEGEx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetOffset
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlign
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetTiled
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAngle
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlpha
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetScale
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oimage.o(.text.WM_OBJECT_IMAGE_cb)
</UL>
<P><STRONG><a name="[27b]"></a>_SetColor</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, oimage.o(.text._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _SetColor &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oimage.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[819]"></a>_SetStreamedBitmap</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, oimage.o(.text._SetStreamedBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = _SetStreamedBitmap &rArr; IMAGE_SetDTA &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetFileAccess
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTA
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetDTAEx
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBitmap
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[27c]"></a>_SetBitmap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oimage.o(.text._SetBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _SetBitmap &rArr; _SetStreamedBitmap &rArr; IMAGE_SetDTA &rArr; IMAGE__SetWindowSize &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetStreamedBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oimage.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[27d]"></a>_SetScale</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oimage.o(.text._SetScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _SetScale &rArr; IMAGE_SetScale &rArr; OUTLINED_FUNCTION_3 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oimage.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[27e]"></a>_SetAngle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oimage.o(.text._SetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _SetAngle &rArr; IMAGE_SetAngle &rArr; OUTLINED_FUNCTION_3 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAngle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oimage.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[27f]"></a>_SetAlpha</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oimage.o(.text._SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _SetAlpha &rArr; IMAGE_SetAlpha &rArr; OUTLINED_FUNCTION_3 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oimage.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[687]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oimage.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_IMAGE_cb
</UL>

<P><STRONG><a name="[6a7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oimage.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetFileAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[824]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oimage.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[822]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oimage.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[823]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oimage.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[135]"></a>_Setup</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, oprogbar.o(.text._Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _Setup &rArr; WM_CreateTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetStreamedBitmap
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oprogbar.o(.text.WM_OBJECT_PROGBAR_cb)
</UL>
<P><STRONG><a name="[752]"></a>_SetValueInteraction</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, oprogbar.o(.text._SetValueInteraction))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _SetValueInteraction &rArr; _SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueJob
</UL>

<P><STRONG><a name="[820]"></a>_SetRange</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, oprogbar.o(.text._SetRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _SetRange &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRangeJob
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[821]"></a>_SetValue</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, oprogbar.o(.text._SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueInteraction
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[280]"></a>_AddValue</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oprogbar.o(.text._AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _AddValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oprogbar.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[281]"></a>_SetValueJob</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oprogbar.o(.text._SetValueJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _SetValueJob &rArr; _SetValueInteraction &rArr; _SetValue &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueInteraction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oprogbar.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[282]"></a>_SetRangeJob</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oprogbar.o(.text._SetRangeJob))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _SetRangeJob &rArr; _SetRange &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oprogbar.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[753]"></a>_DrawColors</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, oprogbar.o(.text._DrawColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _DrawColors &rArr; GUI_AA_FillRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
</UL>

<P><STRONG><a name="[754]"></a>_DrawBitmap</STRONG> (Thumb, 816 bytes, Stack size 64 bytes, oprogbar.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _DrawBitmap &rArr; GUI_MEMDEV_CreateFixed32 &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawObjectAt
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawObject
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYSize
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillCircle
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PreserveTrans
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed32
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
</UL>

<P><STRONG><a name="[688]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oprogbar.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6a9]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oprogbar.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValueInteraction
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6c0]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, oprogbar.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_PROGBAR_cb
</UL>

<P><STRONG><a name="[137]"></a>_Setup</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, otext.o(.text._Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = _Setup &rArr; _SetVal &rArr; _SetDecSub &rArr; TEXT__SetDec &rArr; EDIT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MakeFont
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetWrapMode
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetRotation
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetBkColor
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFrameColor
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextOffset
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextAlign
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otext.o(.text.WM_OBJECT_TEXT_cb)
</UL>
<P><STRONG><a name="[758]"></a>_SetVal</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, otext.o(.text._SetVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _SetVal &rArr; _SetDecSub &rArr; TEXT__SetDec &rArr; EDIT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostSet
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDecSub
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[286]"></a>_SetColor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, otext.o(.text._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _SetColor &rArr; TEXT_SetTextColor &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otext.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[283]"></a>_SetValue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, otext.o(.text._SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _SetValue &rArr; _SetVal &rArr; _SetDecSub &rArr; TEXT__SetDec &rArr; EDIT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otext.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[284]"></a>_SetText</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, otext.o(.text._SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _SetText &rArr; APPW_GetLockedText &rArr; _GetTextLocked &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetLockedText
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otext.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[285]"></a>_AddValue</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, otext.o(.text._AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _AddValue &rArr; _SetDecSub &rArr; TEXT__SetDec &rArr; EDIT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDecSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otext.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[287]"></a>_SetItem</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, otext.o(.text._SetItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _SetItem &rArr; APPW__GetTextItem &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetTextItem
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otext.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[78c]"></a>_SetDecSub</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, otext.o(.text._SetDecSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _SetDecSub &rArr; TEXT__SetDec &rArr; EDIT_CreateUser &rArr; WM_CreateWindowAsChild &rArr; WM__SendMsgNoData &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT__SetDec
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PostSet
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddValue
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVal
</UL>

<P><STRONG><a name="[811]"></a>_PostSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, otext.o(.text._PostSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _PostSet &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDecSub
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVal
</UL>

<P><STRONG><a name="[689]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, otext.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_Create
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[6aa]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, otext.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_TEXT_cb
</UL>

<P><STRONG><a name="[138]"></a>WM_OBJECT_TIMER_cb</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, otimer.o(.text.WM_OBJECT_TIMER_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = WM_OBJECT_TIMER_cb &rArr; WIDGET_HandleActive &rArr; WM__UpdateChildPositions &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetTimerActive
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otimer.o(.text.WM_OBJECT_TIMER_Create)
</UL>
<P><STRONG><a name="[139]"></a>_Setup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, otimer.o(.text._Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _Setup &rArr; _SetPeriodSub &rArr; WM_RestartTimer &rArr; GUI_TIMER_Restart &rArr; _Link &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPeriodSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otimer.o(.text.WM_OBJECT_TIMER_cb)
</UL>
<P><STRONG><a name="[81c]"></a>_SetPeriodSub</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, otimer.o(.text._SetPeriodSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _SetPeriodSub &rArr; WM_RestartTimer &rArr; GUI_TIMER_Restart &rArr; _Link &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPeriod
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[288]"></a>_StartTimer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, otimer.o(.text._StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _StartTimer &rArr; WM_CreateTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_RestartTimer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otimer.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[289]"></a>_StopTimer</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, otimer.o(.text._StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _StopTimer &rArr; WM_DeleteTimer &rArr; GUI_TIMER_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otimer.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[28a]"></a>_SetPeriod</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, otimer.o(.text._SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _SetPeriod &rArr; _SetPeriodSub &rArr; WM_RestartTimer &rArr; GUI_TIMER_Restart &rArr; _Link &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPeriodSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otimer.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[81d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, otimer.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopTimer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartTimer
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPeriodSub
</UL>

<P><STRONG><a name="[13b]"></a>_Setup</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, owindow.o(.text._Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _Setup &rArr; WM_SetStayOnTop &rArr; WM_AttachWindow &rArr; WM_DetachWindow &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ClrHasTrans
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__SetUnTouchable
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetStayOnTop
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MOTION_SetMoveable
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> owindow.o(.text.WM_OBJECT_WINDOW_cb)
</UL>
<P><STRONG><a name="[68a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, owindow.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
</UL>

<P><STRONG><a name="[6ab]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, owindow.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OBJECT_WINDOW_cb
</UL>

<P><STRONG><a name="[6c1]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, owindow.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Setup
</UL>

<P><STRONG><a name="[f0]"></a>_OnExit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui__alpha.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui__alpha.o(.text.GUI__GetAlphaBuffer)
</UL>
<P><STRONG><a name="[43b]"></a>_InitOnce</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gui_alloc.o(.text._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>

<P><STRONG><a name="[43d]"></a>_RemoveHoles</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gui_alloc.o(.text._RemoveHoles))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _RemoveHoles &rArr; _AddFreeMemory &rArr; _RemoveFreeBlock &rArr; _GetMinIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>

<P><STRONG><a name="[43e]"></a>_RemoveFreeBlock</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_alloc.o(.text._RemoveFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _RemoveFreeBlock &rArr; _GetMinIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>

<P><STRONG><a name="[439]"></a>_AddFreeMemory</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gui_alloc.o(.text._AddFreeMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _AddFreeMemory &rArr; _RemoveFreeBlock &rArr; _GetMinIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>

<P><STRONG><a name="[438]"></a>_Alloc</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, gui_alloc.o(.text._Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushFreeBlock
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinIndex
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHoles
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EnlargeBlocks
</UL>

<P><STRONG><a name="[78e]"></a>_EnlargeBlocks</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gui_alloc.o(.text._EnlargeBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>

<P><STRONG><a name="[786]"></a>_GetMinIndex</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_alloc.o(.text._GetMinIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetMinIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveFreeBlock
</UL>

<P><STRONG><a name="[43a]"></a>_PushFreeBlock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_alloc.o(.text._PushFreeBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _PushFreeBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Alloc
</UL>

<P><STRONG><a name="[43c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_alloc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddFreeMemory
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
</UL>

<P><STRONG><a name="[447]"></a>_GethAnim</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_anim.o(.text._GethAnim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GethAnim
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Get
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StopById
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
</UL>

<P><STRONG><a name="[cc]"></a>_OnExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_anim.o(.text._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> gui_anim.o(.text.GUI_ANIM_CreateWithId)
</UL>
<P><STRONG><a name="[456]"></a>_Start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_anim.o(.text._Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Start &rArr; _ResetItems &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResetItems
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StartEx
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Start
</UL>

<P><STRONG><a name="[cd]"></a>_ExecAnimations</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gui_anim.o(.text._ExecAnimations))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _ExecAnimations &rArr; GUI_ANIM_Exec &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Exec
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Start
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopAnim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_anim.o(.text.GUI_ANIM_StartEx)
</UL>
<P><STRONG><a name="[459]"></a>_StopAuto</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, gui_anim.o(.text._StopAuto))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _StopAuto &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StopById
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Stop
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopAnim
</UL>

<P><STRONG><a name="[44c]"></a>_ResetItems</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gui_anim.o(.text._ResetItems))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ResetItems &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Exec
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Start
</UL>

<P><STRONG><a name="[7dd]"></a>_StopAnim</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_anim.o(.text._StopAnim))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _StopAnim &rArr; GUI_ANIM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Delete
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopAuto
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecAnimations
</UL>

<P><STRONG><a name="[449]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_anim.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_IsRunning
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Get
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StopById
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Stop
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StartEx
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Start
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Delete
</UL>

<P><STRONG><a name="[44f]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_anim.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_GetItemDataLocked
</UL>

<P><STRONG><a name="[454]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_anim.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_SetItemData
</UL>

<P><STRONG><a name="[444]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_anim.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StartEx
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Delete
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
</UL>

<P><STRONG><a name="[450]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_anim.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_GetItemDataLocked
</UL>

<P><STRONG><a name="[443]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_anim.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Delete
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopAuto
</UL>

<P><STRONG><a name="[25e]"></a>_GetNonExistingCharWidth</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_char.o(.text._GetNonExistingCharWidth))
<BR>[Address Reference Count : 1]<UL><LI> gui_char.o(.rodata._NonExistingCharacter)
</UL>
<P><STRONG><a name="[25f]"></a>_DrawNonExistingCharacter</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, gui_char.o(.text._DrawNonExistingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DrawNonExistingCharacter &rArr; GUI__GetNonExistingCharWidth &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddRect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNonExistingCharWidth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_char.o(.rodata._NonExistingCharacter)
</UL>
<P><STRONG><a name="[260]"></a>_GetNonExistingCharWidth_Dummy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_char.o(.text._GetNonExistingCharWidth_Dummy))
<BR>[Address Reference Count : 1]<UL><LI> gui_char.o(.rodata._NonExistingCharacter_Dummy)
</UL>
<P><STRONG><a name="[261]"></a>_DrawNonExistingCharacter_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui_char.o(.text._DrawNonExistingCharacter_Dummy))
<BR>[Address Reference Count : 1]<UL><LI> gui_char.o(.rodata._NonExistingCharacter_Dummy)
</UL>
<P><STRONG><a name="[5f3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_char.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
</UL>

<P><STRONG><a name="[4fe]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_common.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFallbackFont
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextAlign
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColorIndex
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenShape
</UL>

<P><STRONG><a name="[4f9]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_common.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
</UL>

<P><STRONG><a name="[504]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_common.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetOrg
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetOrg
</UL>

<P><STRONG><a name="[45c]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_common.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddHex
</UL>

<P><STRONG><a name="[ee]"></a>_OnExit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gui_core.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_core.o(.text.GUI__Config)
</UL>
<P><STRONG><a name="[e6]"></a>_OnExit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gui_multibuf.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_multibuf.o(.text.GUI_MULTIBUF_ConfigEx)
</UL>
<P><STRONG><a name="[501]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_selectlayer.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetLayerPosEx
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
</UL>

<P><STRONG><a name="[5b6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_selectlayer.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLayerPosEx
</UL>

<P><STRONG><a name="[227]"></a>_Color2Index_M8888I</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guicc_m8888i.o(.text._Color2Index_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
</UL>
<P><STRONG><a name="[228]"></a>_GetIndexMask_M8888I</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m8888i.o(.text._GetIndexMask_M8888I))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
</UL>
<P><STRONG><a name="[229]"></a>_Color2IndexBulk_M8888I</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guicc_m8888i.o(.text._Color2IndexBulk_M8888I))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Color2IndexBulk_M8888I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
</UL>
<P><STRONG><a name="[22a]"></a>_Index2ColorBulk_M8888I</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guicc_m8888i.o(.text._Index2ColorBulk_M8888I))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Index2ColorBulk_M8888I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m8888i.o(.rodata.LCD_API_ColorConv_M8888I)
</UL>
<P><STRONG><a name="[105]"></a>_OnExit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_color.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_color.o(.text.LCD_InitColors)
</UL>
<P><STRONG><a name="[645]"></a>_GetDevProp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_getex.o(.text._GetDevProp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVYSizeEx
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeEx
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMaxValue
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColorsEx
</UL>

<P><STRONG><a name="[650]"></a>_GetMaxValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcd_getex.o(.text._GetMaxValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetMaxValue &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDevProp
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetVXSizeMax
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeMax
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeMax
</UL>

<P><STRONG><a name="[64e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_set.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
</UL>

<P><STRONG><a name="[64d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_set.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDevFunc
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVSizeEx
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetSizeEx
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLUTEntryEx
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPosEx
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPosEx
</UL>

<P><STRONG><a name="[66f]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_set.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
</UL>

<P><STRONG><a name="[66e]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_set.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetVRAMAddrEx
</UL>

<P><STRONG><a name="[1cb]"></a>_DrawBitmap</STRONG> (Thumb, 1216 bytes, Stack size 64 bytes, guidrv_lin_oxy_32.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DrawBitmap &rArr; OUTLINED_FUNCTION_2 &rArr; _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1cc]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _DrawHLine &rArr; _FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1cd]"></a>_DrawVLine</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _DrawVLine &rArr; _FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1ce]"></a>_FillRect</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, guidrv_lin_oxy_32.o(.text._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1cf]"></a>_GetPixelIndex</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1d0]"></a>_SetPixelIndex</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1d1]"></a>_XorPixel</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, guidrv_lin_oxy_32.o(.text._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _XorPixel &rArr; _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1d2]"></a>_SetOrg</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, guidrv_lin_oxy_32.o(.text._SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _SetOrg &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetSwapXYEx
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorYEx
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetMirrorXEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1d3]"></a>_GetDevFunc</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, guidrv_lin_oxy_32.o(.text._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1d4]"></a>_GetDevProp</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, guidrv_lin_oxy_32.o(.text._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1d5]"></a>_GetDevData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, guidrv_lin_oxy_32.o(.text._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[1d6]"></a>_GetRect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, guidrv_lin_oxy_32.o(.text._GetRect))
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.rodata.GUIDRV_Lin_OXY_32_API)
</UL>
<P><STRONG><a name="[15c]"></a>_SetVRAMAddr</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, guidrv_lin_oxy_32.o(.text._SetVRAMAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _SetVRAMAddr &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[16e]"></a>_SetVRAM_BufferPTR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._SetVRAM_BufferPTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SetVRAM_BufferPTR &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[16d]"></a>_SetVSize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._SetVSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SetVSize &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[16c]"></a>_SetSize</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, guidrv_lin_oxy_32.o(.text._SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _SetSize &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[16b]"></a>_SetPos</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, guidrv_lin_oxy_32.o(.text._SetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = _SetPos &rArr; _SetVis &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeDisplay
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeDisplay
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[16a]"></a>_GetPos</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._GetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _GetPos &rArr; OUTLINED_FUNCTION_1 &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[169]"></a>_SetAlpha</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, guidrv_lin_oxy_32.o(.text._SetAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _SetAlpha &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[168]"></a>_SetVis</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, guidrv_lin_oxy_32.o(.text._SetVis))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _SetVis &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[167]"></a>_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _Init &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[166]"></a>_OnExit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, guidrv_lin_oxy_32.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[165]"></a>_On</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_lin_oxy_32.o(.text._On))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _On &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[164]"></a>_Off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_lin_oxy_32.o(.text._Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _Off &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[163]"></a>_SetAlphaMode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._SetAlphaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _SetAlphaMode &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[162]"></a>_SetChromaMode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._SetChromaMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _SetChromaMode &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[161]"></a>_SetChroma</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._SetChroma))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _SetChroma &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[160]"></a>_CopyBuffer</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, guidrv_lin_oxy_32.o(.text._CopyBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _CopyBuffer &rArr; OUTLINED_FUNCTION_1 &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[15f]"></a>_ShowBuffer</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, guidrv_lin_oxy_32.o(.text._ShowBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _ShowBuffer &rArr; LCD_X_DisplayDriver &rArr; LCD_X_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_X_DisplayDriver
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[15e]"></a>_SetDevFunc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, guidrv_lin_oxy_32.o(.text._SetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _SetDevFunc &rArr; OUTLINED_FUNCTION_1 &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[15d]"></a>_ReadRect</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, guidrv_lin_oxy_32.o(.text._ReadRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _ReadRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidrv_lin_oxy_32.o(.text._GetDevFunc)
</UL>
<P><STRONG><a name="[68c]"></a>_InitOnce</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, guidrv_lin_oxy_32.o(.text._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPos
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVSize
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAM_BufferPTR
</UL>

<P><STRONG><a name="[68b]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidrv_lin_oxy_32.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowBuffer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVis
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAlpha
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetSize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetVRAMAddr
</UL>

<P><STRONG><a name="[6ac]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidrv_lin_oxy_32.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDevFunc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyBuffer
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
</UL>

<P><STRONG><a name="[6c2]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidrv_lin_oxy_32.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[124]"></a>_cbInvalidateOne</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_lib.o(.text._cbInvalidateOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _cbInvalidateOne &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_lib.o(.text.WM_BringToTop)
</UL>
<P><STRONG><a name="[728]"></a>__GetDialogItem</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wm_lib.o(.text.__GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
</UL>

<P><STRONG><a name="[7fa]"></a>_GetDialogItem</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm_lib.o(.text._GetDialogItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[68d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetUserClipRect
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetStayOnTop
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_OnKey
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgY
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFlags
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetEnableState
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BroadcastMessage
</UL>

<P><STRONG><a name="[6ad]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRectEx
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessageNoPara
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendToParent
</UL>

<P><STRONG><a name="[6c3]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetYSize
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetXSize
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetStayOnTop
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ValidateWindow
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetEnableState
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
</UL>

<P><STRONG><a name="[6cc]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetNextSibling
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescs
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsFocusable
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgY
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFlags
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
</UL>

<P><STRONG><a name="[6d5]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[737]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HasFocus
</UL>

<P><STRONG><a name="[6e5]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ForEachDesc
</UL>

<P><STRONG><a name="[6e9]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetCallback
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_AttachWindow
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DetachWindow
</UL>

<P><STRONG><a name="[6eb]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocus
</UL>

<P><STRONG><a name="[6ee]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; GUI_Unlock &rArr; GUI_X_Unlock &rArr; osMutexRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsWindow
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
</UL>

<P><STRONG><a name="[6b9]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; WM_GetParent &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetStayOnTop
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToBottom
</UL>

<P><STRONG><a name="[6bc]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetDialogItem
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDialogItem
</UL>

<P><STRONG><a name="[72b]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_lib.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetInsideRectExScrollbar
</UL>

<P><STRONG><a name="[401]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guiaa_circle.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI__sqrt32
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes_XL
</UL>

<P><STRONG><a name="[3e9]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guiaa_circle.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes_XL
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircleAA_HiRes
</UL>

<P><STRONG><a name="[3fb]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guiaa_circle.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircleAA_HiRes
</UL>

<P><STRONG><a name="[3ff]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_circle.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI__sqrt32
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseAA_HiRes
</UL>

<P><STRONG><a name="[428]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_circle.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillEllipseXL
</UL>

<P><STRONG><a name="[429]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guiaa_circle.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillEllipseXL
</UL>

<P><STRONG><a name="[419]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guiaa_circle.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillCircle
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
</UL>

<P><STRONG><a name="[422]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, guiaa_drawroundedrect.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrameEx
</UL>

<P><STRONG><a name="[424]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_drawroundedrect.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedRect
</UL>

<P><STRONG><a name="[421]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_drawroundedrect.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI__sqrt32
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
</UL>

<P><STRONG><a name="[420]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guiaa_drawroundedrect.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI__sqrt32
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
</UL>

<P><STRONG><a name="[41f]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guiaa_drawroundedrect.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
</UL>

<P><STRONG><a name="[42e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, guiaa_fillroundedrect.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
</UL>

<P><STRONG><a name="[42b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_fillroundedrect.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
</UL>

<P><STRONG><a name="[42d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guiaa_fillroundedrect.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
</UL>

<P><STRONG><a name="[42c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guiaa_fillroundedrect.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
</UL>

<P><STRONG><a name="[c8]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guiaa_lib.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiaa_lib.o(.text.GUI_AA_Init)
</UL>
<P><STRONG><a name="[c9]"></a>_DrawHLine</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, guiaa_lib.o(.text._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _DrawHLine &rArr; _FlushLine &rArr; LCD_SetPixelAA4_Trans &rArr; OUTLINED_FUNCTION_4 &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiaa_lib.o(.text.GUI_AA_Init)
</UL>
<P><STRONG><a name="[431]"></a>_CleanLine</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, guiaa_lib.o(.text._CleanLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _CleanLine
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushLine
</UL>

<P><STRONG><a name="[432]"></a>_CalcClipRectHL</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, guiaa_lib.o(.text._CalcClipRectHL))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_SetFactor
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Init
</UL>

<P><STRONG><a name="[425]"></a>_FlushLine</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, guiaa_lib.o(.text._FlushLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _FlushLine &rArr; LCD_SetPixelAA4_Trans &rArr; OUTLINED_FUNCTION_4 &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CleanLine
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_Exit
</UL>

<P><STRONG><a name="[28b]"></a>_ACTION_SetVis</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, appwizard_action.o(.text._ACTION_SetVis))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _ACTION_SetVis &rArr; OUTLINED_FUNCTION_3 &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsVisible
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[28c]"></a>_ACTION_SetCoord</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_SetCoord))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _ACTION_SetCoord &rArr; _SetCoord &rArr; _SetDisposeCoord &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetCoord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[28d]"></a>_ACTION_SetSize</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, appwizard_action.o(.text._ACTION_SetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _ACTION_SetSize &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[28e]"></a>_ACTION_ShiftScreen</STRONG> (Thumb, 488 bytes, Stack size 136 bytes, appwizard_action.o(.text._ACTION_ShiftScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = _ACTION_ShiftScreen &rArr; APPW_CreateRoot &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetCurrentRootInfo
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MoveDispose
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SendNotification
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByRootId
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StartEx
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Create
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AllocZero
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[28f]"></a>_ACTION_ShiftWindow</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, appwizard_action.o(.text._ACTION_ShiftWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _ACTION_ShiftWindow &rArr; APPW_SetDefaultPosition &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPosition
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByHandle
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MoveDispose
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDialogItem
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StartEx
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Create
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AllocZero
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringBehind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[290]"></a>_ACTION_ShowScreen</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_ShowScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _ACTION_ShowScreen &rArr; _ShowScreen &rArr; APPW_CreateRoot &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[291]"></a>_ACTION_SetLang</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, appwizard_action.o(.text._ACTION_SetLang))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _ACTION_SetLang &rArr; WM_BroadcastMessage &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_SetLang
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BroadcastMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[292]"></a>_ACTION_EnablePID</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_EnablePID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ACTION_EnablePID
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_EnablePID
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabledPID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[293]"></a>_ACTION_CloseScreen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_CloseScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _ACTION_CloseScreen &rArr; APPW_GetRoot &rArr; OUTLINED_FUNCTION_3 &rArr; APPW__GetDispose &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByHandle
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByRootId
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindowSecure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[294]"></a>_ACTION_SetX0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_SetX0))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _ACTION_SetX0 &rArr; _SetCoord &rArr; _SetDisposeCoord &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetCoord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[295]"></a>_ACTION_SetY0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_SetY0))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _ACTION_SetY0 &rArr; _SetCoord &rArr; _SetDisposeCoord &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetCoord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[296]"></a>_ACTION_SetX1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_SetX1))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _ACTION_SetX1 &rArr; _SetCoord &rArr; _SetDisposeCoord &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetCoord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[297]"></a>_ACTION_SetY1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_SetY1))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _ACTION_SetY1 &rArr; _SetCoord &rArr; _SetDisposeCoord &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetCoord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[298]"></a>_ACTION_ModalMessage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_ModalMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = _ACTION_ModalMessage &rArr; _ShowScreen &rArr; APPW_CreateRoot &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MakeModal
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[299]"></a>_ACTION_AnimCreate</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, appwizard_action.o(.text._ACTION_AnimCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _ACTION_AnimCreate &rArr; GUI_ANIM_AddItem &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_SetItemData
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Get
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_CreateWithId
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_AddItem
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[29a]"></a>_ACTION_AnimStop</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, appwizard_action.o(.text._ACTION_AnimStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ACTION_AnimStop &rArr; GUI_ANIM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_GetNext
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_GetFirst
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Get
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StopById
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Stop
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[29b]"></a>_ACTION_AnimStart</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, appwizard_action.o(.text._ACTION_AnimStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _ACTION_AnimStart &rArr; OUTLINED_FUNCTION_6 &rArr; GUI_ANIM_StartEx &rArr; _Start &rArr; _ResetItems &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_IsRunning
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_Get
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[29c]"></a>_ACTION_Invalidate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_Invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _ACTION_Invalidate &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[29d]"></a>_ACTION_RotateDisplay</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, appwizard_action.o(.text._ACTION_RotateDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _ACTION_RotateDisplay &rArr; _SetRotationIndex &rArr; OUTLINED_FUNCTION_3 &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_GetCurrentIndex
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_GetOrientation
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_GetNumDrivers
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotationIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobs)
</UL>
<P><STRONG><a name="[782]"></a>_SetCoord</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, appwizard_action.o(.text._SetCoord))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _SetCoord &rArr; _SetDisposeCoord &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDisposeCoord
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetY1
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetX1
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetY0
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetX0
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetCoord
</UL>

<P><STRONG><a name="[817]"></a>_SetDisposeCoord</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, appwizard_action.o(.text._SetDisposeCoord))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _SetDisposeCoord &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAtomValueDisposeDetail
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetCoord
</UL>

<P><STRONG><a name="[784]"></a>_DisposeObjectAndDependent</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, appwizard_action.o(.text._DisposeObjectAndDependent))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetFirstChild
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
</UL>
<BR>[Called By]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAtomValueDisposeDetail
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDisposeCoord
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetSize
</UL>

<P><STRONG><a name="[785]"></a>_AllocZero</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, appwizard_action.o(.text._AllocZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _AllocZero &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[13f]"></a>_AnimFuncShift</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, appwizard_action.o(.text._AnimFuncShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _AnimFuncShift &rArr; OUTLINED_FUNCTION_3 &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MoveDispose
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SendNotification
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.text._ACTION_ShiftWindow)
</UL>
<P><STRONG><a name="[13e]"></a>_AnimFuncShiftScreenEnd</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, appwizard_action.o(.text._AnimFuncShiftScreenEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _AnimFuncShiftScreenEnd &rArr; APPW_SendNotification &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByHandle
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SendNotification
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveCriticalHandle
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindowSecure
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Free
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsPersistent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.text._ACTION_ShiftScreen)
</UL>
<P><STRONG><a name="[791]"></a>_IsPersistent</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, appwizard_action.o(.text._IsPersistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _IsPersistent &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteScreenIfNotPersistent
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ShowScreen
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftScreenEnd
</UL>

<P><STRONG><a name="[792]"></a>_Free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, appwizard_action.o(.text._Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _Free &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftWindowEnd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftScreenEnd
</UL>

<P><STRONG><a name="[140]"></a>_AnimFuncShiftWindowEnd</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, appwizard_action.o(.text._AnimFuncShiftWindowEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _AnimFuncShiftWindowEnd &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveCriticalHandle
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.text._ACTION_ShiftWindow)
</UL>
<P><STRONG><a name="[77e]"></a>_ShowScreen</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, appwizard_action.o(.text._ShowScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = _ShowScreen &rArr; APPW_CreateRoot &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CreateRoot
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetCurrentRootInfo
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetDefaultPositionRoot
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRoot
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByRootId
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindowSecure
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsPersistent
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HideWindow
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ShowWindow
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_BringToTop
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ModalMessage
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShowScreen
</UL>

<P><STRONG><a name="[13d]"></a>_AnimFunc</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, appwizard_action.o(.text._AnimFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = _AnimFunc &rArr; _SetAtomValueDisposeDetail &rArr; _SetDisposeCoord &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomValue
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomInfo
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetValue
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_GetItemDataLocked
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetVarData
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetAtomValueDisposeDetail
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendStartStopNotification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.text._ACTION_AnimCreate)
</UL>
<P><STRONG><a name="[78f]"></a>_SendStartStopNotification</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, appwizard_action.o(.text._SendStartStopNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _SendStartStopNotification &rArr; APPW_GetAtomInfo &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetAtomInfo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFunc
</UL>

<P><STRONG><a name="[790]"></a>_SetAtomValueDisposeDetail</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, appwizard_action.o(.text._SetAtomValueDisposeDetail))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = _SetAtomValueDisposeDetail &rArr; _SetDisposeCoord &rArr; _DisposeObjectAndDependent &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDisposeCoord
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFunc
</UL>

<P><STRONG><a name="[781]"></a>_SetRotationIndex</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, appwizard_action.o(.text._SetRotationIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = _SetRotationIndex &rArr; OUTLINED_FUNCTION_3 &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SendNotification
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_SetSel
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_RotateDisplay
</UL>

<P><STRONG><a name="[29e]"></a>_ACTION_SetValue</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, appwizard_action.o(.text._ACTION_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _ACTION_SetValue &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobsVar)
</UL>
<P><STRONG><a name="[29f]"></a>_ACTION_AddValue</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, appwizard_action.o(.text._ACTION_AddValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _ACTION_AddValue &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobsVar)
</UL>
<P><STRONG><a name="[2a0]"></a>_ACTION_CalcVar</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, appwizard_action.o(.text._ACTION_CalcVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _ACTION_CalcVar &rArr; APPW_CalcTerm &rArr; APPW_GetAtomValue &rArr; APPW_GetValue &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CalcTerm
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVar
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_action.o(.rodata._aJobsVar)
</UL>
<P><STRONG><a name="[6ea]"></a>_ProcessMotionInit</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, appwizard_action.o(.text._ProcessMotionInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _ProcessMotionInit &rArr; APPW__GetDispose &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>

<P><STRONG><a name="[328]"></a>_CalculateMovingRange</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, appwizard_action.o(.text._CalculateMovingRange))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
</UL>

<P><STRONG><a name="[32a]"></a>_DeleteScreenIfNotPersistent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, appwizard_action.o(.text._DeleteScreenIfNotPersistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _DeleteScreenIfNotPersistent &rArr; _IsPersistent &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsWindow
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetRootInfoByHandle
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindowSecure
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsPersistent
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
</UL>

<P><STRONG><a name="[330]"></a>_DragWindow</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, appwizard_action.o(.text._DragWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _DragWindow &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_MoveDispose
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW__GetDispose
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[32f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, appwizard_action.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
</UL>

<P><STRONG><a name="[32b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard_action.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMotionInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftWindowEnd
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftWindow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
</UL>

<P><STRONG><a name="[32d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, appwizard_action.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _DragWindow &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DragWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
</UL>

<P><STRONG><a name="[6cd]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard_action.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; APPW_Dispose &rArr; _DisposeWindow &rArr;  _DisposeWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_Dispose
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRotationIndex
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShift
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DisposeObjectAndDependent
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_ShiftScreen
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_SetVis
</UL>

<P><STRONG><a name="[32e]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, appwizard_action.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
</UL>

<P><STRONG><a name="[6dd]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_action.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; WM__RemoveCriticalHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveCriticalHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftWindowEnd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AnimFuncShiftScreenEnd
</UL>

<P><STRONG><a name="[6e6]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_action.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; GUI_ANIM_StartEx &rArr; _Start &rArr; _ResetItems &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ANIM_StartEx
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimStart
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ACTION_AnimCreate
</UL>

<P><STRONG><a name="[327]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appwizard_action.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; _ProcessMotionInit &rArr; APPW__GetDispose &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMotionInit
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_ProcessMotion
</UL>

<P><STRONG><a name="[19c]"></a>_Func_CLEAR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_CLEAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _Func_CLEAR &rArr; GUI_Clear &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[19d]"></a>_Func_COPY_RECT</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, appwizard_drawing.o(.text._Func_COPY_RECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = _Func_COPY_RECT &rArr; GUI_CopyRect &rArr; OUTLINED_FUNCTION_0 &rArr; _CopyRect &rArr; _CopyHLines &rArr; GUI_DrawPixel &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CopyRect
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[19e]"></a>_Func_DRAW_ARC</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, appwizard_drawing.o(.text._Func_DRAW_ARC))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _Func_DRAW_ARC &rArr; GUI_DrawArcHR &rArr; OUTLINED_FUNCTION_3 &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawArcHR
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[19f]"></a>_Func_DRAW_CIRCLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_DRAW_CIRCLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = _Func_DRAW_CIRCLE &rArr; GUI_DrawCircle &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a0]"></a>_Func_DRAW_ELLIPSE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_drawing.o(.text._Func_DRAW_ELLIPSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _Func_DRAW_ELLIPSE &rArr; GUI_DrawEllipseXL &rArr; _DrawEllipse &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipseXL
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a1]"></a>_Func_DRAW_GRADIENT_H</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, appwizard_drawing.o(.text._Func_DRAW_GRADIENT_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _Func_DRAW_GRADIENT_H &rArr; GUI_DrawGradientH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a2]"></a>_Func_DRAW_GRADIENT_V</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, appwizard_drawing.o(.text._Func_DRAW_GRADIENT_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _Func_DRAW_GRADIENT_V &rArr; GUI_DrawGradientV &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a3]"></a>_Func_DRAW_GRADIENT_ROUNDED_H</STRONG> (Thumb, 12 bytes, Stack size 32 bytes, appwizard_drawing.o(.text._Func_DRAW_GRADIENT_ROUNDED_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _Func_DRAW_GRADIENT_ROUNDED_H &rArr; GUI_DrawGradientRoundedH &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a4]"></a>_Func_DRAW_GRADIENT_ROUNDED_V</STRONG> (Thumb, 12 bytes, Stack size 32 bytes, appwizard_drawing.o(.text._Func_DRAW_GRADIENT_ROUNDED_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _Func_DRAW_GRADIENT_ROUNDED_V &rArr; GUI_DrawGradientRoundedV &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a5]"></a>_Func_DRAW_HLINE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_DRAW_HLINE))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _Func_DRAW_HLINE &rArr; GUI_DrawHLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a6]"></a>_Func_DRAW_LINE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_drawing.o(.text._Func_DRAW_LINE))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _Func_DRAW_LINE &rArr; GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a7]"></a>_Func_DRAW_LINE_REL</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_DRAW_LINE_REL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _Func_DRAW_LINE_REL &rArr; GUI_DrawLineRel &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a8]"></a>_Func_DRAW_LINE_TO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_DRAW_LINE_TO))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _Func_DRAW_LINE_TO &rArr; GUI_DrawLineTo &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1a9]"></a>_Func_DRAW_PIE</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, appwizard_drawing.o(.text._Func_DRAW_PIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _Func_DRAW_PIE &rArr; GUI_DrawPieHR &rArr; _DrawPie &rArr; GL_DrawArcHR &rArr; OUTLINED_FUNCTION_4 &rArr; _DrawArc &rArr; GUI__SinHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPieHR
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1aa]"></a>_Func_DRAW_PIXEL</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_DRAW_PIXEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _Func_DRAW_PIXEL &rArr; GUI_DrawPixel &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1ab]"></a>_Func_DRAW_POINT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_DRAW_POINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _Func_DRAW_POINT &rArr; GUI_DrawPoint &rArr; OUTLINED_FUNCTION_0 &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1ac]"></a>_Func_DRAW_RECT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_drawing.o(.text._Func_DRAW_RECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _Func_DRAW_RECT &rArr; GUI_DrawRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1ad]"></a>_Func_DRAW_ROUNDED_FRAME</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, appwizard_drawing.o(.text._Func_DRAW_ROUNDED_FRAME))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = _Func_DRAW_ROUNDED_FRAME &rArr; GUI_DrawRoundedFrame &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedFrame
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1ae]"></a>_Func_DRAW_ROUNDED_RECT</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, appwizard_drawing.o(.text._Func_DRAW_ROUNDED_RECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _Func_DRAW_ROUNDED_RECT &rArr; GUI_DrawRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRoundedRect
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1af]"></a>_Func_DRAW_VLINE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_DRAW_VLINE))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _Func_DRAW_VLINE &rArr; GUI_DrawVLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawVLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b0]"></a>_Func_ENABLE_ALPHA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_ENABLE_ALPHA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _Func_ENABLE_ALPHA &rArr; GUI_EnableAlpha &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_EnableAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b1]"></a>_Func_FILL_CIRCLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_FILL_CIRCLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _Func_FILL_CIRCLE &rArr; GUI_FillCircle &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b2]"></a>_Func_FILL_ELLIPSE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_drawing.o(.text._Func_FILL_ELLIPSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _Func_FILL_ELLIPSE &rArr; GUI_FillEllipseXL &rArr; _FillEllipse &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipseXL
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b3]"></a>_Func_FILL_RECT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_drawing.o(.text._Func_FILL_RECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _Func_FILL_RECT &rArr; GUI_FillRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b4]"></a>_Func_FILL_ROUNDED_RECT</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, appwizard_drawing.o(.text._Func_FILL_ROUNDED_RECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _Func_FILL_ROUNDED_RECT &rArr; GUI_FillRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRoundedRect
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b5]"></a>_Func_INVERT_RECT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_drawing.o(.text._Func_INVERT_RECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _Func_INVERT_RECT &rArr; GUI_InvertRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b6]"></a>_Func_MOVE_REL</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_MOVE_REL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Func_MOVE_REL &rArr; GUI_MoveRel &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b7]"></a>_Func_MOVE_TO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_MOVE_TO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Func_MOVE_TO &rArr; GUI_MoveTo &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveTo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b8]"></a>_Func_SET_BLENDBKCOLOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_SET_BLENDBKCOLOR))
<BR><BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBlendBkColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1b9]"></a>_Func_SET_BLENDBKCOLOREX</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_SET_BLENDBKCOLOREX))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Func_SET_BLENDBKCOLOREX &rArr; GUI_SetBlendBkColorEx &rArr; GUI_SetBkColor &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBlendBkColorEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1ba]"></a>_Func_SET_BLENDCOLOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_SET_BLENDCOLOR))
<BR><BR>[Calls]<UL><LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBlendColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1bb]"></a>_Func_SET_BLENDCOLOREX</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_SET_BLENDCOLOREX))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Func_SET_BLENDCOLOREX &rArr; GUI_SetBlendColorEx &rArr; GUI_SetColor &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBlendColorEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1bc]"></a>_Func_SET_BKCOLOR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_SET_BKCOLOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Func_SET_BKCOLOR &rArr; GUI_SetBkColor &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1bd]"></a>_Func_SET_COLOR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_SET_COLOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _Func_SET_COLOR &rArr; GUI_SetColor &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1be]"></a>_Func_SET_PENSIZE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_SET_PENSIZE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Func_SET_PENSIZE &rArr; GUI_SetPenSize &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1bf]"></a>_Func_SET_LINESTYLE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_SET_LINESTYLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Func_SET_LINESTYLE &rArr; GUI_SetLineStyle &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetLineStyle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c0]"></a>_Func_AA_DISABLE_HIRES</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_AA_DISABLE_HIRES))
<BR><BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DisableHiRes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c1]"></a>_Func_AA_DRAW_ARC</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, appwizard_drawing.o(.text._Func_AA_DRAW_ARC))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _Func_AA_DRAW_ARC &rArr; GUI_AA_DrawArcHR &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawArcHR
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c2]"></a>_Func_AA_DRAW_CIRCLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_AA_DRAW_CIRCLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _Func_AA_DRAW_CIRCLE &rArr; GUI_AA_DrawCircle &rArr; GL_DrawCircleAA_HiRes &rArr; GUI_AA_Init_HiRes &rArr; GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawCircle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c3]"></a>_Func_AA_DRAW_LINE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_drawing.o(.text._Func_AA_DRAW_LINE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _Func_AA_DRAW_LINE &rArr; GUI_AA_DrawLine &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawLine
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c4]"></a>_Func_AA_DRAW_PIE</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, appwizard_drawing.o(.text._Func_AA_DRAW_PIE))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _Func_AA_DRAW_PIE &rArr; GUI_AA_DrawPie &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawPie
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c5]"></a>_Func_AA_DRAW_ROUNDED_FRAME</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, appwizard_drawing.o(.text._Func_AA_DRAW_ROUNDED_FRAME))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _Func_AA_DRAW_ROUNDED_FRAME &rArr; GUI_AA_DrawRoundedFrame &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_DrawRoundedFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c6]"></a>_Func_AA_ENABLE_HIRES</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_AA_ENABLE_HIRES))
<BR><BR>[Calls]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_EnableHiRes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c7]"></a>_Func_AA_FILL_CIRCLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_AA_FILL_CIRCLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _Func_AA_FILL_CIRCLE &rArr; GUI_AA_FillCircle &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillCircle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c8]"></a>_Func_AA_FILL_ELLIPSE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appwizard_drawing.o(.text._Func_AA_FILL_ELLIPSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _Func_AA_FILL_ELLIPSE &rArr; GUI_AA_FillEllipseXL &rArr; GL_FillEllipseAA_HiRes_XL &rArr; GUI_AA_Init_HiRes &rArr; GUI_AA_Init &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillEllipseXL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1c9]"></a>_Func_AA_FILL_ROUNDED_RECT</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, appwizard_drawing.o(.text._Func_AA_FILL_ROUNDED_RECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _Func_AA_FILL_ROUNDED_RECT &rArr; GUI_AA_FillRoundedRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_FillRoundedRect
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[1ca]"></a>_Func_AA_SET_FACTOR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appwizard_drawing.o(.text._Func_AA_SET_FACTOR))
<BR><BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA_SetFactor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_drawing.o(.rodata.APPW__aDrawingFunc)
</UL>
<P><STRONG><a name="[7eb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appwizard_drawing.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_FILL_ELLIPSE
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DRAW_LINE
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_INVERT_RECT
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_FILL_RECT
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_FILL_ELLIPSE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_RECT
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_LINE
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_ELLIPSE
</UL>

<P><STRONG><a name="[7ed]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, appwizard_drawing.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_ROUNDED_FRAME
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_GRADIENT_V
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_GRADIENT_H
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_COPY_RECT
</UL>

<P><STRONG><a name="[7ec]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, appwizard_drawing.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_FILL_ROUNDED_RECT
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DRAW_PIE
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_FILL_ROUNDED_RECT
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_ROUNDED_RECT
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_PIE
</UL>

<P><STRONG><a name="[7ee]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, appwizard_drawing.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_GRADIENT_ROUNDED_V
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_GRADIENT_ROUNDED_H
</UL>

<P><STRONG><a name="[7ea]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, appwizard_drawing.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_AA_DRAW_ARC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Func_DRAW_ARC
</UL>

<P><STRONG><a name="[0]"></a>_GetDataImageMem</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appwizard_fileaccess.o(.text._GetDataImageMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetDataImageMem
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1]"></a>_GetDataFontMem</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, appwizard_fileaccess.o(.text._GetDataFontMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetDataFontMem
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[2]"></a>_GetDataFileMem</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appwizard_fileaccess.o(.text._GetDataFileMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetDataFileMem
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[3]"></a>_GetDataBGJ</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, appwizard_fileaccess.o(.text._GetDataBGJ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetDataBGJ
</UL>
<BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[4]"></a>_GetDataImage</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, appwizard_fileaccess.o(.text._GetDataImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetDataImage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[5]"></a>_GetDataFont</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, appwizard_fileaccess.o(.text._GetDataFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetDataFont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[6]"></a>_GetDataFile</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, appwizard_fileaccess.o(.text._GetDataFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetDataFile
</UL>
<BR>[Calls]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[7]"></a>_OpenFontFile</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text._OpenFontFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _OpenFontFile &rArr; _OpenFile &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[8]"></a>_OpenImageFile</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text._OpenImageFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _OpenImageFile &rArr; _OpenFile &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[9]"></a>_OpenMovieFile</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text._OpenMovieFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _OpenMovieFile &rArr; _OpenFile &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[a]"></a>_OpenTextFile</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text._OpenTextFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _OpenTextFile &rArr; _OpenFile &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[b]"></a>_CloseFile</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text._CloseFile))
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[c]"></a>_GetFileSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text._GetFileSize))
<BR>[Address Reference Count : 1]<UL><LI> appwizard_fileaccess.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[80d]"></a>_OpenFile</STRONG> (Thumb, 44 bytes, Stack size 272 bytes, appwizard_fileaccess.o(.text._OpenFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _OpenFile &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetResourcePath
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenTextFile
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenMovieFile
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenImageFile
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OpenFontFile
</UL>

<P><STRONG><a name="[2ea]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
</UL>

<P><STRONG><a name="[7f8]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataFile
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataBGJ
</UL>

<P><STRONG><a name="[2e8]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
</UL>

<P><STRONG><a name="[2eb]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appwizard_fileaccess.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_DrawStreamedBitmapEXT
</UL>

<P><STRONG><a name="[2d0]"></a>_ResolveCalc</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, appwizard_var.o(.text._ResolveCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _ResolveCalc &rArr;  _ResolveCalc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResolveCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResolveCalc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CalcTerm
</UL>

<P><STRONG><a name="[b9]"></a>_cbVar</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, appwizard_var.o(.text._cbVar))
<BR>[Address Reference Count : 1]<UL><LI> appwizard_var.o(.text.APPW_GetVarWin)
</UL>
<P><STRONG><a name="[ba]"></a>_OnExit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appwizard_var.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _OnExit &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appwizard_var.o(.text.APPW_GetVarWin)
</UL>
<P><STRONG><a name="[30d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, appwizard_var.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_GetVarData
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_SetVarData
</UL>

<P><STRONG><a name="[4a1]"></a>_DrawRect</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_2dlib.o(.text._DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawRect &rArr; LCD_DrawVLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawFrame
</UL>

<P><STRONG><a name="[5e7]"></a>_DispLine</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gui_charline.o(.text._DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DispLine &rArr; GUI__ManageCache &rArr; GUI__ManageCacheEx
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ManageCache
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[497]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_dispstring.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrapEx
</UL>

<P><STRONG><a name="[5e9]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_dispstring.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispStringInRect
</UL>

<P><STRONG><a name="[494]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_dispstring.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectWrap
</UL>

<P><STRONG><a name="[4a8]"></a>_DrawGradient</STRONG> (Thumb, 376 bytes, Stack size 80 bytes, gui_drawgradient.o(.text._DrawGradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMH
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMV
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[4a5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_drawgradient.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
</UL>

<P><STRONG><a name="[4a6]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_drawgradient.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _DrawGradient &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradient
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
</UL>

<P><STRONG><a name="[4a4]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_drawgradient.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientV
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientH
</UL>

<P><STRONG><a name="[4aa]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_drawgradient.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMVEx
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientMHEx
</UL>

<P><STRONG><a name="[4b0]"></a>_DrawGradientRounded</STRONG> (Thumb, 344 bytes, Stack size 120 bytes, gui_drawgradientrounded.o(.text._DrawGradientRounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[4b3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gui_drawgradientrounded.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMH
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMV
</UL>

<P><STRONG><a name="[4af]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gui_drawgradientrounded.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
</UL>

<P><STRONG><a name="[4b2]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_drawgradientrounded.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMH
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMV
</UL>

<P><STRONG><a name="[4b6]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_drawgradientrounded.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMVEx
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMHEx
</UL>

<P><STRONG><a name="[4b4]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_drawgradientrounded.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; _DrawGradientRounded &rArr; GUI_GetColor &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawGradientRounded
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMH
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedMV
</UL>

<P><STRONG><a name="[4ae]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_drawgradientrounded.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedV
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawGradientRoundedH
</UL>

<P><STRONG><a name="[4c3]"></a>_DrawPie</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gui_drawlib.o(.text._DrawPie))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _DrawPie &rArr; GL_DrawArcHR &rArr; OUTLINED_FUNCTION_4 &rArr; _DrawArc &rArr; GUI__SinHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArcHR
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPieHR
</UL>

<P><STRONG><a name="[4c2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_drawlib.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPieHR
</UL>

<P><STRONG><a name="[4c5]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_drawlib.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPoint
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
</UL>

<P><STRONG><a name="[4ba]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_drawlib.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillRect
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawHLine
</UL>

<P><STRONG><a name="[d8]"></a>_OnExit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_enablealpha.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.text.GUI_EnableAlpha)
</UL>
<P><STRONG><a name="[244]"></a>_DrawBitmap</STRONG> (Thumb, 296 bytes, Stack size 80 bytes, gui_enablealpha.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _DrawBitmap &rArr; _ManageAlpha &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAlpha
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SwapIndices
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SwapColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[245]"></a>_DrawHLine</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gui_enablealpha.o(.text._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawHLine &rArr; _PreDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreDraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[246]"></a>_DrawVLine</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gui_enablealpha.o(.text._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawVLine &rArr; _PreDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreDraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[247]"></a>_FillRect</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, gui_enablealpha.o(.text._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _FillRect &rArr; _PreDraw
</UL>
<BR>[Calls]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PreDraw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[248]"></a>_GetPixelIndex</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._GetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[249]"></a>_SetPixelIndex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_enablealpha.o(.text._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[24a]"></a>_XorPixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._XorPixel))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[24b]"></a>_SetOrg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[24c]"></a>_GetDevFunc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[24d]"></a>_GetDevProp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[24e]"></a>_GetDevData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[24f]"></a>_GetRect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._GetRect))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._GUI_EnableAlpha_API)
</UL>
<P><STRONG><a name="[7ac]"></a>_SwapColors</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._SwapColors))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDrawMode
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7ad]"></a>_SwapIndices</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._SwapIndices))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7ae]"></a>_ManageAlpha</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gui_enablealpha.o(.text._ManageAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ManageAlpha &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Link
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Unlink
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetDrawMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColor
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7d4]"></a>_PreDraw</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_enablealpha.o(.text._PreDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _PreDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>

<P><STRONG><a name="[232]"></a>_Color2Index</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._Color2Index))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
</UL>
<P><STRONG><a name="[233]"></a>_Index2Color</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._Index2Color))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
</UL>
<P><STRONG><a name="[234]"></a>_GetIndexMask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_enablealpha.o(.text._GetIndexMask))
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
</UL>
<P><STRONG><a name="[235]"></a>_Color2IndexBulk</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gui_enablealpha.o(.text._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
</UL>
<P><STRONG><a name="[236]"></a>_Index2ColorBulk</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gui_enablealpha.o(.text._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._API_ColorConv_EnableAlpha)
</UL>
<P><STRONG><a name="[262]"></a>_SetColor</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gui_enablealpha.o(.text._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _SetColor &rArr; _ManageAlpha &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._SetColorAPI)
</UL>
<P><STRONG><a name="[263]"></a>_SetBkColor</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gui_enablealpha.o(.text._SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _SetBkColor &rArr; _ManageAlpha &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAlpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._SetColorAPI)
</UL>
<P><STRONG><a name="[264]"></a>_SetDrawMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gui_enablealpha.o(.text._SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _SetDrawMode &rArr; _ManageAlpha &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageAlpha
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SwapColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_enablealpha.o(.rodata._SetColorAPI)
</UL>
<P><STRONG><a name="[7d5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_enablealpha.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>

<P><STRONG><a name="[79c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_enablealpha.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk
</UL>

<P><STRONG><a name="[7d3]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_enablealpha.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>

<P><STRONG><a name="[81a]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_enablealpha.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkColor
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetColor
</UL>

<P><STRONG><a name="[7ff]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_enablealpha.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk
</UL>

<P><STRONG><a name="[79b]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_enablealpha.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk
</UL>

<P><STRONG><a name="[530]"></a>_InitOnce</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_lang.o(.text._InitOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _InitOnce &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextLenEx
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBufferedEx
</UL>

<P><STRONG><a name="[532]"></a>_RemoveEscapeCSV</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gui_lang.o(.text._RemoveEscapeCSV), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetChar
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBufferedEx
</UL>

<P><STRONG><a name="[531]"></a>_RemoveEscapeTXT</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gui_lang.o(.text._RemoveEscapeTXT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextBufferedEx
</UL>

<P><STRONG><a name="[172]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_lang.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_lang.o(.text._InitOnce)
</UL>
<P><STRONG><a name="[535]"></a>_GetCharBuffered</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gui_lang.o(.text._GetCharBuffered))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GetCharBuffered &rArr; OUTLINED_FUNCTION_0 &rArr; _GetDataByte
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
</UL>

<P><STRONG><a name="[68f]"></a>_GetDataByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gui_lang.o(.text._GetDataByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetDataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[814]"></a>_GetChar</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gui_lang.o(.text._GetChar), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveEscapeCSV
</UL>

<P><STRONG><a name="[68e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_lang.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _GetDataByte
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataByte
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharBuffered
</UL>

<P><STRONG><a name="[534]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_lang.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_LoadTextEx
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LANG_GetTextLenEx
</UL>

<P><STRONG><a name="[e7]"></a>_OnExit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_pid.o(.text._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> gui_pid.o(.text.GUI_PID_StoreState)
</UL>
<P><STRONG><a name="[4ca]"></a>_DrawBitmap</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_stream.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _DrawBitmap &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapAuto
</UL>

<P><STRONG><a name="[4d0]"></a>_DrawStreamedBitmapExLoop</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, gui_stream.o(.text._DrawStreamedBitmapExLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _DrawStreamedBitmapExLoop &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
</UL>

<P><STRONG><a name="[d6]"></a>_DrawStreamedBitmapExPalette</STRONG> (Thumb, 464 bytes, Stack size 128 bytes, gui_stream.o(.text._DrawStreamedBitmapExPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _DrawStreamedBitmapExPalette &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetNumFreeBytes
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetDrawMode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPaletteEx
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_stream.o(.text.GUI_DrawStreamedBitmapExAuto)
</UL>
<P><STRONG><a name="[d7]"></a>_DrawStreamedBitmapExNoPalette</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, gui_stream.o(.text._DrawStreamedBitmapExNoPalette))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _DrawStreamedBitmapExNoPalette &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_stream.o(.text.GUI_DrawStreamedBitmapExAuto)
</UL>
<P><STRONG><a name="[4cc]"></a>_GetPaletteEx</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gui_stream.o(.text._GetPaletteEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _GetPaletteEx &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawStreamedBitmapExPalette
</UL>

<P><STRONG><a name="[4cd]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_stream.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
</UL>

<P><STRONG><a name="[4c9]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_stream.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStreamedBitmapInfoEx
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapAuto
</UL>

<P><STRONG><a name="[4cb]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_stream.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawStreamedBitmapExAuto
</UL>

<P><STRONG><a name="[40f]"></a>_GetTaskNo</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gui_task.o(.text._GetTaskNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[c5]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_task.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_task.o(.text.GUITASK_Init)
</UL>
<P><STRONG><a name="[23c]"></a>_GetCharCode</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui_uc.o(.text._GetCharCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetCharCode &rArr; OUTLINED_FUNCTION_4 &rArr; GUI_UC__GetLigature
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_uc.o(.rodata._API_Table)
</UL>
<P><STRONG><a name="[23d]"></a>_GetCharSize</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui_uc.o(.text._GetCharSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetCharSize &rArr; OUTLINED_FUNCTION_4 &rArr; GUI_UC__GetLigature
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_uc.o(.rodata._API_Table)
</UL>
<P><STRONG><a name="[23e]"></a>_CalcSizeOfChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gui_uc.o(.text._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc.o(.rodata._API_Table)
</UL>
<P><STRONG><a name="[23f]"></a>_Encode</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gui_uc.o(.text._Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_uc.o(.rodata._API_Table)
</UL>
<P><STRONG><a name="[7db]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_uc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode
</UL>

<P><STRONG><a name="[7dc]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_uc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Encode
</UL>

<P><STRONG><a name="[7f7]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_uc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharSize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharCode
</UL>

<P><STRONG><a name="[7f6]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_uc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharSize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharCode
</UL>

<P><STRONG><a name="[6d6]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_uc.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; GUI_UC__GetLigature
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetLigature
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharSize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharCode
</UL>

<P><STRONG><a name="[7f5]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_uc.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharSize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharCode
</UL>

<P><STRONG><a name="[20c]"></a>_GetCharCode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(.text._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.rodata.GUI_UC_None)
</UL>
<P><STRONG><a name="[20d]"></a>_GetCharSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(.text._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.rodata.GUI_UC_None)
</UL>
<P><STRONG><a name="[20e]"></a>_CalcSizeOfChar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_uc_encodenone.o(.text._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.rodata.GUI_UC_None)
</UL>
<P><STRONG><a name="[20f]"></a>_Encode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_uc_encodenone.o(.text._Encode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.rodata.GUI_UC_None)
</UL>
<P><STRONG><a name="[240]"></a>_GetCharCode</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, gui_uc_encodeutf8.o(.text._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodeutf8.o(.rodata._API_Table)
</UL>
<P><STRONG><a name="[241]"></a>_GetCharSize</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gui_uc_encodeutf8.o(.text._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodeutf8.o(.rodata._API_Table)
</UL>
<P><STRONG><a name="[242]"></a>_CalcSizeOfChar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_uc_encodeutf8.o(.text._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodeutf8.o(.rodata._API_Table)
</UL>
<P><STRONG><a name="[243]"></a>_Encode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gui_uc_encodeutf8.o(.text._Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Encode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodeutf8.o(.rodata._API_Table)
</UL>
<P><STRONG><a name="[218]"></a>_Color2Index_0</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, guicc_0.o(.text._Color2Index_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Color2Index_0 &rArr; LCD_GetPalette &rArr; LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CalcColorDist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.rodata.LCD_API_ColorConv_0)
</UL>
<P><STRONG><a name="[219]"></a>_Index2Color_0</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, guicc_0.o(.text._Index2Color_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Index2Color_0 &rArr; LCD_GetPalette &rArr; LCD_GetPaletteEx
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPalette
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.rodata.LCD_API_ColorConv_0)
</UL>
<P><STRONG><a name="[21a]"></a>_GetIndexMask_0</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, guicc_0.o(.text._GetIndexMask_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetIndexMask_0 &rArr; LCD_GetNumColors &rArr; LCD_GetNumColorsEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNumColors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_0.o(.rodata.LCD_API_ColorConv_0)
</UL>
<P><STRONG><a name="[265]"></a>_SetColor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(.text._SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetColor
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.rodata._SetColorAPI)
</UL>
<P><STRONG><a name="[266]"></a>_SetBkColor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(.text._SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SetBkColor
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.rodata._SetColorAPI)
</UL>
<P><STRONG><a name="[267]"></a>_SetDrawMode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcd.o(.text._SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetDrawMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.rodata._SetColorAPI)
</UL>
<P><STRONG><a name="[655]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitEx
</UL>

<P><STRONG><a name="[5a0]"></a>LCD_ReadRectEx</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, lcd_readrect.o(.text.LCD_ReadRectEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_ReadRectEx
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ReadRectEx
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRect
</UL>

<P><STRONG><a name="[661]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_readrect.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRectEx
</UL>

<P><STRONG><a name="[582]"></a>_EnableWM</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, guidev.o(.text._EnableWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _EnableWM &rArr; WM__DeactivateEx &rArr; WM_Deactivate &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Activate
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DeactivateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__ClearCanvas
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__SetCanvas
</UL>

<P><STRONG><a name="[53c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidev.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>

<P><STRONG><a name="[53b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidev.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CopyToLCDAt
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>

<P><STRONG><a name="[584]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidev.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
</UL>

<P><STRONG><a name="[200]"></a>_DrawBitmap</STRONG> (Thumb, 1696 bytes, Stack size 120 bytes, guidev_32.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _DrawBitmap &rArr; _XY2PTR &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[201]"></a>_DrawHLine</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, guidev_32.o(.text._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _DrawHLine &rArr; _FillRect &rArr; OUTLINED_FUNCTION_5 &rArr; _XY2PTR &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[202]"></a>_DrawVLine</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, guidev_32.o(.text._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _DrawVLine &rArr; _XY2PTR &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[203]"></a>_FillRect</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, guidev_32.o(.text._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _FillRect &rArr; OUTLINED_FUNCTION_5 &rArr; _XY2PTR &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_USAGE_AddRect
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[204]"></a>_GetPixelIndex</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guidev_32.o(.text._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _GetPixelIndex &rArr; _XY2PTR &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[205]"></a>_SetPixelIndex</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, guidev_32.o(.text._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _SetPixelIndex &rArr; OUTLINED_FUNCTION_5 &rArr; _XY2PTR &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[206]"></a>_XorPixel</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, guidev_32.o(.text._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _XorPixel &rArr; OUTLINED_FUNCTION_5 &rArr; _XY2PTR &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[207]"></a>_SetOrg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_32.o(.text._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[208]"></a>_GetDevFunc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(.text._GetDevFunc))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[209]"></a>_GetDevProp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_32.o(.text._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[20a]"></a>_GetDevData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(.text._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[20b]"></a>_GetRect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, guidev_32.o(.text._GetRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetRect &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_32.o(.rodata.GUI_MEMDEV_DEVICE_32)
</UL>
<P><STRONG><a name="[6e0]"></a>_XY2PTR</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, guidev_32.o(.text._XY2PTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _XY2PTR &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7b0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guidev_32.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7b2]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_32.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[6c4]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidev_32.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7d9]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
</UL>

<P><STRONG><a name="[81f]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_32.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>

<P><STRONG><a name="[6df]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_32.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; _XY2PTR &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XY2PTR
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>

<P><STRONG><a name="[7da]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_32.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
</UL>

<P><STRONG><a name="[7b3]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_32.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7b1]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_32.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[546]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_createfixed.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed32
</UL>

<P><STRONG><a name="[57f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, guidev_write.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[57e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_write.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
</UL>

<P><STRONG><a name="[10]"></a>_OnTouchReactOnLevel</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, button.o(.text._OnTouchReactOnLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _OnTouchReactOnLevel &rArr; _OnButtonReleased &rArr; WIDGET_AndState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.text.BUTTON_SetReactOnLevel)
<LI> button.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[11]"></a>_OnPidStateChange</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, button.o(.text._OnPidStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _OnPidStateChange &rArr; OUTLINED_FUNCTION_4 &rArr; _OnButtonPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 2]<UL><LI> button.o(.text.BUTTON_SetReactOnLevel)
<LI> button.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[368]"></a>_OnButtonPressed</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, button.o(.text._OnButtonPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _OnButtonPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[365]"></a>_OnButtonReleased</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, button.o(.text._OnButtonReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _OnButtonReleased &rArr; WIDGET_AndState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchReactOnLevel
</UL>

<P><STRONG><a name="[362]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_CreateUser
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextOffset
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextAlign
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_IsPressed
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Toggle
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
</UL>

<P><STRONG><a name="[37c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextOffset
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextAlign
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_IsPressed
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Toggle
</UL>

<P><STRONG><a name="[37e]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextOffset
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetTextAlign
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetFont
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetText
</UL>

<P><STRONG><a name="[386]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, button.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; _OnButtonReleased &rArr; WIDGET_AndState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Toggle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPidStateChange
</UL>

<P><STRONG><a name="[364]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; _OnButtonPressed &rArr; WIDGET_OrState &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Callback
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Toggle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPidStateChange
</UL>

<P><STRONG><a name="[6e1]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, button.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnPidStateChange
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTouchReactOnLevel
</UL>

<P><STRONG><a name="[6e7]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnButtonReleased
</UL>

<P><STRONG><a name="[19]"></a>_Paint</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, button_skin.o(.text._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _Paint &rArr; WM_GetWindowSizeY &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_skin.o(.data.BUTTON__Skin)
</UL>
<P><STRONG><a name="[1a]"></a>_Create</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, button_skin.o(.text._Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _Create &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_skin.o(.data.BUTTON__Skin)
</UL>
<P><STRONG><a name="[3ce]"></a>_CalcAngle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gauge.o(.text._CalcAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _CalcAngle &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValueRange
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_EnableCCW
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
</UL>

<P><STRONG><a name="[3cd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gauge.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetAlign
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_EnableCCW
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedEnd
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedValue
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRadius
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetBkColor
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetOffset
</UL>

<P><STRONG><a name="[3cb]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gauge.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetAlign
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetWidth
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValueRange
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRange
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_EnableCCW
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_GetValue
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_CreateUser
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedEnd
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedValue
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRadius
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetBkColor
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetColor
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetOffset
</UL>

<P><STRONG><a name="[3cf]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gauge.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetAlign
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetWidth
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValueRange
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRange
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_EnableCCW
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValue
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedEnd
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRoundedValue
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRadius
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetBkColor
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetColor
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetOffset
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcAngle
</UL>

<P><STRONG><a name="[3d1]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gauge.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetWidth
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetValueRange
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetRange
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_GetValue
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAUGE_SetColor
</UL>

<P><STRONG><a name="[793]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gauge.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcAngle
</UL>

<P><STRONG><a name="[626]"></a>_PaintMemdev</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, image.o(.text._PaintMemdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _PaintMemdev &rArr; GUI_MEMDEV_Write &rArr; GUI_MEMDEV_WriteAt &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Write
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
</UL>

<P><STRONG><a name="[f3]"></a>_PaintTiled</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, image.o(.text._PaintTiled))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = _PaintTiled &rArr; GUI_MEMDEV_WriteAt &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeY
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeX
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAt
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
</UL>
<BR>[Address Reference Count : 2]<UL><LI> image.o(.text.IMAGE_CreateUser)
<LI> image.o(.text.IMAGE_SetTiled)
</UL>
<P><STRONG><a name="[f2]"></a>_Paint</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, image.o(.text._Paint))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _Paint &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeY
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeX
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
</UL>
<BR>[Address Reference Count : 3]<UL><LI> image.o(.text.IMAGE_CreateUser)
<LI> image.o(.text.IMAGE_SetTiled)
<LI> image.o(.text._SetScaleAngAlphaSub)
</UL>
<P><STRONG><a name="[6d8]"></a>_SetScaleAngAlphaSub</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, image.o(.text._SetScaleAngAlphaSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _SetScaleAngAlphaSub &rArr; GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[7fd]"></a>_GetPos</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, image.o(.text._GetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPos
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintScaled
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[179]"></a>_PaintScaled</STRONG> (Thumb, 324 bytes, Stack size 88 bytes, image.o(.text._PaintScaled))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _PaintScaled &rArr; GUI_MEMDEV_CreateFixed32 &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeY
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetWindowSizeX
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PreserveTrans
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_CreateFixed32
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Delete
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgY
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__ClearCanvas
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__SetCanvas
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Fill32
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPos
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintMemdev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image.o(.text._SetScaleAngAlphaSub)
</UL>
<P><STRONG><a name="[624]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, image.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_CreateUser
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetOffset
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlign
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetTiled
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_Callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint
</UL>

<P><STRONG><a name="[62a]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, image.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_EnableLQ
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAngle
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlpha
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetScale
</UL>

<P><STRONG><a name="[62b]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, image.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_EnableLQ
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAngle
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlpha
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetScale
</UL>

<P><STRONG><a name="[62d]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, image.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_EnableLQ
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAngle
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlpha
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetScale
</UL>

<P><STRONG><a name="[62c]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, image.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; _SetScaleAngAlphaSub &rArr; GUI_MEMDEV_Delete &rArr; GUI_USAGE_DecUseCnt &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetScaleAngAlphaSub
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_EnableLQ
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAngle
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetAlpha
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetScale
</UL>

<P><STRONG><a name="[f5]"></a>_DrawImageAt</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, image_bmp.o(.text._DrawImageAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = _DrawImageAt &rArr; GUI_BMP_Draw &rArr; GUI_BMP_DrawEx &rArr; _DrawBitmap_16bpp &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_Draw
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_bmp.o(.text.IMAGE_SetBMP)
</UL>
<P><STRONG><a name="[f4]"></a>_GetImageSize</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, image_bmp.o(.text._GetImageSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GetImageSize &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetYSize
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetXSize
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_bmp.o(.text.IMAGE_SetBMP)
</UL>
<P><STRONG><a name="[f7]"></a>_DrawImageAtEx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, image_bmp.o(.text._DrawImageAtEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = _DrawImageAtEx &rArr; GUI_BMP_DrawEx &rArr; _DrawBitmap_16bpp &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_bmp.o(.text.IMAGE_SetBMPEx)
</UL>
<P><STRONG><a name="[f6]"></a>_GetImageSizeEx</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, image_bmp.o(.text._GetImageSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GetImageSizeEx &rArr; GUI_BMP_GetYSizeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetYSizeEx
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetXSizeEx
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_bmp.o(.text.IMAGE_SetBMPEx)
</UL>
<P><STRONG><a name="[690]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, image_bmp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
</UL>

<P><STRONG><a name="[f9]"></a>_DrawImageAt</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, image_dta.o(.text._DrawImageAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _DrawImageAt &rArr; GUI_DrawBitmap &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawBitmap
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_dta.o(.text.IMAGE_SetDTA)
</UL>
<P><STRONG><a name="[f8]"></a>_GetImageSize</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, image_dta.o(.text._GetImageSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GetImageSize &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_dta.o(.text.IMAGE_SetDTA)
</UL>
<P><STRONG><a name="[fb]"></a>_DrawImageAtEx</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, image_dta.o(.text._DrawImageAtEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawImageAtEx &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_dta.o(.text.IMAGE_SetDTAEx)
</UL>
<P><STRONG><a name="[fa]"></a>_GetImageSizeEx</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, image_dta.o(.text._GetImageSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GetImageSizeEx &rArr; GUI_GetStreamedBitmapInfoEx &rArr; OUTLINED_FUNCTION_2 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStreamedBitmapInfoEx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_dta.o(.text.IMAGE_SetDTAEx)
</UL>
<P><STRONG><a name="[fd]"></a>_DrawImageAt</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, image_gif.o(.text._DrawImageAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = _DrawImageAt &rArr; GUI_GIF_DrawSub &rArr; GUI_GIF_DrawSubEx &rArr; GUI_GIF__DrawFromFilePointer &rArr; _ReadExtension &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSub
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_SetFillTrans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_gif.o(.text.IMAGE_SetGIF)
</UL>
<P><STRONG><a name="[fc]"></a>_GetImageSize</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, image_gif.o(.text._GetImageSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _GetImageSize &rArr; GUI_GIF_GetYSize &rArr; GUI_GIF_GetYSizeEx &rArr; _GetValue &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetYSize
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetXSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_gif.o(.text.IMAGE_SetGIF)
</UL>
<P><STRONG><a name="[638]"></a>_StartTimer</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, image_gif.o(.text._StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _StartTimer &rArr; GUI_GIF_GetImageInfo &rArr; GUI_GIF_GetImageInfoEx &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfo
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
</UL>

<P><STRONG><a name="[ff]"></a>_DrawImageAtEx</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, image_gif.o(.text._DrawImageAtEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _DrawImageAtEx &rArr; GUI_GIF_DrawSubEx &rArr; GUI_GIF__DrawFromFilePointer &rArr; _ReadExtension &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_SetFillTrans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_gif.o(.text.IMAGE_SetGIFEx)
</UL>
<P><STRONG><a name="[fe]"></a>_GetImageSizeEx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, image_gif.o(.text._GetImageSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _GetImageSizeEx &rArr; GUI_GIF_GetYSizeEx &rArr; _GetValue &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetYSizeEx
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetXSizeEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_gif.o(.text.IMAGE_SetGIFEx)
</UL>
<P><STRONG><a name="[17d]"></a>_cbTimer</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, image_gif.o(.text._cbTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _cbTimer &rArr; GUI_GIF_GetImageInfo &rArr; GUI_GIF_GetImageInfoEx &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetPeriod
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfo
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE__FreeAttached
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_gif.o(.text._StartTimer)
</UL>
<P><STRONG><a name="[637]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, image_gif.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIF
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMAGE_SetGIFEx
</UL>

<P><STRONG><a name="[101]"></a>_DrawImageAt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, image_jpeg.o(.text._DrawImageAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _DrawImageAt &rArr; GUI_JPEG_Draw &rArr; GUI_JPEG_DrawEx &rArr; GUI_JPEG__DecodeLine &rArr; _DecodeNextRow &rArr; _ProcessRestart &rArr; _InitBitBuffer &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_Draw
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_jpeg.o(.text.IMAGE_SetJPEG)
</UL>
<P><STRONG><a name="[100]"></a>_GetImageSize</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, image_jpeg.o(.text._GetImageSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _GetImageSize &rArr; GUI_JPEG_GetInfo &rArr; GUI_JPEG_GetInfoEx &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfo
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_jpeg.o(.text.IMAGE_SetJPEG)
</UL>
<P><STRONG><a name="[103]"></a>_DrawImageAtEx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, image_jpeg.o(.text._DrawImageAtEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _DrawImageAtEx &rArr; GUI_JPEG_DrawEx &rArr; GUI_JPEG__DecodeLine &rArr; _DecodeNextRow &rArr; _ProcessRestart &rArr; _InitBitBuffer &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_DrawEx
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_jpeg.o(.text.IMAGE_SetJPEGEx)
</UL>
<P><STRONG><a name="[102]"></a>_GetImageSizeEx</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, image_jpeg.o(.text._GetImageSizeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _GetImageSizeEx &rArr; GUI_JPEG_GetInfoEx &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG_GetInfoEx
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_jpeg.o(.text.IMAGE_SetJPEGEx)
</UL>
<P><STRONG><a name="[691]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, image_jpeg.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSizeEx
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAtEx
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageSize
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawImageAt
</UL>

<P><STRONG><a name="[6f5]"></a>_SetText</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, text.o(.text._SetText))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _SetText &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SetText
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetText
</UL>

<P><STRONG><a name="[692]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, text.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_CreateUser
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetWrapMode
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetRotation
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetBkColor
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFrameColor
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextOffset
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextAlign
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
</UL>

<P><STRONG><a name="[6ae]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, text.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetWrapMode
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetRotation
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetBkColor
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFrameColor
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextOffset
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextAlign
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
</UL>

<P><STRONG><a name="[6c5]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, text.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetHex
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetWrapMode
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetRotation
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFont
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetBkColor
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetFrameColor
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextOffset
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextAlign
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEXT_SetTextColor
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetText
</UL>

<P><STRONG><a name="[70a]"></a>_EffectRequiresRedraw</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, widget.o(.text._EffectRequiresRedraw), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Screen2Client
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__EFFECT_DrawDownRect
</UL>

<P><STRONG><a name="[693]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, widget.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
</UL>

<P><STRONG><a name="[6af]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
</UL>

<P><STRONG><a name="[6c6]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, widget.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_HandleActive
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_SetState
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_OrState
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET_AndState
</UL>

<P><STRONG><a name="[694]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, window.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_SetBkColor
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WINDOW_Callback
</UL>

<P><STRONG><a name="[740]"></a>_Invalidate1Abs</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, wm.o(.text._Invalidate1Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _Invalidate1Abs &rArr; GUI_MergeRect
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MergeRect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SignalEvent
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RectIsNZ
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Invalidate1Abs
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateRect
</UL>

<P><STRONG><a name="[767]"></a>_DesktopHandle2Index</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm.o(.text._DesktopHandle2Index))
<BR><BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ClipAtParentBorders
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetTopLevelLayer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbBackWin
</UL>

<P><STRONG><a name="[766]"></a>_SetClipRectUserIntersect</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, wm.o(.text._SetClipRectUserIntersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Client2Screen
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRect
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectEx
</UL>
<BR>[Called By]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
</UL>

<P><STRONG><a name="[13c]"></a>_cbPaintMemDev</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wm.o(.text._cbPaintMemDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _cbPaintMemDev &rArr; WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(.text.WM__Paint)
</UL>
<P><STRONG><a name="[774]"></a>WM__PaintWinAndOverlays</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, wm.o(.text.WM__PaintWinAndOverlays))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = WM__PaintWinAndOverlays &rArr; _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
</UL>

<P><STRONG><a name="[725]"></a>_Exec1Input</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wm.o(.text._Exec1Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _Exec1Input &rArr; WM_DeleteWindow &rArr;  WM_DeleteWindow (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_PollKeyMsg
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[726]"></a>_Exec1Draw</STRONG> (Thumb, 120 bytes, Stack size 144 bytes, wm.o(.text._Exec1Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = _Exec1Draw &rArr; WM__Paint &rArr; GUI_MEMDEV_Draw &rArr; GUI_MEMDEV_CreateEx &rArr; GUI_MEMDEV__CreateFixed &rArr; GUI_USAGE_BM_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Exec
</UL>

<P><STRONG><a name="[126]"></a>_cbBackWin</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, wm.o(.text._cbBackWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = _cbBackWin &rArr; GUI_Clear &rArr; GUI_ClearRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetBkColor
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DefaultProc
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_StoreKey
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DesktopHandle2Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(.text.WM_Init)
</UL>
<P><STRONG><a name="[128]"></a>_OnExit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wm.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm.o(.text.WM_Init)
</UL>
<P><STRONG><a name="[76d]"></a>_Findy1</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, wm.o(.text._Findy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = _Findy1 &rArr;  _Findy1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[76e]"></a>_Findx0</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, wm.o(.text._Findx0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = _Findx0 &rArr;  _Findx0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>

<P><STRONG><a name="[76f]"></a>_Findx1</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, wm.o(.text._Findx1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = _Findx1 &rArr;  _Findx1 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
</UL>

<P><STRONG><a name="[775]"></a>_Paint1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm.o(.text._Paint1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Paint1
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[776]"></a>_PaintTransChildren</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, wm.o(.text._PaintTransChildren))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = _PaintTransChildren &rArr;  _PaintTransChildren (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[777]"></a>_Paint1Trans</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wm.o(.text._Paint1Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _Paint1Trans &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__IntersectRects
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[695]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Invalidate1Abs
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteWindow
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateRect
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
</UL>

<P><STRONG><a name="[6b0]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__ActivateClipRect
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Paint1Trans
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbPaintMemDev
</UL>

<P><STRONG><a name="[6c7]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__RemoveWindowFromList
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SelectWindow
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindowAndDescsEx
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Exec1Draw
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[6ce]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[6d9]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[6e2]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateWindowAsChild
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InsertWindowIntoList
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[6e8]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InvalidateDrawAndDescs
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__DetachWindow
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__PaintWinAndOverlays
</UL>

<P><STRONG><a name="[7e8]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[6ec]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PaintTransChildren
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx1
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findx0
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Findy1
</UL>

<P><STRONG><a name="[76c]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
</UL>

<P><STRONG><a name="[72f]"></a>_GetDefaultWin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_getwindowsize.o(.text._GetDefaultWin))
<BR><BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetActiveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeY
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowSizeX
</UL>

<P><STRONG><a name="[157]"></a>_GetMotionTagXY</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_motion.o(.text._GetMotionTagXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetMotionTagXY &rArr; GUI_GetTime &rArr; GUI_X_GetTime &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wm_motion.o(.text._ExecMotion)
<LI> wm_motion.o(.text._GetConfirmation)
</UL>
<P><STRONG><a name="[744]"></a>_ExecMotion</STRONG> (Thumb, 1604 bytes, Stack size 208 bytes, wm_motion.o(.text._ExecMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = _ExecMotion &rArr; _MoveToNearestSnapPosition &rArr; _StartMotionTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInModalArea
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoFinalMoveXY
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendFinalMoveMessage
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveToNearestSnapPosition
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMotion
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SavePrivateContextOnDemand
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartMotionTimer
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AimDestination
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSigns
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetConfirmation
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContext
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetphCrit
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MOTION_Enable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMotion
</UL>

<P><STRONG><a name="[12a]"></a>_cbMotion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_motion.o(.text._cbMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = _cbMotion &rArr; _ExecMotion &rArr; _MoveToNearestSnapPosition &rArr; _StartMotionTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_motion.o(.text.WM_MOTION_Enable)
</UL>
<P><STRONG><a name="[7e1]"></a>_GetphCrit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_motion.o(.text._GetphCrit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _GetphCrit &rArr; _CreatehCrit &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CreatehCrit
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetContext
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[7de]"></a>_GetContext</STRONG> (Thumb, 124 bytes, Stack size 104 bytes, wm_motion.o(.text._GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _GetContext &rArr; _GetphCrit &rArr; _CreatehCrit &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetphCrit
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[7e0]"></a>_GetConfirmation</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, wm_motion.o(.text._GetConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _GetConfirmation &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[6d1]"></a>_GetSigns</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wm_motion.o(.text._GetSigns))
<BR><BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[78d]"></a>_AimDestination</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wm_motion.o(.text._AimDestination))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _AimDestination &rArr; OUTLINED_FUNCTION_2 &rArr; _AimDestinationXY &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[7e2]"></a>_StartMotionTimer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_motion.o(.text._StartMotionTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _StartMotionTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTimeSlice
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_SetPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveToNearestSnapPosition
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[7e3]"></a>_SavePrivateContextOnDemand</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_motion.o(.text._SavePrivateContextOnDemand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SavePrivateContextOnDemand &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[7df]"></a>_Screen2hWin</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, wm_motion.o(.text._Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _Screen2hWin &rArr; WM_Screen2hWin &rArr; _Screen2hWinStop &rArr; _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopMotionOnHit
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[6b2]"></a>_StopMotionOnHit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wm_motion.o(.text._StopMotionOnHit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _StopMotionOnHit &rArr; _Screen2hWin &rArr; WM_Screen2hWin &rArr; _Screen2hWinStop &rArr; _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[7e4]"></a>_ProcessMotion</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, wm_motion.o(.text._ProcessMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ProcessMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendFinalMoveMessage
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[7e5]"></a>_MoveToNearestSnapPosition</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, wm_motion.o(.text._MoveToNearestSnapPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _MoveToNearestSnapPosition &rArr; _StartMotionTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveToNearestSnapPositionXY
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SendFinalMoveMessage
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StartMotionTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[7e7]"></a>_SendFinalMoveMessage</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_motion.o(.text._SendFinalMoveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _SendFinalMoveMessage &rArr; _ProcessMotion
</UL>
<BR>[Calls]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveToNearestSnapPosition
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[7a2]"></a>_CreatehCrit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_motion.o(.text._CreatehCrit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _CreatehCrit &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__AddCriticalHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetphCrit
</UL>

<P><STRONG><a name="[15a]"></a>_Motion_ByWindow</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wm_motion.o(.text._Motion_ByWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _Motion_ByWindow &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Motion_AutoWithinParent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_motion.o(.text._GetConfirmation)
</UL>
<P><STRONG><a name="[159]"></a>_Motion_AutoWithinParent</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, wm_motion.o(.text._Motion_AutoWithinParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _Motion_AutoWithinParent &rArr; WM_MoveWindow &rArr; WM__MoveWindow &rArr; _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetParent
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Motion_ByWindow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_motion.o(.text._GetConfirmation)
</UL>
<P><STRONG><a name="[15b]"></a>_GetMotionTagR</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, wm_motion.o(.text._GetMotionTagR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GetMotionTagR &rArr; WM_GetWindowRectEx &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRectEx
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ATan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_motion.o(.text._GetConfirmation)
</UL>
<P><STRONG><a name="[6c9]"></a>_AimDestinationXY</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, wm_motion.o(.text._AimDestinationXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _AimDestinationXY &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>

<P><STRONG><a name="[17c]"></a>_cbTimer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_motion.o(.text._cbTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _cbTimer &rArr; _cbMotion &rArr; _ExecMotion &rArr; _MoveToNearestSnapPosition &rArr; _StartMotionTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cbMotion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_motion.o(.text._StartMotionTimer)
</UL>
<P><STRONG><a name="[807]"></a>_MoveToNearestSnapPositionXY</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, wm_motion.o(.text._MoveToNearestSnapPositionXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _MoveToNearestSnapPositionXY &rArr; GUI__sqrt32
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveToNearestSnapPosition
</UL>

<P><STRONG><a name="[7e6]"></a>_DoFinalMoveXY</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wm_motion.o(.text._DoFinalMoveXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoFinalMoveXY
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[129]"></a>_OnExit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_motion.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _OnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_motion.o(.text.WM_MOTION_Enable)
</UL>
<P><STRONG><a name="[6b1]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_motion.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _StopMotionOnHit &rArr; _Screen2hWin &rArr; WM_Screen2hWin &rArr; _Screen2hWinStop &rArr; _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StopMotionOnHit
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[6c8]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_motion.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _AimDestinationXY &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AimDestinationXY
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AimDestination
</UL>

<P><STRONG><a name="[6d0]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_motion.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI_GetTime &rArr; GUI_X_GetTime &rArr; osKernelGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetTime
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSigns
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ExecMotion
</UL>

<P><STRONG><a name="[772]"></a>_MoveDescendants</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, wm_move.o(.text._MoveDescendants))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + In Cycle
<LI>Call Chain = _MoveDescendants &rArr;  _MoveDescendants (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MoveRect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendants
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__MoveWindow
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MoveDescendants
</UL>

<P><STRONG><a name="[696]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_move.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_MoveWindow
</UL>

<P><STRONG><a name="[25c]"></a>_MULTIBUF_Begin</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, wm_multibuf.o(.text._MULTIBUF_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _MULTIBUF_Begin &rArr; GUI_MULTIBUF_BeginEx
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_BeginEx
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_multibuf.o(.rodata._MULTIBUF_APIList)
</UL>
<P><STRONG><a name="[25d]"></a>_MULTIBUF_End</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wm_multibuf.o(.text._MULTIBUF_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _MULTIBUF_End &rArr; GUI_MULTIBUF_EndEx
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MULTIBUF_EndEx
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_multibuf.o(.rodata._MULTIBUF_APIList)
</UL>
<P><STRONG><a name="[806]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_multibuf.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MULTIBUF_End
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MULTIBUF_Begin
</UL>

<P><STRONG><a name="[75c]"></a>_Screen2hWinStop</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_screen2win.o(.text._Screen2hWinStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Screen2hWinStop &rArr; _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindowEx
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_Screen2hWin
</UL>

<P><STRONG><a name="[815]"></a>_Screen2hWin</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, wm_screen2win.o(.text._Screen2hWin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = _Screen2hWin &rArr;  _Screen2hWin (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__IsInWindow
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
</UL>
<BR>[Called By]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWin
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Screen2hWinStop
</UL>

<P><STRONG><a name="[125]"></a>_cbTimer</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wm_timer.o(.text._cbTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _cbTimer &rArr; WM_SendMessage &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SendMessage
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_timer.o(.text.WM_CreateTimer)
</UL>
<P><STRONG><a name="[210]"></a>_DispChar</STRONG> (Thumb, 472 bytes, Stack size 296 bytes, guiaa_char2ext_xbf.o(.text._DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _DispChar &rArr; GUI_AA__DrawCharAA2 &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA2
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOffAndSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiaa_char2ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA2_Ext)
</UL>
<P><STRONG><a name="[22f]"></a>_DispLine</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guiaa_char2ext_xbf.o(.text._DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DispLine
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__SetfpClearLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiaa_char2ext_xbf.o(.rodata._APIList)
</UL>
<P><STRONG><a name="[215]"></a>_DispChar</STRONG> (Thumb, 472 bytes, Stack size 296 bytes, guiaa_char4ext_xbf.o(.text._DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _DispChar &rArr; GUI_AA__DrawCharAA4 &rArr; GL_DrawBitmap &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AA__DrawCharAA4
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOffAndSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiaa_char4ext_xbf.o(.rodata.GUI_XBF_APIList_Prop_AA4_Ext)
</UL>
<P><STRONG><a name="[230]"></a>_DispLine</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guiaa_char4ext_xbf.o(.text._DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DispLine
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__SetfpClearLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiaa_char4ext_xbf.o(.rodata._APIList)
</UL>
<P><STRONG><a name="[2ce]"></a>_ResolveTerm</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, appwizard_condition.o(.text._ResolveTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = _ResolveTerm &rArr;  _ResolveTerm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResolveTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPW_CalcCond
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ResolveTerm
</UL>

<P><STRONG><a name="[5f5]"></a>_GetTwinArcPara</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gui__drawtwinarc.o(.text._GetTwinArcPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetTwinArcPara &rArr; GUI__sqrt32
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
</UL>

<P><STRONG><a name="[5f4]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui__drawtwinarc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawTwinArc4
</UL>

<P><STRONG><a name="[5fc]"></a>_WrapGetNumCharsDisp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui__wrap.o(.text._WrapGetNumCharsDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WrapGetNumCharsDisp &rArr; GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsDisp
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__WrapGetNumCharsToNextLine
</UL>

<P><STRONG><a name="[6da]"></a>_DrawArc</STRONG> (Thumb, 572 bytes, Stack size 120 bytes, gui_arc.o(.text._DrawArc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _DrawArc &rArr; GUI__SinHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__SinHQ
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CosHQ
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcX
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>

<P><STRONG><a name="[7a9]"></a>_CalcX</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gui_arc.o(.text._CalcX))
<BR><BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[7a7]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gui_arc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[7a8]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_arc.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>

<P><STRONG><a name="[49b]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_arc.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GL_DrawArcHR &rArr; OUTLINED_FUNCTION_4 &rArr; _DrawArc &rArr; GUI__SinHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArcHR
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawArcHR
</UL>

<P><STRONG><a name="[49a]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_arc.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawArcHR
</UL>

<P><STRONG><a name="[3df]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_arc.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; _DrawArc &rArr; GUI__SinHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawArc
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawArcHR
</UL>

<P><STRONG><a name="[499]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_arc.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawArcHR
</UL>

<P><STRONG><a name="[20]"></a>_DrawLine_RGB</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, gui_bmp.o(.text._DrawLine_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DrawLine_RGB
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read32
</UL>
<BR>[Address Reference Count : 3]<UL><LI> gui_bmp.o(.text.GUI_BMP_DrawEx)
<LI> gui_bmp.o(.text._DrawBitmap_RGB)
<LI> gui_bmp.o(.data.GUI__pfDrawLine_RGB)
</UL>
<P><STRONG><a name="[470]"></a>_ManageBitfields</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gui_bmp.o(.text._ManageBitfields))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ManageBitfields &rArr; GUI_BMP__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__Init
</UL>

<P><STRONG><a name="[173]"></a>_GetBitfieldsPara</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_bmp.o(.text._GetBitfieldsPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetBitfieldsPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_bmp.o(.text._ManageBitfields)
</UL>
<P><STRONG><a name="[463]"></a>_DrawBitmap_16bpp</STRONG> (Thumb, 472 bytes, Stack size 160 bytes, gui_bmp.o(.text._DrawBitmap_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = _DrawBitmap_16bpp &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpfColor2IndexEx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEarlyOut
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetClipParam
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
</UL>

<P><STRONG><a name="[466]"></a>_DrawBitmap_32bpp</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, gui_bmp.o(.text._DrawBitmap_32bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = _DrawBitmap_32bpp &rArr; _DrawBitmap_RGB &rArr; _GetEarlyOut
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
</UL>

<P><STRONG><a name="[cf]"></a>_Index2ColorBitfields</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, gui_bmp.o(.text._Index2ColorBitfields))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Index2ColorBitfields
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_bmp.o(.text.GUI_BMP_DrawEx)
</UL>
<P><STRONG><a name="[468]"></a>_GetClipParam</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, gui_bmp.o(.text._GetClipParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetClipParam
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
</UL>

<P><STRONG><a name="[469]"></a>_GetEarlyOut</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gui_bmp.o(.text._GetEarlyOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _GetEarlyOut
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
</UL>

<P><STRONG><a name="[30]"></a>_NextPixel_Start</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, gui_bmp.o(.text._NextPixel_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _NextPixel_Start &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_bmp.o(.data._NextPixel_API)
</UL>
<P><STRONG><a name="[31]"></a>_NextPixel_SetPixel</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, gui_bmp.o(.text._NextPixel_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _NextPixel_SetPixel &rArr; _NextPixel_FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_bmp.o(.data._NextPixel_API)
</UL>
<P><STRONG><a name="[32]"></a>_NextPixel_NextLine</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gui_bmp.o(.text._NextPixel_NextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _NextPixel_NextLine &rArr; _NextPixel_FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_bmp.o(.data._NextPixel_API)
</UL>
<P><STRONG><a name="[33]"></a>_NextPixel_End</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gui_bmp.o(.text._NextPixel_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _NextPixel_End &rArr; _NextPixel_FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_bmp.o(.data._NextPixel_API)
</UL>
<P><STRONG><a name="[808]"></a>_NextPixel_FlushBuffer</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, gui_bmp.o(.text._NextPixel_FlushBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _NextPixel_FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_End
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_NextLine
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_SetPixel
</UL>

<P><STRONG><a name="[467]"></a>_DrawBitmap_RGB</STRONG> (Thumb, 260 bytes, Stack size 144 bytes, gui_bmp.o(.text._DrawBitmap_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = _DrawBitmap_RGB &rArr; _GetEarlyOut
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetEarlyOut
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetClipParam
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_32bpp
</UL>

<P><STRONG><a name="[80a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_bmp.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_SetPixel
</UL>

<P><STRONG><a name="[464]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_bmp.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
</UL>

<P><STRONG><a name="[465]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_bmp.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_DrawEx
</UL>

<P><STRONG><a name="[471]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_bmp.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI_BMP__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP__ReadPalette
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RGB
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_16bpp
</UL>

<P><STRONG><a name="[46c]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_bmp.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetYSizeEx
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_BMP_GetXSizeEx
</UL>

<P><STRONG><a name="[3e4]"></a>_Draw8Point</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, gui_circ.o(.text._Draw8Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Draw8Point
</UL>
<BR>[Calls]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircle
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[4da]"></a>_FillEllipse</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gui_circ.o(.text._FillEllipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _FillEllipse &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillEllipseXL
</UL>

<P><STRONG><a name="[49f]"></a>_DrawEllipse</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, gui_circ.o(.text._DrawEllipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _DrawEllipse &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPenSize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipse
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawEllipseXL
</UL>

<P><STRONG><a name="[3eb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_circ.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI__sqrt32
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__sqrt32
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawEllipseXL
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseXL
</UL>

<P><STRONG><a name="[3ee]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_circ.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawEllipseXL
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipseXL
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillEllipse
</UL>

<P><STRONG><a name="[49d]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_circ.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillCircle
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawCircle
</UL>

<P><STRONG><a name="[3ed]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_circ.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawEllipseXL
</UL>

<P><STRONG><a name="[3e5]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_circ.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; _Draw8Point
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw8Point
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawCircle
</UL>

<P><STRONG><a name="[3ec]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_circ.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawEllipseXL
</UL>

<P><STRONG><a name="[3f9]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_circ.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
</UL>

<P><STRONG><a name="[7a6]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_circ.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw8Point
</UL>

<P><STRONG><a name="[47a]"></a>_CopyRect</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, gui_copyrect.o(.text._CopyRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _CopyRect &rArr; _CopyHLines &rArr; GUI_DrawPixel &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRect
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBuffer
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CopyRect
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[47e]"></a>_CopyHLines</STRONG> (Thumb, 336 bytes, Stack size 112 bytes, gui_copyrect.o(.text._CopyHLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _CopyHLines &rArr; GUI_DrawPixel &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColorIndex
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRect
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CopyRect
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>

<P><STRONG><a name="[47b]"></a>_CopyVLines</STRONG> (Thumb, 352 bytes, Stack size 120 bytes, gui_copyrect.o(.text._CopyVLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _CopyVLines &rArr; GUI_DrawPixel &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetNextIVR
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__InitIVRSearch
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColorIndex
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawPixel
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadRect
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetPixelIndex
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CopyRect
</UL>

<P><STRONG><a name="[7a1]"></a>_GetBuffer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_copyrect.o(.text._GetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _GetBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyVLines
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyHLines
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>

<P><STRONG><a name="[47d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_copyrect.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _CopyRect &rArr; _CopyHLines &rArr; GUI_DrawPixel &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CopyRect
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CopyRect
</UL>

<P><STRONG><a name="[47c]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_copyrect.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CopyRect
</UL>

<P><STRONG><a name="[48f]"></a>_SetRotation</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gui_dispstringinrectex.o(.text._SetRotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SetRotation &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringInRectEx
</UL>

<P><STRONG><a name="[1d7]"></a>_DrawBitmap</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, gui_drawbitmap_24.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetNextPixelAPI
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_24.o(.rodata.GUI_BitmapMethods24)
</UL>
<P><STRONG><a name="[7b4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_drawbitmap_24.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[1d9]"></a>_DrawBitmap444_12</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_444.o(.text._DrawBitmap444_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmap444_12 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_12)
</UL>
<P><STRONG><a name="[1e4]"></a>_DrawBitmapM444_12</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_444.o(.text._DrawBitmapM444_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmapM444_12 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_12)
</UL>
<P><STRONG><a name="[1da]"></a>_DrawBitmap444_12_1</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_444.o(.text._DrawBitmap444_12_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmap444_12_1 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_12_1)
</UL>
<P><STRONG><a name="[1e5]"></a>_DrawBitmapM444_12_1</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_444.o(.text._DrawBitmapM444_12_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmapM444_12_1 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_12_1)
</UL>
<P><STRONG><a name="[1db]"></a>_DrawBitmap444_16</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_444.o(.text._DrawBitmap444_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmap444_16 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethods444_16)
</UL>
<P><STRONG><a name="[1e6]"></a>_DrawBitmapM444_16</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_444.o(.text._DrawBitmapM444_16))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmapM444_16 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_444.o(.rodata.GUI_BitmapMethodsM444_16)
</UL>
<P><STRONG><a name="[697]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_drawbitmap_444.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapM444_16
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap444_16
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapM444_12_1
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap444_12_1
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapM444_12
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap444_12
</UL>

<P><STRONG><a name="[1dc]"></a>_DrawBitmap</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_555.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmap &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_555.o(.rodata.GUI_BitmapMethods555)
</UL>
<P><STRONG><a name="[1e7]"></a>_DrawBitmapSwapRB</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_555.o(.text._DrawBitmapSwapRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmapSwapRB &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_555.o(.rodata.GUI_BitmapMethodsM555)
</UL>
<P><STRONG><a name="[698]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_drawbitmap_555.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapSwapRB
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[1dd]"></a>_DrawBitmap</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_565.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmap &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_565.o(.rodata.GUI_BitmapMethods565)
</UL>
<P><STRONG><a name="[1e8]"></a>_DrawBitmapSwapRB</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_565.o(.text._DrawBitmapSwapRB))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmapSwapRB &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_565.o(.rodata.GUI_BitmapMethodsM565)
</UL>
<P><STRONG><a name="[699]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_drawbitmap_565.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmap16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmap16bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapSwapRB
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[1de]"></a>_DrawBitmap_8888</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_8888.o(.text._DrawBitmap_8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _DrawBitmap_8888 &rArr; OUTLINED_FUNCTION_0 &rArr; _DrawBitmap &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethods8888)
</UL>
<P><STRONG><a name="[1df]"></a>_CallDrawBitmapHW</STRONG> (Thumb, 164 bytes, Stack size 88 bytes, gui_drawbitmap_8888.o(.text._CallDrawBitmapHW))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _CallDrawBitmapHW &rArr; GUI_SetColorIndex &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColorIndex
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetColorIndex
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoClipping
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethods8888)
<LI> gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethodsM8888I)
</UL>
<P><STRONG><a name="[1e9]"></a>_DrawBitmap_M8888I</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, gui_drawbitmap_8888.o(.text._DrawBitmap_M8888I))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _DrawBitmap_M8888I &rArr; OUTLINED_FUNCTION_0 &rArr; _DrawBitmap &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_8888.o(.rodata.GUI_BitmapMethodsM8888I)
</UL>
<P><STRONG><a name="[15]"></a>_SetPixelAlpha</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gui_drawbitmap_8888.o(.text._SetPixelAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _SetPixelAlpha &rArr; OUTLINED_FUNCTION_2 &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_8888.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[69b]"></a>_DrawBitmap</STRONG> (Thumb, 1252 bytes, Stack size 152 bytes, gui_drawbitmap_8888.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _DrawBitmap &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfIndex2ColorEx
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetpfColor2IndexEx
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetAlpha
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetAlphaEx
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetAlpha
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoClipping
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[796]"></a>_DoClipping</STRONG> (Thumb, 156 bytes, Stack size 36 bytes, gui_drawbitmap_8888.o(.text._DoClipping))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _DoClipping
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CallDrawBitmapHW
</UL>

<P><STRONG><a name="[69a]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_drawbitmap_8888.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _DrawBitmap &rArr; GUI_SetAlpha &rArr; GUI_DEVICE_Create &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_M8888I
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_8888
</UL>

<P><STRONG><a name="[81e]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_drawbitmap_8888.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelAlpha
</UL>

<P><STRONG><a name="[6ca]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_drawbitmap_8888.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelAlpha
</UL>

<P><STRONG><a name="[1e1]"></a>_DrawBitmapA565</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, gui_drawbitmap_a16.o(.text._DrawBitmapA565))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _DrawBitmapA565 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmapA16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsA565)
</UL>
<P><STRONG><a name="[1e3]"></a>_DrawBitmapAM565</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, gui_drawbitmap_a16.o(.text._DrawBitmapAM565))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _DrawBitmapAM565 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmapA16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsAM565)
</UL>
<P><STRONG><a name="[1e0]"></a>_DrawBitmapA555</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, gui_drawbitmap_a16.o(.text._DrawBitmapA555))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _DrawBitmapA555 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmapA16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsA555)
</UL>
<P><STRONG><a name="[1e2]"></a>_DrawBitmapAM555</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, gui_drawbitmap_a16.o(.text._DrawBitmapAM555))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _DrawBitmapAM555 &rArr; OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmapA16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_drawbitmap_a16.o(.rodata.GUI_BitmapMethodsAM555)
</UL>
<P><STRONG><a name="[69c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_drawbitmap_a16.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI__DrawBitmapA16bpp &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapAM555
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapA555
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapAM565
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapA565
</UL>

<P><STRONG><a name="[5f1]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_drawbitmap_a16.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
</UL>

<P><STRONG><a name="[5f2]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_drawbitmap_a16.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
</UL>

<P><STRONG><a name="[5f0]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_drawbitmap_a16.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawBitmapA16bpp
</UL>

<P><STRONG><a name="[3f2]"></a>_DrawLine1Ex</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, gui_drawline.o(.text._DrawLine1Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetLineColor
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[3f6]"></a>_DrawLineEnd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_drawline.o(.text._DrawLineEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DrawLineEnd &rArr; GL_DrawPoint &rArr; GL_FillCircle
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[7d7]"></a>_SetLineColor</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, gui_drawline.o(.text._SetLineColor))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLine1Ex
</UL>

<P><STRONG><a name="[4bd]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_drawline.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineTo
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLineRel
</UL>

<P><STRONG><a name="[4e6]"></a>_GetSizeAndColorTable</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gui_gif.o(.text._GetSizeAndColorTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GetSizeAndColorTable &rArr; _GetImageDimension &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageDimension
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadColorMap
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__DrawFromFilePointer
</UL>

<P><STRONG><a name="[4f3]"></a>_ReadColorMap</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gui_gif.o(.text._ReadColorMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ReadColorMap &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__DrawFromFilePointer
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSizeAndColorTable
</UL>

<P><STRONG><a name="[6e3]"></a>_GetDataBlock</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gui_gif.o(.text._GetDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__ReadData
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetNextCode
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadExtension
</UL>

<P><STRONG><a name="[4ea]"></a>_ReadExtension</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, gui_gif.o(.text._ReadExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ReadExtension &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__ReadData
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__DrawFromFilePointer
</UL>

<P><STRONG><a name="[4f5]"></a>_GetNextCode</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, gui_gif.o(.text._GetNextCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GetNextCode &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__GetNextByte
</UL>

<P><STRONG><a name="[4f0]"></a>_GetValue</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, gui_gif.o(.text._GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _GetValue &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__ReadData
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetYSizeEx
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetXSizeEx
</UL>

<P><STRONG><a name="[4e0]"></a>_GetImageDimension</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, gui_gif.o(.text._GetImageDimension))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GetImageDimension &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__Read16
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__ReadData
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSizeAndColorTable
</UL>

<P><STRONG><a name="[db]"></a>_DrawFromDataBlock</STRONG> (Thumb, 484 bytes, Stack size 112 bytes, gui_gif.o(.text._DrawFromDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _DrawFromDataBlock &rArr; GUI_GIF__GetNextByte &rArr; _GetNextCode &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelIndex
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__InitLZW
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__GetNextByte
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__ReadData
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_gif.o(.text.GUI_GIF_DrawSubEx)
</UL>
<P><STRONG><a name="[da]"></a>_ClearUnusedPixels</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, gui_gif.o(.text._ClearUnusedPixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ClearUnusedPixels &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBkColorIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_gif.o(.text.GUI_GIF_DrawSubEx)
</UL>
<P><STRONG><a name="[4e8]"></a>_SkipLocalColorTable</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, gui_gif.o(.text._SkipLocalColorTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SkipLocalColorTable &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__ReadData
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
</UL>

<P><STRONG><a name="[4eb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_gif.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__DrawFromFilePointer
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipLocalColorTable
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetImageDimension
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataBlock
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadColorMap
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetSizeAndColorTable
</UL>

<P><STRONG><a name="[4df]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_gif.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_DrawSubEx
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetValue
</UL>

<P><STRONG><a name="[4e7]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_gif.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__DrawFromFilePointer
</UL>

<P><STRONG><a name="[6d2]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_gif.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; LCD_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawFromDataBlock
</UL>

<P><STRONG><a name="[4e9]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_gif.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; _GetDataBlock &rArr; GUI_GIF__ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetDataBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetInfoEx
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF_GetImageInfoEx
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GIF__DrawFromFilePointer
</UL>

<P><STRONG><a name="[e4]"></a>_GetU8</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gui_jpeg.o(.text._GetU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _GetU8 &rArr; _FillInputBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillInputBuffer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> gui_jpeg.o(.text.GUI_JPEG__ReadUntilSOF)
<LI> gui_jpeg.o(.text._GetStuff)
</UL>
<P><STRONG><a name="[52a]"></a>_ReadFirstMarker</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gui_jpeg.o(.text._ReadFirstMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ReadFirstMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadInfo
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadUntilSOF
</UL>

<P><STRONG><a name="[520]"></a>_ReadMarkers</STRONG> (Thumb, 664 bytes, Stack size 56 bytes, gui_jpeg.o(.text._ReadMarkers))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ReadMarkers &rArr; _SkipVariable &rArr; _SkipInputData &rArr; _FillInputBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipInputData
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetU16
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetInt
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipVariable
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadNextMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__DecodeLine
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadUntilSOF
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
</UL>

<P><STRONG><a name="[51e]"></a>_LoadNextRow</STRONG> (Thumb, 456 bytes, Stack size 96 bytes, gui_jpeg.o(.text._LoadNextRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _LoadNextRow &rArr; _CoeffBufferGetP_Locked &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferGetP_Locked
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__DecodeLine
</UL>

<P><STRONG><a name="[51f]"></a>_DecodeNextRow</STRONG> (Thumb, 484 bytes, Stack size 64 bytes, gui_jpeg.o(.text._DecodeNextRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _DecodeNextRow &rArr; _ProcessRestart &rArr; _InitBitBuffer &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HuffDecode
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessRestart
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__DecodeLine
</UL>

<P><STRONG><a name="[527]"></a>_InitScan</STRONG> (Thumb, 1004 bytes, Stack size 72 bytes, gui_jpeg.o(.text._InitScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _InitScan &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcMCUBlockOrder
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitBitBuffer
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipInputData
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetInt
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadMarkers
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
</UL>

<P><STRONG><a name="[7fe]"></a>_FillInputBuffer</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gui_jpeg.o(.text._FillInputBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _FillInputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipInputData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetU8
</UL>

<P><STRONG><a name="[52b]"></a>_ReadNextMarker</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gui_jpeg.o(.text._ReadNextMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ReadNextMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadInfo
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadMarkers
</UL>

<P><STRONG><a name="[52c]"></a>_SkipVariable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_jpeg.o(.text._SkipVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _SkipVariable &rArr; _SkipInputData &rArr; _FillInputBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipInputData
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetInt
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadInfo
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadMarkers
</UL>

<P><STRONG><a name="[52d]"></a>_GetInt</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gui_jpeg.o(.text._GetInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadInfo
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadUntilSOF
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipVariable
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadMarkers
</UL>

<P><STRONG><a name="[52e]"></a>_GetU16</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gui_jpeg.o(.text._GetU16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetU16
</UL>
<BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadInfo
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__ReadUntilSOF
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadMarkers
</UL>

<P><STRONG><a name="[803]"></a>_SkipInputData</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_jpeg.o(.text._SkipInputData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _SkipInputData &rArr; _FillInputBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillInputBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SkipVariable
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadMarkers
</UL>

<P><STRONG><a name="[79a]"></a>_CoeffBufferGetP_Locked</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gui_jpeg.o(.text._CoeffBufferGetP_Locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _CoeffBufferGetP_Locked &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockAC_First
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockAC_Refine
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockDC_First
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockDC_Refine
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadNextRow
</UL>

<P><STRONG><a name="[528]"></a>_ProcessRestart</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, gui_jpeg.o(.text._ProcessRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ProcessRestart &rArr; _InitBitBuffer &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitBitBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeNextRow
</UL>

<P><STRONG><a name="[69f]"></a>_HuffDecode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gui_jpeg.o(.text._HuffDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _HuffDecode &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsNoMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockAC_Refine
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeNextRow
</UL>

<P><STRONG><a name="[6b4]"></a>_GetBitsNoMarker</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gui_jpeg.o(.text._GetBitsNoMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetU8_NoMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockAC_First
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockAC_Refine
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockDC_Refine
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitBitBuffer
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HuffDecode
</UL>

<P><STRONG><a name="[801]"></a>_InitBitBuffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_jpeg.o(.text._InitBitBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _InitBitBuffer &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsNoMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ProcessRestart
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
</UL>

<P><STRONG><a name="[7f1]"></a>_GetU8_NoMarker</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gui_jpeg.o(.text._GetU8_NoMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetU8_NoMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsNoMarker
</UL>

<P><STRONG><a name="[171]"></a>_GetStuff</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gui_jpeg.o(.text._GetStuff))
<BR>[Address Reference Count : 1]<UL><LI> gui_jpeg.o(.text._GetU8_NoMarker)
</UL>
<P><STRONG><a name="[526]"></a>_CoeffBufferAlloc</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, gui_jpeg.o(.text._CoeffBufferAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _CoeffBufferAlloc &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
</UL>

<P><STRONG><a name="[e2]"></a>_DecodeBlockDC_Refine</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gui_jpeg.o(.text._DecodeBlockDC_Refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _DecodeBlockDC_Refine &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsNoMarker
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferGetP_Locked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_jpeg.o(.text.GUI_JPEG__InitDraw)
</UL>
<P><STRONG><a name="[e0]"></a>_DecodeBlockDC_First</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gui_jpeg.o(.text._DecodeBlockDC_First))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _DecodeBlockDC_First &rArr; OUTLINED_FUNCTION_0 &rArr; _HuffDecode &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferGetP_Locked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_jpeg.o(.text.GUI_JPEG__InitDraw)
</UL>
<P><STRONG><a name="[e3]"></a>_DecodeBlockAC_Refine</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, gui_jpeg.o(.text._DecodeBlockAC_Refine))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _DecodeBlockAC_Refine &rArr; _HuffDecode &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsNoMarker
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HuffDecode
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferGetP_Locked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_jpeg.o(.text.GUI_JPEG__InitDraw)
</UL>
<P><STRONG><a name="[e1]"></a>_DecodeBlockAC_First</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, gui_jpeg.o(.text._DecodeBlockAC_First))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _DecodeBlockAC_First &rArr; OUTLINED_FUNCTION_0 &rArr; _HuffDecode &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsNoMarker
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CoeffBufferGetP_Locked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_jpeg.o(.text.GUI_JPEG__InitDraw)
</UL>
<P><STRONG><a name="[529]"></a>_CalcMCUBlockOrder</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, gui_jpeg.o(.text._CalcMCUBlockOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _CalcMCUBlockOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
</UL>

<P><STRONG><a name="[69e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_jpeg.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _HuffDecode &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HuffDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockAC_First
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockDC_First
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeNextRow
</UL>

<P><STRONG><a name="[6b3]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_jpeg.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsNoMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockAC_Refine
</UL>

<P><STRONG><a name="[812]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_jpeg.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadNextMarker
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadMarkers
</UL>

<P><STRONG><a name="[522]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_jpeg.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__DecodeLine
</UL>

<P><STRONG><a name="[6db]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_jpeg.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; _GetBitsNoMarker &rArr; _GetU8_NoMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsNoMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockDC_First
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeNextRow
</UL>

<P><STRONG><a name="[525]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_jpeg.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__InitDraw
</UL>

<P><STRONG><a name="[521]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_jpeg.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_JPEG__DecodeLine
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeBlockDC_Refine
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitScan
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadFirstMarker
</UL>

<P><STRONG><a name="[7fb]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_jpeg.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetU16
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetInt
</UL>

<P><STRONG><a name="[e9]"></a>_OnExit</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gui_setalpha.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE_Delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.text.GUI_SetAlpha)
</UL>
<P><STRONG><a name="[250]"></a>_DrawBitmap</STRONG> (Thumb, 1328 bytes, Stack size 88 bytes, gui_setalpha.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _DrawBitmap &rArr; _DrawBitmapLine &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapLine
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MixColors
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[251]"></a>_DrawHLine</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, gui_setalpha.o(.text._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _DrawHLine &rArr; _DrawBitmapLine &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapLine
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MixColors
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FillRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[252]"></a>_DrawVLine</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gui_setalpha.o(.text._DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _DrawVLine &rArr; _XorPixel &rArr; _SetPixelIndex &rArr; _MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[253]"></a>_FillRect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, gui_setalpha.o(.text._FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _FillRect &rArr; _DrawHLine &rArr; _DrawBitmapLine &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[254]"></a>_GetPixelIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_setalpha.o(.text._GetPixelIndex))
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[255]"></a>_SetPixelIndex</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gui_setalpha.o(.text._SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetPixelIndex &rArr; _MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MixColors
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[256]"></a>_XorPixel</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, gui_setalpha.o(.text._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _XorPixel &rArr; _SetPixelIndex &rArr; _MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawVLine
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[257]"></a>_SetOrg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_setalpha.o(.text._SetOrg))
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[258]"></a>_GetDevFunc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_setalpha.o(.text._GetDevFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetDevFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[259]"></a>_GetDevProp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gui_setalpha.o(.text._GetDevProp))
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[25a]"></a>_GetDevData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gui_setalpha.o(.text._GetDevData))
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[25b]"></a>_GetRect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_setalpha.o(.text._GetRect))
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._GUI_SetAlpha_API)
</UL>
<P><STRONG><a name="[6bb]"></a>_GetLine</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, gui_setalpha.o(.text._GetLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _GetLine &rArr; GUI__ExpandPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndices
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsPerPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7b7]"></a>_MixColors</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gui_setalpha.o(.text._MixColors))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _MixColors
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7bc]"></a>_DrawBitmapLine</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, gui_setalpha.o(.text._DrawBitmapLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _DrawBitmapLine &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBitsPerPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[170]"></a>_ReadRectFromMemdev</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, gui_setalpha.o(.text._ReadRectFromMemdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ReadRectFromMemdev &rArr; GUI_MEMDEV_GetXSize &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXSize
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndices
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetYPos
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetXPos
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_11
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.text._GetLine)
</UL>
<P><STRONG><a name="[7cd]"></a>_GetBitsPerPixel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gui_setalpha.o(.text._GetBitsPerPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetBitsPerPixel &rArr; LCD_GetBitsPerPixelEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetBitsPerPixelEx
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapLine
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
</UL>

<P><STRONG><a name="[237]"></a>_Color2Index</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_setalpha.o(.text._Color2Index))
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
</UL>
<P><STRONG><a name="[238]"></a>_Index2Color</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_setalpha.o(.text._Index2Color))
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
</UL>
<P><STRONG><a name="[239]"></a>_GetIndexMask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gui_setalpha.o(.text._GetIndexMask))
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
</UL>
<P><STRONG><a name="[23a]"></a>_Color2IndexBulk</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gui_setalpha.o(.text._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
</UL>
<P><STRONG><a name="[23b]"></a>_Index2ColorBulk</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gui_setalpha.o(.text._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_setalpha.o(.rodata._API_ColorConv_SetAlpha)
</UL>
<P><STRONG><a name="[79e]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk
</UL>

<P><STRONG><a name="[800]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk
</UL>

<P><STRONG><a name="[6cb]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; _SetPixelIndex &rArr; _MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7b9]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[79d]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Index2ColorBulk
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Color2IndexBulk
</UL>

<P><STRONG><a name="[7bb]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7ba]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7b8]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[6ed]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; _SetPixelIndex &rArr; _MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[6ef]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; _SetPixelIndex &rArr; _MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[6ba]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; _GetLine &rArr; GUI__ExpandPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[813]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReadRectFromMemdev
</UL>

<P><STRONG><a name="[6bd]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_setalpha.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; _SetPixelIndex &rArr; _MixColors
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[5ba]"></a>_Link</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, gui_timer.o(.text._Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Link &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
</UL>

<P><STRONG><a name="[ec]"></a>_OnExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_timer.o(.text._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> gui_timer.o(.text.GUI_TIMER_Create)
</UL>
<P><STRONG><a name="[5bd]"></a>_Unlink</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, gui_timer.o(.text._Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _Unlink &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>

<P><STRONG><a name="[5b9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_timer.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetPeriod
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Create
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetNextTimerLin
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER__GetFirstTimer
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Link
</UL>

<P><STRONG><a name="[5bc]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_timer.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_GetPeriod
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Restart
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_TIMER_Delete
</UL>

<P><STRONG><a name="[5d0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_xbf.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOffAndSize
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOff
</UL>

<P><STRONG><a name="[216]"></a>_DispChar</STRONG> (Thumb, 476 bytes, Stack size 304 bytes, gui_xbf_propext.o(.text._DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOffAndSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_xbf_propext.o(.rodata.GUI_XBF_APIList_Prop_Ext)
</UL>
<P><STRONG><a name="[231]"></a>_DispLine</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gui_xbf_propext.o(.text._DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DispLine
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPROP_EXT__SetfpClearLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_xbf_propext.o(.rodata._APIList)
</UL>
<P><STRONG><a name="[142]"></a>_ClearLine</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, gui_xbf_propext.o(.text._ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _ClearLine &rArr; GUI_XBF__GetCharDistX &rArr; GUI__GetNonExistingCharWidth &rArr; GUI_SetFont &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetColor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBkColor
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetOverlap
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetCharDistX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_xbf_propext.o(.text._DispLine)
</UL>
<P><STRONG><a name="[217]"></a>_DispChar</STRONG> (Thumb, 544 bytes, Stack size 320 bytes, gui_xbf_propfrm.o(.text._DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = _DispChar &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DrawNonExistingCharacter
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_XBF__GetOffAndSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_xbf_propfrm.o(.rodata.GUI_XBF_APIList_Prop_Frm)
</UL>
<P><STRONG><a name="[667]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_aa.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
</UL>

<P><STRONG><a name="[66b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_aa.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
</UL>

<P><STRONG><a name="[666]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_aa.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
</UL>

<P><STRONG><a name="[668]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_aa.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
</UL>

<P><STRONG><a name="[66a]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_aa.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetPixelColor
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
</UL>

<P><STRONG><a name="[664]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_aa.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
</UL>

<P><STRONG><a name="[665]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_aa.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_NoTrans
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_NoTrans
</UL>

<P><STRONG><a name="[669]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_aa.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA8_Trans
</UL>

<P><STRONG><a name="[1ea]"></a>_DrawBitmap_RLE1</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lcd_rle1.o(.text._DrawBitmap_RLE1))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _DrawBitmap_RLE1 &rArr; _DrawBitmap &rArr; LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle1.o(.rodata.GUI_BitmapMethodsRLE1)
</UL>
<P><STRONG><a name="[1ed]"></a>_DrawBitmap_RLE1Ex</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, lcd_rle1.o(.text._DrawBitmap_RLE1Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _DrawBitmap_RLE1Ex &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle1.o(.rodata.GUI_BitmapMethodsRLE1Ex)
</UL>
<P><STRONG><a name="[118]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_rle1.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle1.o(.text.LCD__RLE1_SetFunc)
</UL>
<P><STRONG><a name="[119]"></a>_GetByte_GetData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd_rle1.o(.text._GetByte_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetByte_GetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle1.o(.text.LCD__RLE1_SetFunc)
</UL>
<P><STRONG><a name="[150]"></a>_GetByte_pPixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rle1.o(.text._GetByte_pPixel))
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle1.o(.text._DrawBitmap_RLE1)
</UL>
<P><STRONG><a name="[7bd]"></a>_DrawBitmap</STRONG> (Thumb, 316 bytes, Stack size 88 bytes, lcd_rle1.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _DrawBitmap &rArr; LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE1Ex
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE1
</UL>

<P><STRONG><a name="[1f0]"></a>_DrawBitmap_RLE4</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lcd_rle4.o(.text._DrawBitmap_RLE4))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DrawBitmap_RLE4 &rArr; _DrawBitmap &rArr; LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle4.o(.rodata.GUI_BitmapMethodsRLE4)
</UL>
<P><STRONG><a name="[1f1]"></a>_DrawBitmap_RLE4Ex</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, lcd_rle4.o(.text._DrawBitmap_RLE4Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _DrawBitmap_RLE4Ex &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle4.o(.rodata.GUI_BitmapMethodsRLE4Ex)
</UL>
<P><STRONG><a name="[11d]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_rle4.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle4.o(.text.LCD__RLE4_SetFunc)
</UL>
<P><STRONG><a name="[11e]"></a>_GetByte_GetData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd_rle4.o(.text._GetByte_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetByte_GetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle4.o(.text.LCD__RLE4_SetFunc)
</UL>
<P><STRONG><a name="[154]"></a>_GetByte_pPixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rle4.o(.text._GetByte_pPixel))
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle4.o(.text._DrawBitmap_RLE4)
</UL>
<P><STRONG><a name="[7be]"></a>_DrawBitmap</STRONG> (Thumb, 436 bytes, Stack size 80 bytes, lcd_rle4.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _DrawBitmap &rArr; LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE4Ex
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE4
</UL>

<P><STRONG><a name="[6a0]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd_rle4.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[6b5]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rle4.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; LCD_SetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[7ce]"></a>_DrawBitmap_Cached</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lcd_rle8.o(.text._DrawBitmap_Cached))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _DrawBitmap_Cached &rArr; _DrawBitmap &rArr; LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Stream
</UL>

<P><STRONG><a name="[1f3]"></a>_DrawBitmap_Stream</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lcd_rle8.o(.text._DrawBitmap_Stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _DrawBitmap_Stream &rArr; _DrawBitmap_Cached &rArr; _DrawBitmap &rArr; LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Cached
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle8.o(.rodata.GUI_BitmapMethodsRLE8_Stream)
</UL>
<P><STRONG><a name="[1f2]"></a>_DrawBitmap_Ex</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, lcd_rle8.o(.text._DrawBitmap_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _DrawBitmap_Ex &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle8.o(.rodata.GUI_BitmapMethodsRLE8Ex)
</UL>
<P><STRONG><a name="[11f]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_rle8.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle8.o(.text.LCD__RLE8_SetFunc)
</UL>
<P><STRONG><a name="[120]"></a>_GetByte_GetData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd_rle8.o(.text._GetByte_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetByte_GetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle8.o(.text.LCD__RLE8_SetFunc)
</UL>
<P><STRONG><a name="[14f]"></a>_GetByte_pPixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rle8.o(.text._GetByte_pPixel))
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle8.o(.text._DrawBitmap_Cached)
</UL>
<P><STRONG><a name="[7bf]"></a>_DrawBitmap</STRONG> (Thumb, 548 bytes, Stack size 80 bytes, lcd_rle8.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _DrawBitmap &rArr; LCD_GetpPalConvTable &rArr; LCD_GetpPalConvTableUncached
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetpPalConvTable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Cached
</UL>

<P><STRONG><a name="[7cf]"></a>_DrawBitmap_RLE16_Cached</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lcd_rle16.o(.text._DrawBitmap_RLE16_Cached))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _DrawBitmap_RLE16_Cached &rArr; OUTLINED_FUNCTION_0 &rArr; _DrawBitmap_Cached &rArr; _DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE16_Stream
</UL>

<P><STRONG><a name="[7d1]"></a>_DrawBitmap_RLEM16_Cached</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lcd_rle16.o(.text._DrawBitmap_RLEM16_Cached))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _DrawBitmap_RLEM16_Cached &rArr; OUTLINED_FUNCTION_0 &rArr; _DrawBitmap_Cached &rArr; _DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEM16_Stream
</UL>

<P><STRONG><a name="[1ec]"></a>_DrawBitmap_RLE16_Stream</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, lcd_rle16.o(.text._DrawBitmap_RLE16_Stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _DrawBitmap_RLE16_Stream &rArr; _DrawBitmap_RLE16_Cached &rArr; OUTLINED_FUNCTION_0 &rArr; _DrawBitmap_Cached &rArr; _DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE16_Cached
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle16.o(.rodata.GUI_BitmapMethodsRLE16_Stream)
</UL>
<P><STRONG><a name="[1f6]"></a>_DrawBitmap_RLEM16_Stream</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, lcd_rle16.o(.text._DrawBitmap_RLEM16_Stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _DrawBitmap_RLEM16_Stream &rArr; _DrawBitmap_RLEM16_Cached &rArr; OUTLINED_FUNCTION_0 &rArr; _DrawBitmap_Cached &rArr; _DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEM16_Cached
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle16.o(.rodata.GUI_BitmapMethodsRLEM16_Stream)
</UL>
<P><STRONG><a name="[1eb]"></a>_DrawBitmap_RLE16Ex</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, lcd_rle16.o(.text._DrawBitmap_RLE16Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _DrawBitmap_RLE16Ex &rArr; OUTLINED_FUNCTION_1 &rArr; _DrawBitmap_Ex &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle16.o(.rodata.GUI_BitmapMethodsRLE16Ex)
</UL>
<P><STRONG><a name="[1f5]"></a>_DrawBitmap_RLEM16Ex</STRONG> (Thumb, 12 bytes, Stack size 24 bytes, lcd_rle16.o(.text._DrawBitmap_RLEM16Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _DrawBitmap_RLEM16Ex &rArr; OUTLINED_FUNCTION_1 &rArr; _DrawBitmap_Ex &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle16.o(.rodata.GUI_BitmapMethodsRLEM16Ex)
</UL>
<P><STRONG><a name="[116]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_rle16.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle16.o(.text.LCD__RLE16_SetFunc)
</UL>
<P><STRONG><a name="[117]"></a>_GetByte_GetData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd_rle16.o(.text._GetByte_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetByte_GetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle16.o(.text.LCD__RLE16_SetFunc)
</UL>
<P><STRONG><a name="[151]"></a>_GetByte_pPixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rle16.o(.text._GetByte_pPixel))
<BR>[Address Reference Count : 2]<UL><LI> lcd_rle16.o(.text._DrawBitmap_RLEM16_Cached)
<LI> lcd_rle16.o(.text._DrawBitmap_RLE16_Cached)
</UL>
<P><STRONG><a name="[6a2]"></a>_DrawBitmap_Cached</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lcd_rle16.o(.text._DrawBitmap_Cached))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _DrawBitmap_Cached &rArr; _DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[7c0]"></a>_DrawBitmap</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, lcd_rle16.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Cached
</UL>

<P><STRONG><a name="[7c1]"></a>_GetPixelIndex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd_rle16.o(.text._GetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color_M565
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color_565
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>

<P><STRONG><a name="[6b7]"></a>_DrawBitmap_Ex</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, lcd_rle16.o(.text._DrawBitmap_Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _DrawBitmap_Ex &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[6a1]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_rle16.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; _DrawBitmap_Cached &rArr; _DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Cached
</UL>
<BR>[Called By]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEM16_Cached
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE16_Cached
</UL>

<P><STRONG><a name="[6b6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_rle16.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; _DrawBitmap_Ex &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_Ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEM16Ex
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE16Ex
</UL>

<P><STRONG><a name="[7d0]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_rle16.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEM16_Stream
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE16_Stream
</UL>

<P><STRONG><a name="[1ee]"></a>_DrawBitmap_RLE32</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd_rle32.o(.text._DrawBitmap_RLE32))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _DrawBitmap_RLE32 &rArr; _DrawBitmap &rArr; GUI__AllocAlphaBuffer &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle32.o(.rodata.GUI_BitmapMethodsRLE32)
</UL>
<P><STRONG><a name="[1ef]"></a>_DrawBitmap_RLE32Ex</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lcd_rle32.o(.text._DrawBitmap_RLE32Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _DrawBitmap_RLE32Ex &rArr; _DrawBitmap &rArr; GUI__AllocAlphaBuffer &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocZero
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_RequestSize
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle32.o(.rodata.GUI_BitmapMethodsRLE32Ex)
</UL>
<P><STRONG><a name="[11a]"></a>_OnExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_rle32.o(.text._OnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _OnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle32.o(.text.LCD__RLE32_SetFunc)
</UL>
<P><STRONG><a name="[11c]"></a>_GetByte_GetData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_rle32.o(.text._GetByte_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetByte_GetData &rArr; _LoadBufferOnDemand
</UL>
<BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadBufferOnDemand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle32.o(.text.LCD__RLE32_SetFunc)
</UL>
<P><STRONG><a name="[11b]"></a>_GetPixel_GetData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd_rle32.o(.text._GetPixel_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _GetPixel_GetData &rArr; _LoadBufferOnDemand
</UL>
<BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LoadBufferOnDemand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle32.o(.text.LCD__RLE32_SetFunc)
</UL>
<P><STRONG><a name="[153]"></a>_GetByte_pPixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rle32.o(.text._GetByte_pPixel))
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle32.o(.text._DrawBitmap_RLE32)
</UL>
<P><STRONG><a name="[152]"></a>_GetPixel_pPixel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rle32.o(.text._GetPixel_pPixel))
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle32.o(.text._DrawBitmap_RLE32)
</UL>
<P><STRONG><a name="[7c2]"></a>_DrawBitmap</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, lcd_rle32.o(.text._DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _DrawBitmap &rArr; GUI__AllocAlphaBuffer &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE32Ex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLE32
</UL>

<P><STRONG><a name="[146]"></a>_DrawClip</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lcd_rle32.o(.text._DrawClip))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _DrawClip &rArr; _Draw &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle32.o(.text._DrawBitmap)
</UL>
<P><STRONG><a name="[147]"></a>_Draw</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, lcd_rle32.o(.text._Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _Draw &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawClip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rle32.o(.text._DrawBitmap)
</UL>
<P><STRONG><a name="[7f4]"></a>_LoadBufferOnDemand</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcd_rle32.o(.text._LoadBufferOnDemand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _LoadBufferOnDemand
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixel_GetData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetByte_GetData
</UL>

<P><STRONG><a name="[1f4]"></a>_DrawBitmap_RLEAlpha</STRONG> (Thumb, 496 bytes, Stack size 120 bytes, lcd_rlealpha.o(.text._DrawBitmap_RLEAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _DrawBitmap_RLEAlpha &rArr; _FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetColor
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetAlphaBuffer
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rlealpha.o(.rodata.GUI_BitmapMethodsRLEAlpha)
</UL>
<P><STRONG><a name="[155]"></a>_DrawClip</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lcd_rlealpha.o(.text._DrawClip))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _DrawClip &rArr; _Draw &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rlealpha.o(.text._DrawBitmap_RLEAlpha)
</UL>
<P><STRONG><a name="[156]"></a>_Draw</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, lcd_rlealpha.o(.text._Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _Draw &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawClip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rlealpha.o(.text._DrawBitmap_RLEAlpha)
</UL>
<P><STRONG><a name="[7a5]"></a>_FlushBuffer</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, lcd_rlealpha.o(.text._FlushBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _FlushBuffer &rArr; LCD_DrawBitmap &rArr; LCD_FillRect
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Draw
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap_RLEAlpha
</UL>

<P><STRONG><a name="[28]"></a>_DrawBitmap180</STRONG> (Thumb, 932 bytes, Stack size 96 bytes, lcd_rotate180.o(.text._DrawBitmap180))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _DrawBitmap180 &rArr; _TransformPoint &rArr; WM_GetWindowRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetPfSetPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotate180.o(.data.LCD_APIList180)
</UL>
<P><STRONG><a name="[29]"></a>_Rect2TextRect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_rotate180.o(.text._Rect2TextRect))
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotate180.o(.data.LCD_APIList180)
</UL>
<P><STRONG><a name="[7c3]"></a>_TransformPoint</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lcd_rotate180.o(.text._TransformPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _TransformPoint &rArr; WM_GetWindowRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap180
</UL>

<P><STRONG><a name="[7c4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_rotate180.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap180
</UL>

<P><STRONG><a name="[7c6]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_rotate180.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmap180
</UL>

<P><STRONG><a name="[2a]"></a>_DrawBitmapCCW</STRONG> (Thumb, 960 bytes, Stack size 88 bytes, lcd_rotateccw.o(.text._DrawBitmapCCW))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _DrawBitmapCCW &rArr; _TransformPoint &rArr; WM_GetWindowRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetPfSetPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotateccw.o(.data.LCD_APIListCCW)
</UL>
<P><STRONG><a name="[2b]"></a>_Rect2TextRect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_rotateccw.o(.text._Rect2TextRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Rect2TextRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotateccw.o(.data.LCD_APIListCCW)
</UL>
<P><STRONG><a name="[2c]"></a>_TransformRect</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcd_rotateccw.o(.text._TransformRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _TransformRect &rArr; _TransformPoint &rArr; WM_GetWindowRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotateccw.o(.data.LCD_APIListCCW)
</UL>
<P><STRONG><a name="[7c7]"></a>_TransformPoint</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lcd_rotateccw.o(.text._TransformPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _TransformPoint &rArr; WM_GetWindowRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformRect
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCCW
</UL>

<P><STRONG><a name="[7c8]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_rotateccw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCCW
</UL>

<P><STRONG><a name="[7c9]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_rotateccw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCCW
</UL>

<P><STRONG><a name="[2d]"></a>_DrawBitmapCW</STRONG> (Thumb, 936 bytes, Stack size 88 bytes, lcd_rotatecw.o(.text._DrawBitmapCW))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _DrawBitmapCW &rArr; _TransformPoint &rArr; WM_GetWindowRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD__GetPfSetPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotatecw.o(.data.LCD_APIListCW)
</UL>
<P><STRONG><a name="[2e]"></a>_Rect2TextRect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_rotatecw.o(.text._Rect2TextRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Rect2TextRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotatecw.o(.data.LCD_APIListCW)
</UL>
<P><STRONG><a name="[2f]"></a>_TransformRect</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcd_rotatecw.o(.text._TransformRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _TransformRect &rArr; _TransformPoint &rArr; WM_GetWindowRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformPoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_rotatecw.o(.data.LCD_APIListCW)
</UL>
<P><STRONG><a name="[7ca]"></a>_TransformPoint</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd_rotatecw.o(.text._TransformPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _TransformPoint &rArr; WM_GetWindowRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TransformRect
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
</UL>

<P><STRONG><a name="[7cb]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_rotatecw.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
</UL>

<P><STRONG><a name="[7cc]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd_rotatecw.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitmapCW
</UL>

<P><STRONG><a name="[659]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_rotatedisplay.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_GetCurrentIndex
</UL>

<P><STRONG><a name="[65b]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_rotatedisplay.o(.text.OUTLINED_FUNCTION_3), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ROTATE_GetOrientationEx
</UL>

<P><STRONG><a name="[585]"></a>_Check</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guidev_rotate.o(.text._Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _Check &rArr; GUI_MEMDEV_GetBitsPerPixel &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetBitsPerPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
</UL>

<P><STRONG><a name="[586]"></a>_GetMinMax</STRONG> (Thumb, 200 bytes, Stack size 36 bytes, guidev_rotate.o(.text._GetMinMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _GetMinMax
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
</UL>

<P><STRONG><a name="[6e4]"></a>_GetColor</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, guidev_rotate.o(.text._GetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[568]"></a>_GetColorHQ</STRONG> (Thumb, 392 bytes, Stack size 96 bytes, guidev_rotate.o(.text._GetColorHQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GetColorHQ
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DivideRound32
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[569]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
</UL>

<P><STRONG><a name="[563]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[562]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[55f]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[587]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; _GetColor
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
</UL>

<P><STRONG><a name="[560]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; _Check &rArr; GUI_MEMDEV_GetBitsPerPixel &rArr; OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[56a]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[561]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__Rotate
</UL>

<P><STRONG><a name="[565]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[564]"></a>OUTLINED_FUNCTION_11</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_11))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OUTLINED_FUNCTION_11 &rArr; GUI_MEMDEV_GetDataPtr &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[566]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; _GetMinMax
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMinMax
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[56b]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[55d]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Rotate
</UL>

<P><STRONG><a name="[567]"></a>OUTLINED_FUNCTION_15</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_rotate.o(.text.OUTLINED_FUNCTION_15))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_RotateHQ
</UL>

<P><STRONG><a name="[55b]"></a>_CreateStaticDevice</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, guidev_staticdevices.o(.text._CreateStaticDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _CreateStaticDevice &rArr; WM_SetSize &rArr; WM_ResizeWindow &rArr;  WM__UpdateChildPositions (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetDesktopWindow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSize
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSize
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Select
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetSize
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetWindowOrgX
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__CreateFixed
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_SetOrg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__Paint1
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AlphaPreserveTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_Paint1Static
</UL>

<P><STRONG><a name="[197]"></a>GUI_USAGE_BM_AddPixel</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, guidev_usagebm.o(.text.GUI_USAGE_BM_AddPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_USAGE_BM_AddPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.rodata.API)
</UL>
<P><STRONG><a name="[198]"></a>GUI_USAGE_BM_AddHLine</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, guidev_usagebm.o(.text.GUI_USAGE_BM_AddHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_USAGE_BM_AddHLine &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.rodata.API)
</UL>
<P><STRONG><a name="[199]"></a>GUI_USAGE_BM_Clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, guidev_usagebm.o(.text.GUI_USAGE_BM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GUI_USAGE_BM_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.rodata.API)
</UL>
<P><STRONG><a name="[19a]"></a>_GUI_USAGE_BM_Delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guidev_usagebm.o(.text._GUI_USAGE_BM_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _GUI_USAGE_BM_Delete &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.rodata.API)
</UL>
<P><STRONG><a name="[19b]"></a>GUI_USAGE_BM_GetNextDirty</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, guidev_usagebm.o(.text.GUI_USAGE_BM_GetNextDirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUI_USAGE_BM_GetNextDirty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guidev_usagebm.o(.rodata.API)
</UL>
<P><STRONG><a name="[576]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, guidev_writealpha.o(.text.OUTLINED_FUNCTION_0), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MixColors256
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[57d]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_writealpha.o(.text.OUTLINED_FUNCTION_1), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[57a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_writealpha.o(.text.OUTLINED_FUNCTION_2), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[577]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_writealpha.o(.text.OUTLINED_FUNCTION_3), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[57c]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guidev_writealpha.o(.text.OUTLINED_FUNCTION_4), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[578]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guidev_writealpha.o(.text.OUTLINED_FUNCTION_5), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[57b]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_writealpha.o(.text.OUTLINED_FUNCTION_6), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[579]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guidev_writealpha.o(.text.OUTLINED_FUNCTION_7), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_WriteAlphaAt
</UL>

<P><STRONG><a name="[58b]"></a>_WriteToActiveAlpha</STRONG> (Thumb, 420 bytes, Stack size 128 bytes, guidev_writetoactivealpha.o(.text._WriteToActiveAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _WriteToActiveAlpha &rArr; GUI__DoAlphaBlending &rArr; GUI__GetAlphaBuffer &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__AllocAlphaBuffer
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DoAlphaBlending
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV_GetDataPtr
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndicesEx
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClipY
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClipX
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
</UL>

<P><STRONG><a name="[589]"></a>_ClipX</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, guidev_writetoactivealpha.o(.text._ClipX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ClipX
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[58a]"></a>_ClipY</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, guidev_writetoactivealpha.o(.text._ClipY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ClipY
</UL>
<BR>[Calls]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveAlpha
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteToActiveAlpha
</UL>

<P><STRONG><a name="[799]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, guidev_writetoactivealpha.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClipY
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClipX
</UL>

<P><STRONG><a name="[798]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, guidev_writetoactivealpha.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClipY
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClipX
</UL>

<P><STRONG><a name="[58e]"></a>_Convert16</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, guidev_writetoactiveopaque.o(.text._Convert16), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[591]"></a>_Convert8</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, guidev_writetoactiveopaque.o(.text._Convert8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__ExpandPixelIndicesEx
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[594]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, guidev_writetoactiveopaque.o(.text.OUTLINED_FUNCTION_0), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[590]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, guidev_writetoactiveopaque.o(.text.OUTLINED_FUNCTION_1), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[593]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guidev_writetoactiveopaque.o(.text.OUTLINED_FUNCTION_2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[592]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guidev_writetoactiveopaque.o(.text.OUTLINED_FUNCTION_3), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[58c]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guidev_writetoactiveopaque.o(.text.OUTLINED_FUNCTION_4), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_MEMDEV__WriteToActiveOpaque
</UL>

<P><STRONG><a name="[39c]"></a>_GetDisplayedText</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, edit.o(.text._GetDisplayedText))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _GetDisplayedText &rArr; GUI_ALLOC_GetFixedBlock &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetFixedBlock
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_Encode
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPosEx
</UL>

<P><STRONG><a name="[39d]"></a>_CalcScrollPos</STRONG> (Thumb, 884 bytes, Stack size 96 bytes, edit.o(.text._CalcScrollPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _CalcScrollPos &rArr; EDIT_GetCursorPixelPos &rArr; GUI__CalcTextRect &rArr; GUI_GetFontDistY &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistXEx
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__strcmp
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetStringDistX
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharCode
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIDGET__GetInsideRect
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetCharDir
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPosEx
</UL>

<P><STRONG><a name="[39e]"></a>_UnlockText</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, edit.o(.text._UnlockText))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _UnlockText &rArr; GUI_ALLOC_UnlockH
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_FreeFixedBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPosEx
</UL>

<P><STRONG><a name="[3c6]"></a>_SetValue</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, edit.o(.text._SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _SetValue &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetValue
</UL>

<P><STRONG><a name="[39b]"></a>_ManageTimer</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, edit.o(.text._ManageTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _ManageTimer &rArr; WM_CreateTimer &rArr; GUI_TIMER_Create &rArr; GUI_ALLOC_AllocZero &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_CreateTimer
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_DeleteTimer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[3b9]"></a>_IncrementBuffer</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, edit.o(.text._IncrementBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _IncrementBuffer &rArr; GUI_ALLOC_Realloc &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Realloc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsSpaceInBuffer
</UL>

<P><STRONG><a name="[38f]"></a>_ChangeCharacter</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, edit.o(.text._ChangeCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ChangeCharacter &rArr; OUTLINED_FUNCTION_9 &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__CalcSizeOfChar
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_Encode
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
</UL>

<P><STRONG><a name="[38a]"></a>_DeleteChar</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, edit.o(.text._DeleteChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _DeleteChar &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetNumChars
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumGlyphs2NumBytes
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC_GetCharSize
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
</UL>

<P><STRONG><a name="[393]"></a>_IsSpaceInBuffer</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, edit.o(.text._IsSpaceInBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _IsSpaceInBuffer &rArr; _IncrementBuffer &rArr; GUI_ALLOC_Realloc &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_12
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
</UL>

<P><STRONG><a name="[795]"></a>_GetCharDir</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, edit.o(.text._GetCharDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetCharDir
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcScrollPos
</UL>

<P><STRONG><a name="[389]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetNumChars
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementBuffer
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageTimer
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
</UL>

<P><STRONG><a name="[388]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetNumChars
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
</UL>

<P><STRONG><a name="[39a]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_InvalidateWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetMaxLen
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetCursorAtPixel
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
</UL>

<P><STRONG><a name="[38c]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_3 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[3bd]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_4 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetText
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DeleteChar
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementBuffer
</UL>

<P><STRONG><a name="[3ab]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__DispLine &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_Callback
</UL>

<P><STRONG><a name="[3bc]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_7 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetText
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_GetCursorPixelPos
</UL>

<P><STRONG><a name="[397]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; WM_NotifyParent &rArr; WM_SendToParent &rArr;  WM__SendMessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_NotifyParent
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ChangeCharacter
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetValue
</UL>

<P><STRONG><a name="[38d]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_10 &rArr; GUI_UC__NumGlyphs2NumBytes &rArr; GUI_UC__NumChars2NumBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumGlyphs2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_AddKey
</UL>

<P><STRONG><a name="[3b8]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, edit.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_12 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_CreateUser
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsSpaceInBuffer
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementBuffer
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ManageTimer
</UL>

<P><STRONG><a name="[c3]"></a>_AddKeyDec</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, editdec.o(.text._AddKeyDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + In Cycle
<LI>Call Chain = _AddKeyDec &rArr;  _AddKeyDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddPosition
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SwapSign
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeNegative
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementCursor
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakePositive
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UpdateBuffer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetValue
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPos
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> editdec.o(.text.EDIT_SetDecMode)
</UL>
<P><STRONG><a name="[c2]"></a>_UpdateBuffer</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, editdec.o(.text._UpdateBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _UpdateBuffer &rArr; GUI_AddDecShift
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddSign
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> editdec.o(.text.EDIT_SetDecMode)
</UL>
<P><STRONG><a name="[3c2]"></a>_GetDecs</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, editdec.o(.text._GetDecs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetDecs
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetDecMode
</UL>

<P><STRONG><a name="[789]"></a>_MakePositive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, editdec.o(.text._MakePositive))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _MakePositive &rArr; OUTLINED_FUNCTION_1 &rArr; EDIT_SetValue &rArr; _SetValue &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SwapSign
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
</UL>

<P><STRONG><a name="[78b]"></a>_IncrementCursor</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, editdec.o(.text._IncrementCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _IncrementCursor &rArr; OUTLINED_FUNCTION_0 &rArr; EDIT__GetCurrentChar &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__SetCursorPos
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
</UL>

<P><STRONG><a name="[788]"></a>_MakeNegative</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, editdec.o(.text._MakeNegative))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _MakeNegative &rArr; OUTLINED_FUNCTION_1 &rArr; EDIT_SetValue &rArr; _SetValue &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SwapSign
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
</UL>

<P><STRONG><a name="[787]"></a>_SwapSign</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, editdec.o(.text._SwapSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _SwapSign &rArr; _MakeNegative &rArr; OUTLINED_FUNCTION_1 &rArr; EDIT_SetValue &rArr; _SetValue &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeNegative
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakePositive
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
</UL>

<P><STRONG><a name="[78a]"></a>_AddPosition</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, editdec.o(.text._AddPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _AddPosition &rArr; EDIT_SetValue &rArr; _SetValue &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
</UL>

<P><STRONG><a name="[6a4]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, editdec.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; EDIT__GetCurrentChar &rArr; GUI_UC_GetCharCode &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT__GetCurrentChar
</UL>
<BR>[Called By]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IncrementCursor
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddKeyDec
</UL>

<P><STRONG><a name="[6b8]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, editdec.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; EDIT_SetValue &rArr; _SetValue &rArr; OUTLINED_FUNCTION_2 &rArr; WM_InvalidateWindow &rArr; WM_InvalidateRect &rArr; WM__InvalidateRectEx &rArr; WM__InvalidateRect &rArr;  WM__InvalidateRect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDIT_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakeNegative
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MakePositive
</UL>

<P><STRONG><a name="[22b]"></a>_DrawUp</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, widget_effect_simple.o(.text._DrawUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _DrawUp &rArr; _DrawUpRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_DrawRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_simple.o(.rodata.WIDGET_Effect_Simple)
</UL>
<P><STRONG><a name="[22c]"></a>_DrawUpRect</STRONG> (Thumb, 36 bytes, Stack size 136 bytes, widget_effect_simple.o(.text._DrawUpRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _DrawUpRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_DrawRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_simple.o(.rodata.WIDGET_Effect_Simple)
</UL>
<P><STRONG><a name="[22d]"></a>_DrawDown</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, widget_effect_simple.o(.text._DrawDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _DrawDown &rArr; _DrawDownRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_DrawRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_GetClientRect
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_simple.o(.rodata.WIDGET_Effect_Simple)
</UL>
<P><STRONG><a name="[22e]"></a>_DrawDownRect</STRONG> (Thumb, 36 bytes, Stack size 136 bytes, widget_effect_simple.o(.text._DrawDownRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _DrawDownRect &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_DrawRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RestoreContext
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SaveContext_W
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget_effect_simple.o(.rodata.WIDGET_Effect_Simple)
</UL>
<P><STRONG><a name="[6a5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, widget_effect_simple.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; GUI_DrawRect &rArr; WM__InitIVRSearch &rArr; WM__GetNextIVR &rArr; WM__ActivateClipRect &rArr; _SetClipRectUserIntersect &rArr; LCD_SetClipRectEx &rArr; GUI__IntersectRects
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawDownRect
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawUpRect
</UL>

<P><STRONG><a name="[759]"></a>WM__ReleaseCapture</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wm_setcapture.o(.text.WM__ReleaseCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = WM__ReleaseCapture &rArr; WM__SendMessage &rArr; WM_DefaultProc &rArr; WM_GetInsideRectExScrollbar &rArr; WM_GetDialogItem &rArr; __GetDialogItem &rArr; _GetDialogItem &rArr;  _GetDialogItem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_ReleaseCapture
</UL>

<P><STRONG><a name="[760]"></a>_GetNextChild</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_setfocusonnextchild.o(.text._GetNextChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetNextChild
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_h2p
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnNextChild
</UL>

<P><STRONG><a name="[761]"></a>_GetPrevChild</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm_setfocusonprevchild.o(.text._GetPrevChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _GetPrevChild &rArr; WM__GetPrevSibling &rArr; WM__GetFirstSibling &rArr; WM_GetParent &rArr; OUTLINED_FUNCTION_0 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetPrevSibling
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__GetLastSibling
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_SetFocusOnPrevChild
</UL>

<P><STRONG><a name="[779]"></a>_RegisterExit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_touch.o(.text._RegisterExit))
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__RegisterExit
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM__SetMotionCallback
</UL>

<P><STRONG><a name="[178]"></a>_OnExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_touch.o(.text._OnExit))
<BR>[Address Reference Count : 1]<UL><LI> wm_touch.o(.text._RegisterExit)
</UL>
<P><STRONG><a name="[733]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_touch.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM_HandlePID
</UL>

<P><STRONG><a name="[18]"></a>_DrawCharAA4_Trans</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, guiaa_char4.o(.text._DrawCharAA4_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _DrawCharAA4_Trans &rArr; LCD_SetPixelAA4_Trans &rArr; OUTLINED_FUNCTION_4 &rArr; LCD_GetPixelColor &rArr; LCD_GetPixelIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelAA4_Trans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiaa_char4.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[475]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_cursor.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CURSOR_SetPositionEx
</UL>

<P><STRONG><a name="[402]"></a>_Add</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gui_fillpolygon.o(.text._Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Add
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[21b]"></a>_Color2Index_565</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, guicc_565.o(.text._Color2Index_565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_565.o(.rodata.LCD_API_ColorConv_565)
</UL>
<P><STRONG><a name="[21c]"></a>_GetIndexMask_565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_565.o(.text._GetIndexMask_565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_565.o(.rodata.LCD_API_ColorConv_565)
</UL>
<P><STRONG><a name="[21d]"></a>_Color2IndexBulk</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, guicc_565.o(.text._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_565.o(.rodata.LCD_API_ColorConv_565)
</UL>
<P><STRONG><a name="[21e]"></a>_Index2ColorBulk</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, guicc_565.o(.text._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_565.o(.rodata.LCD_API_ColorConv_565)
</UL>
<P><STRONG><a name="[21f]"></a>_Color2Index_8888</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, guicc_8888.o(.text._Color2Index_8888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
</UL>
<P><STRONG><a name="[220]"></a>_GetIndexMask_8888</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_8888.o(.text._GetIndexMask_8888))
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
</UL>
<P><STRONG><a name="[221]"></a>_Color2IndexBulk</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, guicc_8888.o(.text._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
</UL>
<P><STRONG><a name="[222]"></a>_Index2ColorBulk</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, guicc_8888.o(.text._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_8888.o(.rodata.LCD_API_ColorConv_8888)
</UL>
<P><STRONG><a name="[223]"></a>_Color2Index_M565</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, guicc_m565.o(.text._Color2Index_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
</UL>
<P><STRONG><a name="[224]"></a>_GetIndexMask_M565</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, guicc_m565.o(.text._GetIndexMask_M565))
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
</UL>
<P><STRONG><a name="[225]"></a>_Color2IndexBulk</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, guicc_m565.o(.text._Color2IndexBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Color2IndexBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
</UL>
<P><STRONG><a name="[226]"></a>_Index2ColorBulk</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, guicc_m565.o(.text._Index2ColorBulk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _Index2ColorBulk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicc_m565.o(.rodata.LCD_API_ColorConv_M565)
</UL>
<P><STRONG><a name="[34]"></a>_NextPixel_Start</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lcd_nextpixelapi.o(.text._NextPixel_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _NextPixel_Start &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitsPerPixelEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_nextpixelapi.o(.data._NextPixel_API)
</UL>
<P><STRONG><a name="[35]"></a>_NextPixel_SetPixel</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, lcd_nextpixelapi.o(.text._NextPixel_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _NextPixel_SetPixel &rArr; _NextPixel_FlushBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_nextpixelapi.o(.data._NextPixel_API)
</UL>
<P><STRONG><a name="[36]"></a>_NextPixel_NextLine</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_nextpixelapi.o(.text._NextPixel_NextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _NextPixel_NextLine &rArr; _NextPixel_FlushBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_nextpixelapi.o(.data._NextPixel_API)
</UL>
<P><STRONG><a name="[37]"></a>_NextPixel_End</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd_nextpixelapi.o(.text._NextPixel_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _NextPixel_End &rArr; GUI_ALLOC_Free &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_FlushBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_nextpixelapi.o(.data._NextPixel_API)
</UL>
<P><STRONG><a name="[809]"></a>_NextPixel_FlushBuffer</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, lcd_nextpixelapi.o(.text._NextPixel_FlushBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _NextPixel_FlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_End
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_NextLine
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_SetPixel
</UL>

<P><STRONG><a name="[80c]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_nextpixelapi.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_SetPixel
</UL>

<P><STRONG><a name="[80b]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_nextpixelapi.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NextPixel_SetPixel
</UL>

<P><STRONG><a name="[5a8]"></a>_GetBkIndex</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, gui_sprite.o(.text._GetBkIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _GetBkIndex &rArr; GUI_GetBitmapPixelIndex &rArr; GUI_GetBitmapPixelIndexEx
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[5a5]"></a>_CreateBuffer</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, gui_sprite.o(.text._CreateBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _CreateBuffer &rArr; GUI_ALLOC_AllocNoInit &rArr; _Alloc &rArr; _InitOnce &rArr; _EnlargeBlocks &rArr;  _Alloc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_AllocNoInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_GetMaxSize
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DEVICE__GetpDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[5a7]"></a>_SetBkIndexBuffered</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gui_sprite.o(.text._SetBkIndexBuffered))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _SetBkIndexBuffered &rArr; _FlushBuffer &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[5ab]"></a>_GetBkIndexAlpha</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, gui_sprite.o(.text._GetBkIndexAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _GetBkIndexAlpha &rArr; GUI_GetBitmapPixelIndex &rArr; GUI_GetBitmapPixelIndexEx
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetBitmapPixelIndex
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_18
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_13
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[5a9]"></a>_ReleaseBuffer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_sprite.o(.text._ReleaseBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _ReleaseBuffer &rArr; _FlushBuffer &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_Free
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_UnlockH
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FlushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[5a4]"></a>_GetDeviceRect</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gui_sprite.o(.text._GetDeviceRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _GetDeviceRect &rArr; LCD_GetXSizeEx &rArr; _GetDevProp
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetXSizeEx
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetYSizeEx
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[7e9]"></a>_FlushBuffer</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, gui_sprite.o(.text._FlushBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _FlushBuffer &rArr; GUI__CompactPixelIndices
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__CompactPixelIndices
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ReleaseBuffer
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetBkIndexBuffered
</UL>

<P><STRONG><a name="[5aa]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_sprite.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[5a3]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_sprite.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OUTLINED_FUNCTION_6 &rArr; GUI_ALLOC_LockH
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ALLOC_LockH
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[5a2]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_sprite.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; GUI_Lock &rArr; _GetTaskNo &rArr; GUI_X_GetTaskId &rArr; osThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[5a6]"></a>OUTLINED_FUNCTION_12</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_sprite.o(.text.OUTLINED_FUNCTION_12))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[7f3]"></a>OUTLINED_FUNCTION_13</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_sprite.o(.text.OUTLINED_FUNCTION_13))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndexAlpha
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndex
</UL>

<P><STRONG><a name="[5ac]"></a>OUTLINED_FUNCTION_14</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_sprite.o(.text.OUTLINED_FUNCTION_14))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SPRITE_SetPosition
</UL>

<P><STRONG><a name="[7f2]"></a>OUTLINED_FUNCTION_18</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_sprite.o(.text.OUTLINED_FUNCTION_18))
<BR><BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndexAlpha
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetBkIndex
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
